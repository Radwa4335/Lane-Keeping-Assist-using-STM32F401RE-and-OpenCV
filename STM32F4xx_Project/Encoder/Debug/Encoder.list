
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d58  080201a0  080201a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08029ef8  08029ef8  00019ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a39c  0802a39c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802a39c  0802a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a3a4  0802a3a4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a3a4  0802a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a3a8  0802a3a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0802a3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001d4  0802a580  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0802a580  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010253  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002878  00000000  00000000  0003049a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7c  00000000  00000000  00033bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018802  00000000  00000000  0003476c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001275a  00000000  00000000  0004cf6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095dbf  00000000  00000000  0005f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005474  00000000  00000000  000f5488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000fa8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201a0 <__do_global_dtors_aux>:
 80201a0:	b510      	push	{r4, lr}
 80201a2:	4c05      	ldr	r4, [pc, #20]	; (80201b8 <__do_global_dtors_aux+0x18>)
 80201a4:	7823      	ldrb	r3, [r4, #0]
 80201a6:	b933      	cbnz	r3, 80201b6 <__do_global_dtors_aux+0x16>
 80201a8:	4b04      	ldr	r3, [pc, #16]	; (80201bc <__do_global_dtors_aux+0x1c>)
 80201aa:	b113      	cbz	r3, 80201b2 <__do_global_dtors_aux+0x12>
 80201ac:	4804      	ldr	r0, [pc, #16]	; (80201c0 <__do_global_dtors_aux+0x20>)
 80201ae:	f3af 8000 	nop.w
 80201b2:	2301      	movs	r3, #1
 80201b4:	7023      	strb	r3, [r4, #0]
 80201b6:	bd10      	pop	{r4, pc}
 80201b8:	200001d4 	.word	0x200001d4
 80201bc:	00000000 	.word	0x00000000
 80201c0:	08029ee0 	.word	0x08029ee0

080201c4 <frame_dummy>:
 80201c4:	b508      	push	{r3, lr}
 80201c6:	4b03      	ldr	r3, [pc, #12]	; (80201d4 <frame_dummy+0x10>)
 80201c8:	b11b      	cbz	r3, 80201d2 <frame_dummy+0xe>
 80201ca:	4903      	ldr	r1, [pc, #12]	; (80201d8 <frame_dummy+0x14>)
 80201cc:	4803      	ldr	r0, [pc, #12]	; (80201dc <frame_dummy+0x18>)
 80201ce:	f3af 8000 	nop.w
 80201d2:	bd08      	pop	{r3, pc}
 80201d4:	00000000 	.word	0x00000000
 80201d8:	200001d8 	.word	0x200001d8
 80201dc:	08029ee0 	.word	0x08029ee0

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <strlen>:
 8020280:	4603      	mov	r3, r0
 8020282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020286:	2a00      	cmp	r2, #0
 8020288:	d1fb      	bne.n	8020282 <strlen+0x2>
 802028a:	1a18      	subs	r0, r3, r0
 802028c:	3801      	subs	r0, #1
 802028e:	4770      	bx	lr

08020290 <__aeabi_drsub>:
 8020290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020294:	e002      	b.n	802029c <__adddf3>
 8020296:	bf00      	nop

08020298 <__aeabi_dsub>:
 8020298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802029c <__adddf3>:
 802029c:	b530      	push	{r4, r5, lr}
 802029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202a6:	ea94 0f05 	teq	r4, r5
 80202aa:	bf08      	it	eq
 80202ac:	ea90 0f02 	teqeq	r0, r2
 80202b0:	bf1f      	itttt	ne
 80202b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202c2:	f000 80e2 	beq.w	802048a <__adddf3+0x1ee>
 80202c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202ce:	bfb8      	it	lt
 80202d0:	426d      	neglt	r5, r5
 80202d2:	dd0c      	ble.n	80202ee <__adddf3+0x52>
 80202d4:	442c      	add	r4, r5
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	ea82 0000 	eor.w	r0, r2, r0
 80202e2:	ea83 0101 	eor.w	r1, r3, r1
 80202e6:	ea80 0202 	eor.w	r2, r0, r2
 80202ea:	ea81 0303 	eor.w	r3, r1, r3
 80202ee:	2d36      	cmp	r5, #54	; 0x36
 80202f0:	bf88      	it	hi
 80202f2:	bd30      	pophi	{r4, r5, pc}
 80202f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020304:	d002      	beq.n	802030c <__adddf3+0x70>
 8020306:	4240      	negs	r0, r0
 8020308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020318:	d002      	beq.n	8020320 <__adddf3+0x84>
 802031a:	4252      	negs	r2, r2
 802031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020320:	ea94 0f05 	teq	r4, r5
 8020324:	f000 80a7 	beq.w	8020476 <__adddf3+0x1da>
 8020328:	f1a4 0401 	sub.w	r4, r4, #1
 802032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020330:	db0d      	blt.n	802034e <__adddf3+0xb2>
 8020332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020336:	fa22 f205 	lsr.w	r2, r2, r5
 802033a:	1880      	adds	r0, r0, r2
 802033c:	f141 0100 	adc.w	r1, r1, #0
 8020340:	fa03 f20e 	lsl.w	r2, r3, lr
 8020344:	1880      	adds	r0, r0, r2
 8020346:	fa43 f305 	asr.w	r3, r3, r5
 802034a:	4159      	adcs	r1, r3
 802034c:	e00e      	b.n	802036c <__adddf3+0xd0>
 802034e:	f1a5 0520 	sub.w	r5, r5, #32
 8020352:	f10e 0e20 	add.w	lr, lr, #32
 8020356:	2a01      	cmp	r2, #1
 8020358:	fa03 fc0e 	lsl.w	ip, r3, lr
 802035c:	bf28      	it	cs
 802035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020362:	fa43 f305 	asr.w	r3, r3, r5
 8020366:	18c0      	adds	r0, r0, r3
 8020368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020370:	d507      	bpl.n	8020382 <__adddf3+0xe6>
 8020372:	f04f 0e00 	mov.w	lr, #0
 8020376:	f1dc 0c00 	rsbs	ip, ip, #0
 802037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020386:	d31b      	bcc.n	80203c0 <__adddf3+0x124>
 8020388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802038c:	d30c      	bcc.n	80203a8 <__adddf3+0x10c>
 802038e:	0849      	lsrs	r1, r1, #1
 8020390:	ea5f 0030 	movs.w	r0, r0, rrx
 8020394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020398:	f104 0401 	add.w	r4, r4, #1
 802039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80203a4:	f080 809a 	bcs.w	80204dc <__adddf3+0x240>
 80203a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80203ac:	bf08      	it	eq
 80203ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203b2:	f150 0000 	adcs.w	r0, r0, #0
 80203b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203ba:	ea41 0105 	orr.w	r1, r1, r5
 80203be:	bd30      	pop	{r4, r5, pc}
 80203c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203c4:	4140      	adcs	r0, r0
 80203c6:	eb41 0101 	adc.w	r1, r1, r1
 80203ca:	3c01      	subs	r4, #1
 80203cc:	bf28      	it	cs
 80203ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203d2:	d2e9      	bcs.n	80203a8 <__adddf3+0x10c>
 80203d4:	f091 0f00 	teq	r1, #0
 80203d8:	bf04      	itt	eq
 80203da:	4601      	moveq	r1, r0
 80203dc:	2000      	moveq	r0, #0
 80203de:	fab1 f381 	clz	r3, r1
 80203e2:	bf08      	it	eq
 80203e4:	3320      	addeq	r3, #32
 80203e6:	f1a3 030b 	sub.w	r3, r3, #11
 80203ea:	f1b3 0220 	subs.w	r2, r3, #32
 80203ee:	da0c      	bge.n	802040a <__adddf3+0x16e>
 80203f0:	320c      	adds	r2, #12
 80203f2:	dd08      	ble.n	8020406 <__adddf3+0x16a>
 80203f4:	f102 0c14 	add.w	ip, r2, #20
 80203f8:	f1c2 020c 	rsb	r2, r2, #12
 80203fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8020400:	fa21 f102 	lsr.w	r1, r1, r2
 8020404:	e00c      	b.n	8020420 <__adddf3+0x184>
 8020406:	f102 0214 	add.w	r2, r2, #20
 802040a:	bfd8      	it	le
 802040c:	f1c2 0c20 	rsble	ip, r2, #32
 8020410:	fa01 f102 	lsl.w	r1, r1, r2
 8020414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020418:	bfdc      	itt	le
 802041a:	ea41 010c 	orrle.w	r1, r1, ip
 802041e:	4090      	lslle	r0, r2
 8020420:	1ae4      	subs	r4, r4, r3
 8020422:	bfa2      	ittt	ge
 8020424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020428:	4329      	orrge	r1, r5
 802042a:	bd30      	popge	{r4, r5, pc}
 802042c:	ea6f 0404 	mvn.w	r4, r4
 8020430:	3c1f      	subs	r4, #31
 8020432:	da1c      	bge.n	802046e <__adddf3+0x1d2>
 8020434:	340c      	adds	r4, #12
 8020436:	dc0e      	bgt.n	8020456 <__adddf3+0x1ba>
 8020438:	f104 0414 	add.w	r4, r4, #20
 802043c:	f1c4 0220 	rsb	r2, r4, #32
 8020440:	fa20 f004 	lsr.w	r0, r0, r4
 8020444:	fa01 f302 	lsl.w	r3, r1, r2
 8020448:	ea40 0003 	orr.w	r0, r0, r3
 802044c:	fa21 f304 	lsr.w	r3, r1, r4
 8020450:	ea45 0103 	orr.w	r1, r5, r3
 8020454:	bd30      	pop	{r4, r5, pc}
 8020456:	f1c4 040c 	rsb	r4, r4, #12
 802045a:	f1c4 0220 	rsb	r2, r4, #32
 802045e:	fa20 f002 	lsr.w	r0, r0, r2
 8020462:	fa01 f304 	lsl.w	r3, r1, r4
 8020466:	ea40 0003 	orr.w	r0, r0, r3
 802046a:	4629      	mov	r1, r5
 802046c:	bd30      	pop	{r4, r5, pc}
 802046e:	fa21 f004 	lsr.w	r0, r1, r4
 8020472:	4629      	mov	r1, r5
 8020474:	bd30      	pop	{r4, r5, pc}
 8020476:	f094 0f00 	teq	r4, #0
 802047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802047e:	bf06      	itte	eq
 8020480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020484:	3401      	addeq	r4, #1
 8020486:	3d01      	subne	r5, #1
 8020488:	e74e      	b.n	8020328 <__adddf3+0x8c>
 802048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802048e:	bf18      	it	ne
 8020490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020494:	d029      	beq.n	80204ea <__adddf3+0x24e>
 8020496:	ea94 0f05 	teq	r4, r5
 802049a:	bf08      	it	eq
 802049c:	ea90 0f02 	teqeq	r0, r2
 80204a0:	d005      	beq.n	80204ae <__adddf3+0x212>
 80204a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204a6:	bf04      	itt	eq
 80204a8:	4619      	moveq	r1, r3
 80204aa:	4610      	moveq	r0, r2
 80204ac:	bd30      	pop	{r4, r5, pc}
 80204ae:	ea91 0f03 	teq	r1, r3
 80204b2:	bf1e      	ittt	ne
 80204b4:	2100      	movne	r1, #0
 80204b6:	2000      	movne	r0, #0
 80204b8:	bd30      	popne	{r4, r5, pc}
 80204ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204be:	d105      	bne.n	80204cc <__adddf3+0x230>
 80204c0:	0040      	lsls	r0, r0, #1
 80204c2:	4149      	adcs	r1, r1
 80204c4:	bf28      	it	cs
 80204c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ca:	bd30      	pop	{r4, r5, pc}
 80204cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204d0:	bf3c      	itt	cc
 80204d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204d6:	bd30      	popcc	{r4, r5, pc}
 80204d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204e4:	f04f 0000 	mov.w	r0, #0
 80204e8:	bd30      	pop	{r4, r5, pc}
 80204ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ee:	bf1a      	itte	ne
 80204f0:	4619      	movne	r1, r3
 80204f2:	4610      	movne	r0, r2
 80204f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204f8:	bf1c      	itt	ne
 80204fa:	460b      	movne	r3, r1
 80204fc:	4602      	movne	r2, r0
 80204fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020502:	bf06      	itte	eq
 8020504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020508:	ea91 0f03 	teqeq	r1, r3
 802050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020510:	bd30      	pop	{r4, r5, pc}
 8020512:	bf00      	nop

08020514 <__aeabi_ui2d>:
 8020514:	f090 0f00 	teq	r0, #0
 8020518:	bf04      	itt	eq
 802051a:	2100      	moveq	r1, #0
 802051c:	4770      	bxeq	lr
 802051e:	b530      	push	{r4, r5, lr}
 8020520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020528:	f04f 0500 	mov.w	r5, #0
 802052c:	f04f 0100 	mov.w	r1, #0
 8020530:	e750      	b.n	80203d4 <__adddf3+0x138>
 8020532:	bf00      	nop

08020534 <__aeabi_i2d>:
 8020534:	f090 0f00 	teq	r0, #0
 8020538:	bf04      	itt	eq
 802053a:	2100      	moveq	r1, #0
 802053c:	4770      	bxeq	lr
 802053e:	b530      	push	{r4, r5, lr}
 8020540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802054c:	bf48      	it	mi
 802054e:	4240      	negmi	r0, r0
 8020550:	f04f 0100 	mov.w	r1, #0
 8020554:	e73e      	b.n	80203d4 <__adddf3+0x138>
 8020556:	bf00      	nop

08020558 <__aeabi_f2d>:
 8020558:	0042      	lsls	r2, r0, #1
 802055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020566:	bf1f      	itttt	ne
 8020568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020574:	4770      	bxne	lr
 8020576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802057a:	bf08      	it	eq
 802057c:	4770      	bxeq	lr
 802057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020582:	bf04      	itt	eq
 8020584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020588:	4770      	bxeq	lr
 802058a:	b530      	push	{r4, r5, lr}
 802058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020598:	e71c      	b.n	80203d4 <__adddf3+0x138>
 802059a:	bf00      	nop

0802059c <__aeabi_ul2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f04f 0500 	mov.w	r5, #0
 80205aa:	e00a      	b.n	80205c2 <__aeabi_l2d+0x16>

080205ac <__aeabi_l2d>:
 80205ac:	ea50 0201 	orrs.w	r2, r0, r1
 80205b0:	bf08      	it	eq
 80205b2:	4770      	bxeq	lr
 80205b4:	b530      	push	{r4, r5, lr}
 80205b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205ba:	d502      	bpl.n	80205c2 <__aeabi_l2d+0x16>
 80205bc:	4240      	negs	r0, r0
 80205be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205ce:	f43f aed8 	beq.w	8020382 <__adddf3+0xe6>
 80205d2:	f04f 0203 	mov.w	r2, #3
 80205d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205da:	bf18      	it	ne
 80205dc:	3203      	addne	r2, #3
 80205de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205e2:	bf18      	it	ne
 80205e4:	3203      	addne	r2, #3
 80205e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205ea:	f1c2 0320 	rsb	r3, r2, #32
 80205ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80205f2:	fa20 f002 	lsr.w	r0, r0, r2
 80205f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205fa:	ea40 000e 	orr.w	r0, r0, lr
 80205fe:	fa21 f102 	lsr.w	r1, r1, r2
 8020602:	4414      	add	r4, r2
 8020604:	e6bd      	b.n	8020382 <__adddf3+0xe6>
 8020606:	bf00      	nop

08020608 <__aeabi_dmul>:
 8020608:	b570      	push	{r4, r5, r6, lr}
 802060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020616:	bf1d      	ittte	ne
 8020618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802061c:	ea94 0f0c 	teqne	r4, ip
 8020620:	ea95 0f0c 	teqne	r5, ip
 8020624:	f000 f8de 	bleq	80207e4 <__aeabi_dmul+0x1dc>
 8020628:	442c      	add	r4, r5
 802062a:	ea81 0603 	eor.w	r6, r1, r3
 802062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802063a:	bf18      	it	ne
 802063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020648:	d038      	beq.n	80206bc <__aeabi_dmul+0xb4>
 802064a:	fba0 ce02 	umull	ip, lr, r0, r2
 802064e:	f04f 0500 	mov.w	r5, #0
 8020652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802065e:	f04f 0600 	mov.w	r6, #0
 8020662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020666:	f09c 0f00 	teq	ip, #0
 802066a:	bf18      	it	ne
 802066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802067c:	d204      	bcs.n	8020688 <__aeabi_dmul+0x80>
 802067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020682:	416d      	adcs	r5, r5
 8020684:	eb46 0606 	adc.w	r6, r6, r6
 8020688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80206a0:	bf88      	it	hi
 80206a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80206a6:	d81e      	bhi.n	80206e6 <__aeabi_dmul+0xde>
 80206a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80206ac:	bf08      	it	eq
 80206ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206b2:	f150 0000 	adcs.w	r0, r0, #0
 80206b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206ba:	bd70      	pop	{r4, r5, r6, pc}
 80206bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206c0:	ea46 0101 	orr.w	r1, r6, r1
 80206c4:	ea40 0002 	orr.w	r0, r0, r2
 80206c8:	ea81 0103 	eor.w	r1, r1, r3
 80206cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206d0:	bfc2      	ittt	gt
 80206d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206da:	bd70      	popgt	{r4, r5, r6, pc}
 80206dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206e0:	f04f 0e00 	mov.w	lr, #0
 80206e4:	3c01      	subs	r4, #1
 80206e6:	f300 80ab 	bgt.w	8020840 <__aeabi_dmul+0x238>
 80206ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206ee:	bfde      	ittt	le
 80206f0:	2000      	movle	r0, #0
 80206f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206f6:	bd70      	pople	{r4, r5, r6, pc}
 80206f8:	f1c4 0400 	rsb	r4, r4, #0
 80206fc:	3c20      	subs	r4, #32
 80206fe:	da35      	bge.n	802076c <__aeabi_dmul+0x164>
 8020700:	340c      	adds	r4, #12
 8020702:	dc1b      	bgt.n	802073c <__aeabi_dmul+0x134>
 8020704:	f104 0414 	add.w	r4, r4, #20
 8020708:	f1c4 0520 	rsb	r5, r4, #32
 802070c:	fa00 f305 	lsl.w	r3, r0, r5
 8020710:	fa20 f004 	lsr.w	r0, r0, r4
 8020714:	fa01 f205 	lsl.w	r2, r1, r5
 8020718:	ea40 0002 	orr.w	r0, r0, r2
 802071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020728:	fa21 f604 	lsr.w	r6, r1, r4
 802072c:	eb42 0106 	adc.w	r1, r2, r6
 8020730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020734:	bf08      	it	eq
 8020736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802073a:	bd70      	pop	{r4, r5, r6, pc}
 802073c:	f1c4 040c 	rsb	r4, r4, #12
 8020740:	f1c4 0520 	rsb	r5, r4, #32
 8020744:	fa00 f304 	lsl.w	r3, r0, r4
 8020748:	fa20 f005 	lsr.w	r0, r0, r5
 802074c:	fa01 f204 	lsl.w	r2, r1, r4
 8020750:	ea40 0002 	orr.w	r0, r0, r2
 8020754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802075c:	f141 0100 	adc.w	r1, r1, #0
 8020760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020764:	bf08      	it	eq
 8020766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802076a:	bd70      	pop	{r4, r5, r6, pc}
 802076c:	f1c4 0520 	rsb	r5, r4, #32
 8020770:	fa00 f205 	lsl.w	r2, r0, r5
 8020774:	ea4e 0e02 	orr.w	lr, lr, r2
 8020778:	fa20 f304 	lsr.w	r3, r0, r4
 802077c:	fa01 f205 	lsl.w	r2, r1, r5
 8020780:	ea43 0302 	orr.w	r3, r3, r2
 8020784:	fa21 f004 	lsr.w	r0, r1, r4
 8020788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802078c:	fa21 f204 	lsr.w	r2, r1, r4
 8020790:	ea20 0002 	bic.w	r0, r0, r2
 8020794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802079c:	bf08      	it	eq
 802079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207a2:	bd70      	pop	{r4, r5, r6, pc}
 80207a4:	f094 0f00 	teq	r4, #0
 80207a8:	d10f      	bne.n	80207ca <__aeabi_dmul+0x1c2>
 80207aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80207ae:	0040      	lsls	r0, r0, #1
 80207b0:	eb41 0101 	adc.w	r1, r1, r1
 80207b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207b8:	bf08      	it	eq
 80207ba:	3c01      	subeq	r4, #1
 80207bc:	d0f7      	beq.n	80207ae <__aeabi_dmul+0x1a6>
 80207be:	ea41 0106 	orr.w	r1, r1, r6
 80207c2:	f095 0f00 	teq	r5, #0
 80207c6:	bf18      	it	ne
 80207c8:	4770      	bxne	lr
 80207ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207ce:	0052      	lsls	r2, r2, #1
 80207d0:	eb43 0303 	adc.w	r3, r3, r3
 80207d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207d8:	bf08      	it	eq
 80207da:	3d01      	subeq	r5, #1
 80207dc:	d0f7      	beq.n	80207ce <__aeabi_dmul+0x1c6>
 80207de:	ea43 0306 	orr.w	r3, r3, r6
 80207e2:	4770      	bx	lr
 80207e4:	ea94 0f0c 	teq	r4, ip
 80207e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207ec:	bf18      	it	ne
 80207ee:	ea95 0f0c 	teqne	r5, ip
 80207f2:	d00c      	beq.n	802080e <__aeabi_dmul+0x206>
 80207f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207f8:	bf18      	it	ne
 80207fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207fe:	d1d1      	bne.n	80207a4 <__aeabi_dmul+0x19c>
 8020800:	ea81 0103 	eor.w	r1, r1, r3
 8020804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020808:	f04f 0000 	mov.w	r0, #0
 802080c:	bd70      	pop	{r4, r5, r6, pc}
 802080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020812:	bf06      	itte	eq
 8020814:	4610      	moveq	r0, r2
 8020816:	4619      	moveq	r1, r3
 8020818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802081c:	d019      	beq.n	8020852 <__aeabi_dmul+0x24a>
 802081e:	ea94 0f0c 	teq	r4, ip
 8020822:	d102      	bne.n	802082a <__aeabi_dmul+0x222>
 8020824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020828:	d113      	bne.n	8020852 <__aeabi_dmul+0x24a>
 802082a:	ea95 0f0c 	teq	r5, ip
 802082e:	d105      	bne.n	802083c <__aeabi_dmul+0x234>
 8020830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020834:	bf1c      	itt	ne
 8020836:	4610      	movne	r0, r2
 8020838:	4619      	movne	r1, r3
 802083a:	d10a      	bne.n	8020852 <__aeabi_dmul+0x24a>
 802083c:	ea81 0103 	eor.w	r1, r1, r3
 8020840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802084c:	f04f 0000 	mov.w	r0, #0
 8020850:	bd70      	pop	{r4, r5, r6, pc}
 8020852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802085a:	bd70      	pop	{r4, r5, r6, pc}

0802085c <__aeabi_ddiv>:
 802085c:	b570      	push	{r4, r5, r6, lr}
 802085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802086a:	bf1d      	ittte	ne
 802086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020870:	ea94 0f0c 	teqne	r4, ip
 8020874:	ea95 0f0c 	teqne	r5, ip
 8020878:	f000 f8a7 	bleq	80209ca <__aeabi_ddiv+0x16e>
 802087c:	eba4 0405 	sub.w	r4, r4, r5
 8020880:	ea81 0e03 	eor.w	lr, r1, r3
 8020884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802088c:	f000 8088 	beq.w	80209a0 <__aeabi_ddiv+0x144>
 8020890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208b4:	429d      	cmp	r5, r3
 80208b6:	bf08      	it	eq
 80208b8:	4296      	cmpeq	r6, r2
 80208ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208c2:	d202      	bcs.n	80208ca <__aeabi_ddiv+0x6e>
 80208c4:	085b      	lsrs	r3, r3, #1
 80208c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ca:	1ab6      	subs	r6, r6, r2
 80208cc:	eb65 0503 	sbc.w	r5, r5, r3
 80208d0:	085b      	lsrs	r3, r3, #1
 80208d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208de:	ebb6 0e02 	subs.w	lr, r6, r2
 80208e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208e6:	bf22      	ittt	cs
 80208e8:	1ab6      	subcs	r6, r6, r2
 80208ea:	4675      	movcs	r5, lr
 80208ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80208f0:	085b      	lsrs	r3, r3, #1
 80208f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208fe:	bf22      	ittt	cs
 8020900:	1ab6      	subcs	r6, r6, r2
 8020902:	4675      	movcs	r5, lr
 8020904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020908:	085b      	lsrs	r3, r3, #1
 802090a:	ea4f 0232 	mov.w	r2, r2, rrx
 802090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020916:	bf22      	ittt	cs
 8020918:	1ab6      	subcs	r6, r6, r2
 802091a:	4675      	movcs	r5, lr
 802091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	ebb6 0e02 	subs.w	lr, r6, r2
 802092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802092e:	bf22      	ittt	cs
 8020930:	1ab6      	subcs	r6, r6, r2
 8020932:	4675      	movcs	r5, lr
 8020934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020938:	ea55 0e06 	orrs.w	lr, r5, r6
 802093c:	d018      	beq.n	8020970 <__aeabi_ddiv+0x114>
 802093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802095a:	d1c0      	bne.n	80208de <__aeabi_ddiv+0x82>
 802095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020960:	d10b      	bne.n	802097a <__aeabi_ddiv+0x11e>
 8020962:	ea41 0100 	orr.w	r1, r1, r0
 8020966:	f04f 0000 	mov.w	r0, #0
 802096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802096e:	e7b6      	b.n	80208de <__aeabi_ddiv+0x82>
 8020970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020974:	bf04      	itt	eq
 8020976:	4301      	orreq	r1, r0
 8020978:	2000      	moveq	r0, #0
 802097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802097e:	bf88      	it	hi
 8020980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020984:	f63f aeaf 	bhi.w	80206e6 <__aeabi_dmul+0xde>
 8020988:	ebb5 0c03 	subs.w	ip, r5, r3
 802098c:	bf04      	itt	eq
 802098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020996:	f150 0000 	adcs.w	r0, r0, #0
 802099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802099e:	bd70      	pop	{r4, r5, r6, pc}
 80209a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80209a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209ac:	bfc2      	ittt	gt
 80209ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209b6:	bd70      	popgt	{r4, r5, r6, pc}
 80209b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209bc:	f04f 0e00 	mov.w	lr, #0
 80209c0:	3c01      	subs	r4, #1
 80209c2:	e690      	b.n	80206e6 <__aeabi_dmul+0xde>
 80209c4:	ea45 0e06 	orr.w	lr, r5, r6
 80209c8:	e68d      	b.n	80206e6 <__aeabi_dmul+0xde>
 80209ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209ce:	ea94 0f0c 	teq	r4, ip
 80209d2:	bf08      	it	eq
 80209d4:	ea95 0f0c 	teqeq	r5, ip
 80209d8:	f43f af3b 	beq.w	8020852 <__aeabi_dmul+0x24a>
 80209dc:	ea94 0f0c 	teq	r4, ip
 80209e0:	d10a      	bne.n	80209f8 <__aeabi_ddiv+0x19c>
 80209e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209e6:	f47f af34 	bne.w	8020852 <__aeabi_dmul+0x24a>
 80209ea:	ea95 0f0c 	teq	r5, ip
 80209ee:	f47f af25 	bne.w	802083c <__aeabi_dmul+0x234>
 80209f2:	4610      	mov	r0, r2
 80209f4:	4619      	mov	r1, r3
 80209f6:	e72c      	b.n	8020852 <__aeabi_dmul+0x24a>
 80209f8:	ea95 0f0c 	teq	r5, ip
 80209fc:	d106      	bne.n	8020a0c <__aeabi_ddiv+0x1b0>
 80209fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a02:	f43f aefd 	beq.w	8020800 <__aeabi_dmul+0x1f8>
 8020a06:	4610      	mov	r0, r2
 8020a08:	4619      	mov	r1, r3
 8020a0a:	e722      	b.n	8020852 <__aeabi_dmul+0x24a>
 8020a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a10:	bf18      	it	ne
 8020a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a16:	f47f aec5 	bne.w	80207a4 <__aeabi_dmul+0x19c>
 8020a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a1e:	f47f af0d 	bne.w	802083c <__aeabi_dmul+0x234>
 8020a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a26:	f47f aeeb 	bne.w	8020800 <__aeabi_dmul+0x1f8>
 8020a2a:	e712      	b.n	8020852 <__aeabi_dmul+0x24a>

08020a2c <__gedf2>:
 8020a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a30:	e006      	b.n	8020a40 <__cmpdf2+0x4>
 8020a32:	bf00      	nop

08020a34 <__ledf2>:
 8020a34:	f04f 0c01 	mov.w	ip, #1
 8020a38:	e002      	b.n	8020a40 <__cmpdf2+0x4>
 8020a3a:	bf00      	nop

08020a3c <__cmpdf2>:
 8020a3c:	f04f 0c01 	mov.w	ip, #1
 8020a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a50:	bf18      	it	ne
 8020a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a56:	d01b      	beq.n	8020a90 <__cmpdf2+0x54>
 8020a58:	b001      	add	sp, #4
 8020a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a5e:	bf0c      	ite	eq
 8020a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a64:	ea91 0f03 	teqne	r1, r3
 8020a68:	bf02      	ittt	eq
 8020a6a:	ea90 0f02 	teqeq	r0, r2
 8020a6e:	2000      	moveq	r0, #0
 8020a70:	4770      	bxeq	lr
 8020a72:	f110 0f00 	cmn.w	r0, #0
 8020a76:	ea91 0f03 	teq	r1, r3
 8020a7a:	bf58      	it	pl
 8020a7c:	4299      	cmppl	r1, r3
 8020a7e:	bf08      	it	eq
 8020a80:	4290      	cmpeq	r0, r2
 8020a82:	bf2c      	ite	cs
 8020a84:	17d8      	asrcs	r0, r3, #31
 8020a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020a8a:	f040 0001 	orr.w	r0, r0, #1
 8020a8e:	4770      	bx	lr
 8020a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a98:	d102      	bne.n	8020aa0 <__cmpdf2+0x64>
 8020a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a9e:	d107      	bne.n	8020ab0 <__cmpdf2+0x74>
 8020aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020aa8:	d1d6      	bne.n	8020a58 <__cmpdf2+0x1c>
 8020aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020aae:	d0d3      	beq.n	8020a58 <__cmpdf2+0x1c>
 8020ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020ab4:	4770      	bx	lr
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_cdrcmple>:
 8020ab8:	4684      	mov	ip, r0
 8020aba:	4610      	mov	r0, r2
 8020abc:	4662      	mov	r2, ip
 8020abe:	468c      	mov	ip, r1
 8020ac0:	4619      	mov	r1, r3
 8020ac2:	4663      	mov	r3, ip
 8020ac4:	e000      	b.n	8020ac8 <__aeabi_cdcmpeq>
 8020ac6:	bf00      	nop

08020ac8 <__aeabi_cdcmpeq>:
 8020ac8:	b501      	push	{r0, lr}
 8020aca:	f7ff ffb7 	bl	8020a3c <__cmpdf2>
 8020ace:	2800      	cmp	r0, #0
 8020ad0:	bf48      	it	mi
 8020ad2:	f110 0f00 	cmnmi.w	r0, #0
 8020ad6:	bd01      	pop	{r0, pc}

08020ad8 <__aeabi_dcmpeq>:
 8020ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020adc:	f7ff fff4 	bl	8020ac8 <__aeabi_cdcmpeq>
 8020ae0:	bf0c      	ite	eq
 8020ae2:	2001      	moveq	r0, #1
 8020ae4:	2000      	movne	r0, #0
 8020ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020aea:	bf00      	nop

08020aec <__aeabi_dcmplt>:
 8020aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af0:	f7ff ffea 	bl	8020ac8 <__aeabi_cdcmpeq>
 8020af4:	bf34      	ite	cc
 8020af6:	2001      	movcc	r0, #1
 8020af8:	2000      	movcs	r0, #0
 8020afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8020afe:	bf00      	nop

08020b00 <__aeabi_dcmple>:
 8020b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b04:	f7ff ffe0 	bl	8020ac8 <__aeabi_cdcmpeq>
 8020b08:	bf94      	ite	ls
 8020b0a:	2001      	movls	r0, #1
 8020b0c:	2000      	movhi	r0, #0
 8020b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b12:	bf00      	nop

08020b14 <__aeabi_dcmpge>:
 8020b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b18:	f7ff ffce 	bl	8020ab8 <__aeabi_cdrcmple>
 8020b1c:	bf94      	ite	ls
 8020b1e:	2001      	movls	r0, #1
 8020b20:	2000      	movhi	r0, #0
 8020b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b26:	bf00      	nop

08020b28 <__aeabi_dcmpgt>:
 8020b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b2c:	f7ff ffc4 	bl	8020ab8 <__aeabi_cdrcmple>
 8020b30:	bf34      	ite	cc
 8020b32:	2001      	movcc	r0, #1
 8020b34:	2000      	movcs	r0, #0
 8020b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b3a:	bf00      	nop

08020b3c <__aeabi_dcmpun>:
 8020b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b44:	d102      	bne.n	8020b4c <__aeabi_dcmpun+0x10>
 8020b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b4a:	d10a      	bne.n	8020b62 <__aeabi_dcmpun+0x26>
 8020b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b54:	d102      	bne.n	8020b5c <__aeabi_dcmpun+0x20>
 8020b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b5a:	d102      	bne.n	8020b62 <__aeabi_dcmpun+0x26>
 8020b5c:	f04f 0000 	mov.w	r0, #0
 8020b60:	4770      	bx	lr
 8020b62:	f04f 0001 	mov.w	r0, #1
 8020b66:	4770      	bx	lr

08020b68 <__aeabi_d2iz>:
 8020b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b70:	d215      	bcs.n	8020b9e <__aeabi_d2iz+0x36>
 8020b72:	d511      	bpl.n	8020b98 <__aeabi_d2iz+0x30>
 8020b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b7c:	d912      	bls.n	8020ba4 <__aeabi_d2iz+0x3c>
 8020b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8020b92:	bf18      	it	ne
 8020b94:	4240      	negne	r0, r0
 8020b96:	4770      	bx	lr
 8020b98:	f04f 0000 	mov.w	r0, #0
 8020b9c:	4770      	bx	lr
 8020b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020ba2:	d105      	bne.n	8020bb0 <__aeabi_d2iz+0x48>
 8020ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020ba8:	bf08      	it	eq
 8020baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020bae:	4770      	bx	lr
 8020bb0:	f04f 0000 	mov.w	r0, #0
 8020bb4:	4770      	bx	lr
 8020bb6:	bf00      	nop

08020bb8 <__aeabi_d2uiz>:
 8020bb8:	004a      	lsls	r2, r1, #1
 8020bba:	d211      	bcs.n	8020be0 <__aeabi_d2uiz+0x28>
 8020bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bc0:	d211      	bcs.n	8020be6 <__aeabi_d2uiz+0x2e>
 8020bc2:	d50d      	bpl.n	8020be0 <__aeabi_d2uiz+0x28>
 8020bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bcc:	d40e      	bmi.n	8020bec <__aeabi_d2uiz+0x34>
 8020bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bda:	fa23 f002 	lsr.w	r0, r3, r2
 8020bde:	4770      	bx	lr
 8020be0:	f04f 0000 	mov.w	r0, #0
 8020be4:	4770      	bx	lr
 8020be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bea:	d102      	bne.n	8020bf2 <__aeabi_d2uiz+0x3a>
 8020bec:	f04f 30ff 	mov.w	r0, #4294967295
 8020bf0:	4770      	bx	lr
 8020bf2:	f04f 0000 	mov.w	r0, #0
 8020bf6:	4770      	bx	lr

08020bf8 <__aeabi_d2f>:
 8020bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020c00:	bf24      	itt	cs
 8020c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020c0a:	d90d      	bls.n	8020c28 <__aeabi_d2f+0x30>
 8020c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c20:	bf08      	it	eq
 8020c22:	f020 0001 	biceq.w	r0, r0, #1
 8020c26:	4770      	bx	lr
 8020c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c2c:	d121      	bne.n	8020c72 <__aeabi_d2f+0x7a>
 8020c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c32:	bfbc      	itt	lt
 8020c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c38:	4770      	bxlt	lr
 8020c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c42:	f1c2 0218 	rsb	r2, r2, #24
 8020c46:	f1c2 0c20 	rsb	ip, r2, #32
 8020c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8020c52:	bf18      	it	ne
 8020c54:	f040 0001 	orrne.w	r0, r0, #1
 8020c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c64:	ea40 000c 	orr.w	r0, r0, ip
 8020c68:	fa23 f302 	lsr.w	r3, r3, r2
 8020c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c70:	e7cc      	b.n	8020c0c <__aeabi_d2f+0x14>
 8020c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020c76:	d107      	bne.n	8020c88 <__aeabi_d2f+0x90>
 8020c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020c7c:	bf1e      	ittt	ne
 8020c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020c86:	4770      	bxne	lr
 8020c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop

08020c98 <__aeabi_uldivmod>:
 8020c98:	b953      	cbnz	r3, 8020cb0 <__aeabi_uldivmod+0x18>
 8020c9a:	b94a      	cbnz	r2, 8020cb0 <__aeabi_uldivmod+0x18>
 8020c9c:	2900      	cmp	r1, #0
 8020c9e:	bf08      	it	eq
 8020ca0:	2800      	cmpeq	r0, #0
 8020ca2:	bf1c      	itt	ne
 8020ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8020ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8020cac:	f000 b9a6 	b.w	8020ffc <__aeabi_idiv0>
 8020cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020cb8:	f000 f83c 	bl	8020d34 <__udivmoddi4>
 8020cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020cc4:	b004      	add	sp, #16
 8020cc6:	4770      	bx	lr

08020cc8 <__aeabi_d2lz>:
 8020cc8:	b538      	push	{r3, r4, r5, lr}
 8020cca:	2200      	movs	r2, #0
 8020ccc:	2300      	movs	r3, #0
 8020cce:	4604      	mov	r4, r0
 8020cd0:	460d      	mov	r5, r1
 8020cd2:	f7ff ff0b 	bl	8020aec <__aeabi_dcmplt>
 8020cd6:	b928      	cbnz	r0, 8020ce4 <__aeabi_d2lz+0x1c>
 8020cd8:	4620      	mov	r0, r4
 8020cda:	4629      	mov	r1, r5
 8020cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ce0:	f000 b80a 	b.w	8020cf8 <__aeabi_d2ulz>
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8020cea:	f000 f805 	bl	8020cf8 <__aeabi_d2ulz>
 8020cee:	4240      	negs	r0, r0
 8020cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020cf4:	bd38      	pop	{r3, r4, r5, pc}
 8020cf6:	bf00      	nop

08020cf8 <__aeabi_d2ulz>:
 8020cf8:	b5d0      	push	{r4, r6, r7, lr}
 8020cfa:	4b0c      	ldr	r3, [pc, #48]	; (8020d2c <__aeabi_d2ulz+0x34>)
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	4606      	mov	r6, r0
 8020d00:	460f      	mov	r7, r1
 8020d02:	f7ff fc81 	bl	8020608 <__aeabi_dmul>
 8020d06:	f7ff ff57 	bl	8020bb8 <__aeabi_d2uiz>
 8020d0a:	4604      	mov	r4, r0
 8020d0c:	f7ff fc02 	bl	8020514 <__aeabi_ui2d>
 8020d10:	4b07      	ldr	r3, [pc, #28]	; (8020d30 <__aeabi_d2ulz+0x38>)
 8020d12:	2200      	movs	r2, #0
 8020d14:	f7ff fc78 	bl	8020608 <__aeabi_dmul>
 8020d18:	4602      	mov	r2, r0
 8020d1a:	460b      	mov	r3, r1
 8020d1c:	4630      	mov	r0, r6
 8020d1e:	4639      	mov	r1, r7
 8020d20:	f7ff faba 	bl	8020298 <__aeabi_dsub>
 8020d24:	f7ff ff48 	bl	8020bb8 <__aeabi_d2uiz>
 8020d28:	4621      	mov	r1, r4
 8020d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d2c:	3df00000 	.word	0x3df00000
 8020d30:	41f00000 	.word	0x41f00000

08020d34 <__udivmoddi4>:
 8020d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d38:	9e08      	ldr	r6, [sp, #32]
 8020d3a:	460d      	mov	r5, r1
 8020d3c:	4604      	mov	r4, r0
 8020d3e:	460f      	mov	r7, r1
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d14a      	bne.n	8020dda <__udivmoddi4+0xa6>
 8020d44:	428a      	cmp	r2, r1
 8020d46:	4694      	mov	ip, r2
 8020d48:	d965      	bls.n	8020e16 <__udivmoddi4+0xe2>
 8020d4a:	fab2 f382 	clz	r3, r2
 8020d4e:	b143      	cbz	r3, 8020d62 <__udivmoddi4+0x2e>
 8020d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8020d54:	f1c3 0220 	rsb	r2, r3, #32
 8020d58:	409f      	lsls	r7, r3
 8020d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8020d5e:	4317      	orrs	r7, r2
 8020d60:	409c      	lsls	r4, r3
 8020d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020d66:	fa1f f58c 	uxth.w	r5, ip
 8020d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8020d6e:	0c22      	lsrs	r2, r4, #16
 8020d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8020d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8020d78:	fb01 f005 	mul.w	r0, r1, r5
 8020d7c:	4290      	cmp	r0, r2
 8020d7e:	d90a      	bls.n	8020d96 <__udivmoddi4+0x62>
 8020d80:	eb1c 0202 	adds.w	r2, ip, r2
 8020d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8020d88:	f080 811c 	bcs.w	8020fc4 <__udivmoddi4+0x290>
 8020d8c:	4290      	cmp	r0, r2
 8020d8e:	f240 8119 	bls.w	8020fc4 <__udivmoddi4+0x290>
 8020d92:	3902      	subs	r1, #2
 8020d94:	4462      	add	r2, ip
 8020d96:	1a12      	subs	r2, r2, r0
 8020d98:	b2a4      	uxth	r4, r4
 8020d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8020d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8020da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020da6:	fb00 f505 	mul.w	r5, r0, r5
 8020daa:	42a5      	cmp	r5, r4
 8020dac:	d90a      	bls.n	8020dc4 <__udivmoddi4+0x90>
 8020dae:	eb1c 0404 	adds.w	r4, ip, r4
 8020db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8020db6:	f080 8107 	bcs.w	8020fc8 <__udivmoddi4+0x294>
 8020dba:	42a5      	cmp	r5, r4
 8020dbc:	f240 8104 	bls.w	8020fc8 <__udivmoddi4+0x294>
 8020dc0:	4464      	add	r4, ip
 8020dc2:	3802      	subs	r0, #2
 8020dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020dc8:	1b64      	subs	r4, r4, r5
 8020dca:	2100      	movs	r1, #0
 8020dcc:	b11e      	cbz	r6, 8020dd6 <__udivmoddi4+0xa2>
 8020dce:	40dc      	lsrs	r4, r3
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8020dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dda:	428b      	cmp	r3, r1
 8020ddc:	d908      	bls.n	8020df0 <__udivmoddi4+0xbc>
 8020dde:	2e00      	cmp	r6, #0
 8020de0:	f000 80ed 	beq.w	8020fbe <__udivmoddi4+0x28a>
 8020de4:	2100      	movs	r1, #0
 8020de6:	e9c6 0500 	strd	r0, r5, [r6]
 8020dea:	4608      	mov	r0, r1
 8020dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020df0:	fab3 f183 	clz	r1, r3
 8020df4:	2900      	cmp	r1, #0
 8020df6:	d149      	bne.n	8020e8c <__udivmoddi4+0x158>
 8020df8:	42ab      	cmp	r3, r5
 8020dfa:	d302      	bcc.n	8020e02 <__udivmoddi4+0xce>
 8020dfc:	4282      	cmp	r2, r0
 8020dfe:	f200 80f8 	bhi.w	8020ff2 <__udivmoddi4+0x2be>
 8020e02:	1a84      	subs	r4, r0, r2
 8020e04:	eb65 0203 	sbc.w	r2, r5, r3
 8020e08:	2001      	movs	r0, #1
 8020e0a:	4617      	mov	r7, r2
 8020e0c:	2e00      	cmp	r6, #0
 8020e0e:	d0e2      	beq.n	8020dd6 <__udivmoddi4+0xa2>
 8020e10:	e9c6 4700 	strd	r4, r7, [r6]
 8020e14:	e7df      	b.n	8020dd6 <__udivmoddi4+0xa2>
 8020e16:	b902      	cbnz	r2, 8020e1a <__udivmoddi4+0xe6>
 8020e18:	deff      	udf	#255	; 0xff
 8020e1a:	fab2 f382 	clz	r3, r2
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	f040 8090 	bne.w	8020f44 <__udivmoddi4+0x210>
 8020e24:	1a8a      	subs	r2, r1, r2
 8020e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020e2a:	fa1f fe8c 	uxth.w	lr, ip
 8020e2e:	2101      	movs	r1, #1
 8020e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8020e34:	fb07 2015 	mls	r0, r7, r5, r2
 8020e38:	0c22      	lsrs	r2, r4, #16
 8020e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020e3e:	fb0e f005 	mul.w	r0, lr, r5
 8020e42:	4290      	cmp	r0, r2
 8020e44:	d908      	bls.n	8020e58 <__udivmoddi4+0x124>
 8020e46:	eb1c 0202 	adds.w	r2, ip, r2
 8020e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8020e4e:	d202      	bcs.n	8020e56 <__udivmoddi4+0x122>
 8020e50:	4290      	cmp	r0, r2
 8020e52:	f200 80cb 	bhi.w	8020fec <__udivmoddi4+0x2b8>
 8020e56:	4645      	mov	r5, r8
 8020e58:	1a12      	subs	r2, r2, r0
 8020e5a:	b2a4      	uxth	r4, r4
 8020e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8020e60:	fb07 2210 	mls	r2, r7, r0, r2
 8020e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020e68:	fb0e fe00 	mul.w	lr, lr, r0
 8020e6c:	45a6      	cmp	lr, r4
 8020e6e:	d908      	bls.n	8020e82 <__udivmoddi4+0x14e>
 8020e70:	eb1c 0404 	adds.w	r4, ip, r4
 8020e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8020e78:	d202      	bcs.n	8020e80 <__udivmoddi4+0x14c>
 8020e7a:	45a6      	cmp	lr, r4
 8020e7c:	f200 80bb 	bhi.w	8020ff6 <__udivmoddi4+0x2c2>
 8020e80:	4610      	mov	r0, r2
 8020e82:	eba4 040e 	sub.w	r4, r4, lr
 8020e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020e8a:	e79f      	b.n	8020dcc <__udivmoddi4+0x98>
 8020e8c:	f1c1 0720 	rsb	r7, r1, #32
 8020e90:	408b      	lsls	r3, r1
 8020e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8020e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8020e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8020e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8020ea2:	40fd      	lsrs	r5, r7
 8020ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020ea8:	4323      	orrs	r3, r4
 8020eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8020eae:	fa1f fe8c 	uxth.w	lr, ip
 8020eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8020eb6:	0c1c      	lsrs	r4, r3, #16
 8020eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8020ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8020ec0:	42a5      	cmp	r5, r4
 8020ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8020ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8020eca:	d90b      	bls.n	8020ee4 <__udivmoddi4+0x1b0>
 8020ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8020ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8020ed4:	f080 8088 	bcs.w	8020fe8 <__udivmoddi4+0x2b4>
 8020ed8:	42a5      	cmp	r5, r4
 8020eda:	f240 8085 	bls.w	8020fe8 <__udivmoddi4+0x2b4>
 8020ede:	f1a8 0802 	sub.w	r8, r8, #2
 8020ee2:	4464      	add	r4, ip
 8020ee4:	1b64      	subs	r4, r4, r5
 8020ee6:	b29d      	uxth	r5, r3
 8020ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8020eec:	fb09 4413 	mls	r4, r9, r3, r4
 8020ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8020ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8020ef8:	45a6      	cmp	lr, r4
 8020efa:	d908      	bls.n	8020f0e <__udivmoddi4+0x1da>
 8020efc:	eb1c 0404 	adds.w	r4, ip, r4
 8020f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8020f04:	d26c      	bcs.n	8020fe0 <__udivmoddi4+0x2ac>
 8020f06:	45a6      	cmp	lr, r4
 8020f08:	d96a      	bls.n	8020fe0 <__udivmoddi4+0x2ac>
 8020f0a:	3b02      	subs	r3, #2
 8020f0c:	4464      	add	r4, ip
 8020f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020f12:	fba3 9502 	umull	r9, r5, r3, r2
 8020f16:	eba4 040e 	sub.w	r4, r4, lr
 8020f1a:	42ac      	cmp	r4, r5
 8020f1c:	46c8      	mov	r8, r9
 8020f1e:	46ae      	mov	lr, r5
 8020f20:	d356      	bcc.n	8020fd0 <__udivmoddi4+0x29c>
 8020f22:	d053      	beq.n	8020fcc <__udivmoddi4+0x298>
 8020f24:	b156      	cbz	r6, 8020f3c <__udivmoddi4+0x208>
 8020f26:	ebb0 0208 	subs.w	r2, r0, r8
 8020f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8020f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8020f32:	40ca      	lsrs	r2, r1
 8020f34:	40cc      	lsrs	r4, r1
 8020f36:	4317      	orrs	r7, r2
 8020f38:	e9c6 7400 	strd	r7, r4, [r6]
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	2100      	movs	r1, #0
 8020f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f44:	f1c3 0120 	rsb	r1, r3, #32
 8020f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8020f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8020f50:	fa25 f101 	lsr.w	r1, r5, r1
 8020f54:	409d      	lsls	r5, r3
 8020f56:	432a      	orrs	r2, r5
 8020f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020f5c:	fa1f fe8c 	uxth.w	lr, ip
 8020f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8020f64:	fb07 1510 	mls	r5, r7, r0, r1
 8020f68:	0c11      	lsrs	r1, r2, #16
 8020f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8020f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8020f72:	428d      	cmp	r5, r1
 8020f74:	fa04 f403 	lsl.w	r4, r4, r3
 8020f78:	d908      	bls.n	8020f8c <__udivmoddi4+0x258>
 8020f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8020f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8020f82:	d22f      	bcs.n	8020fe4 <__udivmoddi4+0x2b0>
 8020f84:	428d      	cmp	r5, r1
 8020f86:	d92d      	bls.n	8020fe4 <__udivmoddi4+0x2b0>
 8020f88:	3802      	subs	r0, #2
 8020f8a:	4461      	add	r1, ip
 8020f8c:	1b49      	subs	r1, r1, r5
 8020f8e:	b292      	uxth	r2, r2
 8020f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8020f94:	fb07 1115 	mls	r1, r7, r5, r1
 8020f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8020fa0:	4291      	cmp	r1, r2
 8020fa2:	d908      	bls.n	8020fb6 <__udivmoddi4+0x282>
 8020fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8020fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8020fac:	d216      	bcs.n	8020fdc <__udivmoddi4+0x2a8>
 8020fae:	4291      	cmp	r1, r2
 8020fb0:	d914      	bls.n	8020fdc <__udivmoddi4+0x2a8>
 8020fb2:	3d02      	subs	r5, #2
 8020fb4:	4462      	add	r2, ip
 8020fb6:	1a52      	subs	r2, r2, r1
 8020fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8020fbc:	e738      	b.n	8020e30 <__udivmoddi4+0xfc>
 8020fbe:	4631      	mov	r1, r6
 8020fc0:	4630      	mov	r0, r6
 8020fc2:	e708      	b.n	8020dd6 <__udivmoddi4+0xa2>
 8020fc4:	4639      	mov	r1, r7
 8020fc6:	e6e6      	b.n	8020d96 <__udivmoddi4+0x62>
 8020fc8:	4610      	mov	r0, r2
 8020fca:	e6fb      	b.n	8020dc4 <__udivmoddi4+0x90>
 8020fcc:	4548      	cmp	r0, r9
 8020fce:	d2a9      	bcs.n	8020f24 <__udivmoddi4+0x1f0>
 8020fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8020fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8020fd8:	3b01      	subs	r3, #1
 8020fda:	e7a3      	b.n	8020f24 <__udivmoddi4+0x1f0>
 8020fdc:	4645      	mov	r5, r8
 8020fde:	e7ea      	b.n	8020fb6 <__udivmoddi4+0x282>
 8020fe0:	462b      	mov	r3, r5
 8020fe2:	e794      	b.n	8020f0e <__udivmoddi4+0x1da>
 8020fe4:	4640      	mov	r0, r8
 8020fe6:	e7d1      	b.n	8020f8c <__udivmoddi4+0x258>
 8020fe8:	46d0      	mov	r8, sl
 8020fea:	e77b      	b.n	8020ee4 <__udivmoddi4+0x1b0>
 8020fec:	3d02      	subs	r5, #2
 8020fee:	4462      	add	r2, ip
 8020ff0:	e732      	b.n	8020e58 <__udivmoddi4+0x124>
 8020ff2:	4608      	mov	r0, r1
 8020ff4:	e70a      	b.n	8020e0c <__udivmoddi4+0xd8>
 8020ff6:	4464      	add	r4, ip
 8020ff8:	3802      	subs	r0, #2
 8020ffa:	e742      	b.n	8020e82 <__udivmoddi4+0x14e>

08020ffc <__aeabi_idiv0>:
 8020ffc:	4770      	bx	lr
 8020ffe:	bf00      	nop

08021000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8021000:	b580      	push	{r7, lr}
 8021002:	b088      	sub	sp, #32
 8021004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021006:	f107 030c 	add.w	r3, r7, #12
 802100a:	2200      	movs	r2, #0
 802100c:	601a      	str	r2, [r3, #0]
 802100e:	605a      	str	r2, [r3, #4]
 8021010:	609a      	str	r2, [r3, #8]
 8021012:	60da      	str	r2, [r3, #12]
 8021014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021016:	2300      	movs	r3, #0
 8021018:	60bb      	str	r3, [r7, #8]
 802101a:	4b1f      	ldr	r3, [pc, #124]	; (8021098 <MX_GPIO_Init+0x98>)
 802101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802101e:	4a1e      	ldr	r2, [pc, #120]	; (8021098 <MX_GPIO_Init+0x98>)
 8021020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021024:	6313      	str	r3, [r2, #48]	; 0x30
 8021026:	4b1c      	ldr	r3, [pc, #112]	; (8021098 <MX_GPIO_Init+0x98>)
 8021028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802102e:	60bb      	str	r3, [r7, #8]
 8021030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021032:	2300      	movs	r3, #0
 8021034:	607b      	str	r3, [r7, #4]
 8021036:	4b18      	ldr	r3, [pc, #96]	; (8021098 <MX_GPIO_Init+0x98>)
 8021038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802103a:	4a17      	ldr	r2, [pc, #92]	; (8021098 <MX_GPIO_Init+0x98>)
 802103c:	f043 0301 	orr.w	r3, r3, #1
 8021040:	6313      	str	r3, [r2, #48]	; 0x30
 8021042:	4b15      	ldr	r3, [pc, #84]	; (8021098 <MX_GPIO_Init+0x98>)
 8021044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021046:	f003 0301 	and.w	r3, r3, #1
 802104a:	607b      	str	r3, [r7, #4]
 802104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802104e:	2300      	movs	r3, #0
 8021050:	603b      	str	r3, [r7, #0]
 8021052:	4b11      	ldr	r3, [pc, #68]	; (8021098 <MX_GPIO_Init+0x98>)
 8021054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021056:	4a10      	ldr	r2, [pc, #64]	; (8021098 <MX_GPIO_Init+0x98>)
 8021058:	f043 0302 	orr.w	r3, r3, #2
 802105c:	6313      	str	r3, [r2, #48]	; 0x30
 802105e:	4b0e      	ldr	r3, [pc, #56]	; (8021098 <MX_GPIO_Init+0x98>)
 8021060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021062:	f003 0302 	and.w	r3, r3, #2
 8021066:	603b      	str	r3, [r7, #0]
 8021068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 802106a:	2200      	movs	r2, #0
 802106c:	2102      	movs	r1, #2
 802106e:	480b      	ldr	r0, [pc, #44]	; (802109c <MX_GPIO_Init+0x9c>)
 8021070:	f001 f954 	bl	802231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8021074:	2302      	movs	r3, #2
 8021076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021078:	2301      	movs	r3, #1
 802107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802107c:	2300      	movs	r3, #0
 802107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021080:	2302      	movs	r3, #2
 8021082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8021084:	f107 030c 	add.w	r3, r7, #12
 8021088:	4619      	mov	r1, r3
 802108a:	4804      	ldr	r0, [pc, #16]	; (802109c <MX_GPIO_Init+0x9c>)
 802108c:	f000 ffc2 	bl	8022014 <HAL_GPIO_Init>

}
 8021090:	bf00      	nop
 8021092:	3720      	adds	r7, #32
 8021094:	46bd      	mov	sp, r7
 8021096:	bd80      	pop	{r7, pc}
 8021098:	40023800 	.word	0x40023800
 802109c:	40020000 	.word	0x40020000

080210a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80210a0:	b5b0      	push	{r4, r5, r7, lr}
 80210a2:	b088      	sub	sp, #32
 80210a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80210a6:	f000 fd9f 	bl	8021be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80210aa:	f000 f895 	bl	80211d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80210ae:	f7ff ffa7 	bl	8021000 <MX_GPIO_Init>
  MX_TIM3_Init();
 80210b2:	f000 fb95 	bl	80217e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80210b6:	f000 fbe7 	bl	8021888 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80210ba:	f000 fcf1 	bl	8021aa0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80210be:	f000 f9f1 	bl	80214a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* Start TIM3 in Encoder Mode */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80210c2:	213c      	movs	r1, #60	; 0x3c
 80210c4:	483b      	ldr	r0, [pc, #236]	; (80211b4 <main+0x114>)
 80210c6:	f002 f935 	bl	8023334 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80210ca:	2100      	movs	r1, #0
 80210cc:	483a      	ldr	r0, [pc, #232]	; (80211b8 <main+0x118>)
 80210ce:	f001 ffdb 	bl	8023088 <HAL_TIM_PWM_Start>
  // Initialize the buffer
  memset(rx_buffer, 0, sizeof(rx_buffer));
 80210d2:	2214      	movs	r2, #20
 80210d4:	2100      	movs	r1, #0
 80210d6:	4839      	ldr	r0, [pc, #228]	; (80211bc <main+0x11c>)
 80210d8:	f004 febf 	bl	8025e5a <memset>

  /* Send welcome message over USART1 */
//char msg[] = "STM32 Encoder and Motor Control Test\n\r";
  char msg[] = "77777777777777777\n\r";
 80210dc:	4b38      	ldr	r3, [pc, #224]	; (80211c0 <main+0x120>)
 80210de:	f107 0408 	add.w	r4, r7, #8
 80210e2:	461d      	mov	r5, r3
 80210e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80210e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80210e8:	682b      	ldr	r3, [r5, #0]
 80210ea:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80210ec:	f107 0308 	add.w	r3, r7, #8
 80210f0:	4618      	mov	r0, r3
 80210f2:	f7ff f8c5 	bl	8020280 <strlen>
 80210f6:	4603      	mov	r3, r0
 80210f8:	b29a      	uxth	r2, r3
 80210fa:	f107 0108 	add.w	r1, r7, #8
 80210fe:	f04f 33ff 	mov.w	r3, #4294967295
 8021102:	4830      	ldr	r0, [pc, #192]	; (80211c4 <main+0x124>)
 8021104:	f002 fe98 	bl	8023e38 <HAL_UART_Transmit>
  while (1)
  {
	  // Receive 8 readings
	     // if (readings_count < 8) {
	          uint8_t received_byte;
	          HAL_UART_Receive(&huart2, &received_byte, 1, HAL_MAX_DELAY); // Receive 1 byte
 8021108:	1df9      	adds	r1, r7, #7
 802110a:	f04f 33ff 	mov.w	r3, #4294967295
 802110e:	2201      	movs	r2, #1
 8021110:	482c      	ldr	r0, [pc, #176]	; (80211c4 <main+0x124>)
 8021112:	f002 ff1c 	bl	8023f4e <HAL_UART_Receive>
	          HAL_UART_Transmit(&huart2, &received_byte, 1, HAL_MAX_DELAY); // Echo received byte (for debugging)
 8021116:	1df9      	adds	r1, r7, #7
 8021118:	f04f 33ff 	mov.w	r3, #4294967295
 802111c:	2201      	movs	r2, #1
 802111e:	4829      	ldr	r0, [pc, #164]	; (80211c4 <main+0x124>)
 8021120:	f002 fe8a 	bl	8023e38 <HAL_UART_Transmit>

	          // Check for newline to indicate end of float string
	          if (received_byte == '\n') {
 8021124:	79fb      	ldrb	r3, [r7, #7]
 8021126:	2b0a      	cmp	r3, #10
 8021128:	d12d      	bne.n	8021186 <main+0xe6>
	              rx_buffer[rx_index] = '\0'; // Null-terminate the string
 802112a:	4b27      	ldr	r3, [pc, #156]	; (80211c8 <main+0x128>)
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	461a      	mov	r2, r3
 8021130:	4b22      	ldr	r3, [pc, #136]	; (80211bc <main+0x11c>)
 8021132:	2100      	movs	r1, #0
 8021134:	5499      	strb	r1, [r3, r2]

	              // Convert the string to a float
	              if (sscanf(rx_buffer, "%f", &deviation) == 1) {
 8021136:	4a25      	ldr	r2, [pc, #148]	; (80211cc <main+0x12c>)
 8021138:	4925      	ldr	r1, [pc, #148]	; (80211d0 <main+0x130>)
 802113a:	4820      	ldr	r0, [pc, #128]	; (80211bc <main+0x11c>)
 802113c:	f004 fe1c 	bl	8025d78 <siscanf>
 8021140:	4603      	mov	r3, r0
 8021142:	2b01      	cmp	r3, #1
 8021144:	d111      	bne.n	802116a <main+0xca>
	                  // Successfully parsed the float

	                  // Read the encoder position
	                  int16_t encoder_position = __HAL_TIM_GET_COUNTER(&htim3);
 8021146:	4b1b      	ldr	r3, [pc, #108]	; (80211b4 <main+0x114>)
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802114c:	83fb      	strh	r3, [r7, #30]
	                  encoder_position = - encoder_position; // Reverse the encoder reading if necessary
 802114e:	8bfb      	ldrh	r3, [r7, #30]
 8021150:	425b      	negs	r3, r3
 8021152:	b29b      	uxth	r3, r3
 8021154:	83fb      	strh	r3, [r7, #30]

	                  // Control the motor based on the deviation
	                  MotorControl(deviation, encoder_position);
 8021156:	4b1d      	ldr	r3, [pc, #116]	; (80211cc <main+0x12c>)
 8021158:	edd3 7a00 	vldr	s15, [r3]
 802115c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021160:	4618      	mov	r0, r3
 8021162:	eeb0 0a67 	vmov.f32	s0, s15
 8021166:	f000 f8a3 	bl	80212b0 <MotorControl>
	              }

	              // Reset the buffer and index for the next reception
	              memset(rx_buffer, 0, sizeof(rx_buffer));
 802116a:	2214      	movs	r2, #20
 802116c:	2100      	movs	r1, #0
 802116e:	4813      	ldr	r0, [pc, #76]	; (80211bc <main+0x11c>)
 8021170:	f004 fe73 	bl	8025e5a <memset>
	              rx_index = 0;
 8021174:	4b14      	ldr	r3, [pc, #80]	; (80211c8 <main+0x128>)
 8021176:	2200      	movs	r2, #0
 8021178:	701a      	strb	r2, [r3, #0]

	              // Increment the readings counter after processing each valid reading
	              readings_count++;
 802117a:	4b16      	ldr	r3, [pc, #88]	; (80211d4 <main+0x134>)
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	3301      	adds	r3, #1
 8021180:	4a14      	ldr	r2, [pc, #80]	; (80211d4 <main+0x134>)
 8021182:	6013      	str	r3, [r2, #0]
 8021184:	e7c0      	b.n	8021108 <main+0x68>
	          } else {
	              // Store the received character in the buffer
	              rx_buffer[rx_index++] = received_byte;
 8021186:	4b10      	ldr	r3, [pc, #64]	; (80211c8 <main+0x128>)
 8021188:	781b      	ldrb	r3, [r3, #0]
 802118a:	1c5a      	adds	r2, r3, #1
 802118c:	b2d1      	uxtb	r1, r2
 802118e:	4a0e      	ldr	r2, [pc, #56]	; (80211c8 <main+0x128>)
 8021190:	7011      	strb	r1, [r2, #0]
 8021192:	461a      	mov	r2, r3
 8021194:	79f9      	ldrb	r1, [r7, #7]
 8021196:	4b09      	ldr	r3, [pc, #36]	; (80211bc <main+0x11c>)
 8021198:	5499      	strb	r1, [r3, r2]

	              // Ensure index does not exceed buffer size
	              if (rx_index >= sizeof(rx_buffer) - 1) {
 802119a:	4b0b      	ldr	r3, [pc, #44]	; (80211c8 <main+0x128>)
 802119c:	781b      	ldrb	r3, [r3, #0]
 802119e:	2b12      	cmp	r3, #18
 80211a0:	d9b2      	bls.n	8021108 <main+0x68>
	                  // Buffer overflow protection (reset if exceeded)
	                  memset(rx_buffer, 0, sizeof(rx_buffer));
 80211a2:	2214      	movs	r2, #20
 80211a4:	2100      	movs	r1, #0
 80211a6:	4805      	ldr	r0, [pc, #20]	; (80211bc <main+0x11c>)
 80211a8:	f004 fe57 	bl	8025e5a <memset>
	                  rx_index = 0;
 80211ac:	4b06      	ldr	r3, [pc, #24]	; (80211c8 <main+0x128>)
 80211ae:	2200      	movs	r2, #0
 80211b0:	701a      	strb	r2, [r3, #0]
  {
 80211b2:	e7a9      	b.n	8021108 <main+0x68>
 80211b4:	2000023c 	.word	0x2000023c
 80211b8:	20000284 	.word	0x20000284
 80211bc:	200001f0 	.word	0x200001f0
 80211c0:	08029efc 	.word	0x08029efc
 80211c4:	200002cc 	.word	0x200002cc
 80211c8:	20000208 	.word	0x20000208
 80211cc:	20000204 	.word	0x20000204
 80211d0:	08029ef8 	.word	0x08029ef8
 80211d4:	2000020c 	.word	0x2000020c

080211d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b094      	sub	sp, #80	; 0x50
 80211dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80211de:	f107 0320 	add.w	r3, r7, #32
 80211e2:	2230      	movs	r2, #48	; 0x30
 80211e4:	2100      	movs	r1, #0
 80211e6:	4618      	mov	r0, r3
 80211e8:	f004 fe37 	bl	8025e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80211ec:	f107 030c 	add.w	r3, r7, #12
 80211f0:	2200      	movs	r2, #0
 80211f2:	601a      	str	r2, [r3, #0]
 80211f4:	605a      	str	r2, [r3, #4]
 80211f6:	609a      	str	r2, [r3, #8]
 80211f8:	60da      	str	r2, [r3, #12]
 80211fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80211fc:	2300      	movs	r3, #0
 80211fe:	60bb      	str	r3, [r7, #8]
 8021200:	4b29      	ldr	r3, [pc, #164]	; (80212a8 <SystemClock_Config+0xd0>)
 8021202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021204:	4a28      	ldr	r2, [pc, #160]	; (80212a8 <SystemClock_Config+0xd0>)
 8021206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802120a:	6413      	str	r3, [r2, #64]	; 0x40
 802120c:	4b26      	ldr	r3, [pc, #152]	; (80212a8 <SystemClock_Config+0xd0>)
 802120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021214:	60bb      	str	r3, [r7, #8]
 8021216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8021218:	2300      	movs	r3, #0
 802121a:	607b      	str	r3, [r7, #4]
 802121c:	4b23      	ldr	r3, [pc, #140]	; (80212ac <SystemClock_Config+0xd4>)
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8021224:	4a21      	ldr	r2, [pc, #132]	; (80212ac <SystemClock_Config+0xd4>)
 8021226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802122a:	6013      	str	r3, [r2, #0]
 802122c:	4b1f      	ldr	r3, [pc, #124]	; (80212ac <SystemClock_Config+0xd4>)
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8021234:	607b      	str	r3, [r7, #4]
 8021236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8021238:	230a      	movs	r3, #10
 802123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802123c:	2301      	movs	r3, #1
 802123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8021240:	2310      	movs	r3, #16
 8021242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8021244:	2301      	movs	r3, #1
 8021246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021248:	2302      	movs	r3, #2
 802124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802124c:	2300      	movs	r3, #0
 802124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8021250:	2308      	movs	r3, #8
 8021252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8021254:	2354      	movs	r3, #84	; 0x54
 8021256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021258:	2302      	movs	r3, #2
 802125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802125c:	2304      	movs	r3, #4
 802125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021260:	f107 0320 	add.w	r3, r7, #32
 8021264:	4618      	mov	r0, r3
 8021266:	f001 f873 	bl	8022350 <HAL_RCC_OscConfig>
 802126a:	4603      	mov	r3, r0
 802126c:	2b00      	cmp	r3, #0
 802126e:	d001      	beq.n	8021274 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8021270:	f000 f912 	bl	8021498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021274:	230f      	movs	r3, #15
 8021276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021278:	2302      	movs	r3, #2
 802127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802127c:	2300      	movs	r3, #0
 802127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8021280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021286:	2300      	movs	r3, #0
 8021288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802128a:	f107 030c 	add.w	r3, r7, #12
 802128e:	2102      	movs	r1, #2
 8021290:	4618      	mov	r0, r3
 8021292:	f001 fad5 	bl	8022840 <HAL_RCC_ClockConfig>
 8021296:	4603      	mov	r3, r0
 8021298:	2b00      	cmp	r3, #0
 802129a:	d001      	beq.n	80212a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 802129c:	f000 f8fc 	bl	8021498 <Error_Handler>
  }
}
 80212a0:	bf00      	nop
 80212a2:	3750      	adds	r7, #80	; 0x50
 80212a4:	46bd      	mov	sp, r7
 80212a6:	bd80      	pop	{r7, pc}
 80212a8:	40023800 	.word	0x40023800
 80212ac:	40007000 	.word	0x40007000

080212b0 <MotorControl>:
HAL_RTCEx_BKUPWrite(&hrtc, reg, data);
HAL_PWR_DisableBkUpAccess();

}

void MotorControl(float deviation, int16_t encoder_position) {
 80212b0:	b580      	push	{r7, lr}
 80212b2:	b088      	sub	sp, #32
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80212ba:	4603      	mov	r3, r0
 80212bc:	807b      	strh	r3, [r7, #2]


	  static float prev_error = 0.0f; // Previous error for derivative calculation
	  float integral = 0;
 80212be:	f04f 0300 	mov.w	r3, #0
 80212c2:	61bb      	str	r3, [r7, #24]
	  static int16_t target_position = 0; // Target encoder position (default = 0)

	    float error = deviation; // Deviation as the current error
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	617b      	str	r3, [r7, #20]
	    integral += error; // Accumulate integral
 80212c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80212cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80212d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80212d4:	edc7 7a06 	vstr	s15, [r7, #24]
	    float derivative = error - prev_error; // Derivative calculation
 80212d8:	4b65      	ldr	r3, [pc, #404]	; (8021470 <MotorControl+0x1c0>)
 80212da:	edd3 7a00 	vldr	s15, [r3]
 80212de:	ed97 7a05 	vldr	s14, [r7, #20]
 80212e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80212e6:	edc7 7a04 	vstr	s15, [r7, #16]
	    float pid_output = KP * error + KD * derivative ;//+ KI * integral;
 80212ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80212ee:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8021474 <MotorControl+0x1c4>
 80212f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80212f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80212fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80212fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021306:	edc7 7a03 	vstr	s15, [r7, #12]

	    // Update the previous error
	    prev_error = error;
 802130a:	4a59      	ldr	r2, [pc, #356]	; (8021470 <MotorControl+0x1c0>)
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	6013      	str	r3, [r2, #0]

	    // Determine target encoder position based on deviation
	    if (deviation > 0.05f) {
 8021310:	edd7 7a01 	vldr	s15, [r7, #4]
 8021314:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8021478 <MotorControl+0x1c8>
 8021318:	eef4 7ac7 	vcmpe.f32	s15, s14
 802131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021320:	dd11      	ble.n	8021346 <MotorControl+0x96>
	        target_position = (int16_t)((deviation / MAX_DEVIATION) * MAX_ENCODER_COUNT);
 8021322:	ed97 7a01 	vldr	s14, [r7, #4]
 8021326:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 802132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802132e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 802147c <MotorControl+0x1cc>
 8021332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802133a:	ee17 3a90 	vmov	r3, s15
 802133e:	b21a      	sxth	r2, r3
 8021340:	4b4f      	ldr	r3, [pc, #316]	; (8021480 <MotorControl+0x1d0>)
 8021342:	801a      	strh	r2, [r3, #0]
 8021344:	e01d      	b.n	8021382 <MotorControl+0xd2>
	    } else if (deviation < -0.05f) {
 8021346:	edd7 7a01 	vldr	s15, [r7, #4]
 802134a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8021484 <MotorControl+0x1d4>
 802134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021356:	d511      	bpl.n	802137c <MotorControl+0xcc>
	        target_position = (int16_t)((deviation / MAX_DEVIATION) * MAX_ENCODER_COUNT); // Handle negative deviation
 8021358:	ed97 7a01 	vldr	s14, [r7, #4]
 802135c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8021360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8021364:	ed9f 7a45 	vldr	s14, [pc, #276]	; 802147c <MotorControl+0x1cc>
 8021368:	ee67 7a87 	vmul.f32	s15, s15, s14
 802136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021370:	ee17 3a90 	vmov	r3, s15
 8021374:	b21a      	sxth	r2, r3
 8021376:	4b42      	ldr	r3, [pc, #264]	; (8021480 <MotorControl+0x1d0>)
 8021378:	801a      	strh	r2, [r3, #0]
 802137a:	e002      	b.n	8021382 <MotorControl+0xd2>
	    } else {
	        target_position = 0; // When deviation is zero or close to zero, return to primary position
 802137c:	4b40      	ldr	r3, [pc, #256]	; (8021480 <MotorControl+0x1d0>)
 802137e:	2200      	movs	r2, #0
 8021380:	801a      	strh	r2, [r3, #0]
	    }

	    // **Clamp the target position within ±500 PPR**
	    if (target_position > 500) target_position = 500;
 8021382:	4b3f      	ldr	r3, [pc, #252]	; (8021480 <MotorControl+0x1d0>)
 8021384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021388:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802138c:	dd03      	ble.n	8021396 <MotorControl+0xe6>
 802138e:	4b3c      	ldr	r3, [pc, #240]	; (8021480 <MotorControl+0x1d0>)
 8021390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021394:	801a      	strh	r2, [r3, #0]
	    if (target_position < -500) target_position = -500;
 8021396:	4b3a      	ldr	r3, [pc, #232]	; (8021480 <MotorControl+0x1d0>)
 8021398:	f9b3 3000 	ldrsh.w	r3, [r3]
 802139c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 80213a0:	da03      	bge.n	80213aa <MotorControl+0xfa>
 80213a2:	4b37      	ldr	r3, [pc, #220]	; (8021480 <MotorControl+0x1d0>)
 80213a4:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 80213a8:	801a      	strh	r2, [r3, #0]
	    // Calculate the error to the target position
	    int16_t position_error = target_position - encoder_position;
 80213aa:	4b35      	ldr	r3, [pc, #212]	; (8021480 <MotorControl+0x1d0>)
 80213ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80213b0:	b29a      	uxth	r2, r3
 80213b2:	887b      	ldrh	r3, [r7, #2]
 80213b4:	1ad3      	subs	r3, r2, r3
 80213b6:	b29b      	uxth	r3, r3
 80213b8:	817b      	strh	r3, [r7, #10]

	    // Compute motor speed based on position error
//	    uint32_t motor_speed = (uint32_t)((fabs(position_error) / MAX_ENCODER_COUNT) *(MAX_MOTOR_SPEED - MIN_MOTOR_SPEED) + MIN_MOTOR_SPEED);

	    uint32_t motor_speed = (uint32_t)((fabs(pid_output) / MAX_PID_OUTPUT) * (MAX_MOTOR_SPEED - MIN_MOTOR_SPEED) + MIN_MOTOR_SPEED);
 80213ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80213be:	eef0 7ae7 	vabs.f32	s15, s15
 80213c2:	ee17 0a90 	vmov	r0, s15
 80213c6:	f7ff f8c7 	bl	8020558 <__aeabi_f2d>
 80213ca:	a327      	add	r3, pc, #156	; (adr r3, 8021468 <MotorControl+0x1b8>)
 80213cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213d0:	f7ff fa44 	bl	802085c <__aeabi_ddiv>
 80213d4:	4602      	mov	r2, r0
 80213d6:	460b      	mov	r3, r1
 80213d8:	4610      	mov	r0, r2
 80213da:	4619      	mov	r1, r3
 80213dc:	f04f 0200 	mov.w	r2, #0
 80213e0:	4b29      	ldr	r3, [pc, #164]	; (8021488 <MotorControl+0x1d8>)
 80213e2:	f7ff f911 	bl	8020608 <__aeabi_dmul>
 80213e6:	4602      	mov	r2, r0
 80213e8:	460b      	mov	r3, r1
 80213ea:	4610      	mov	r0, r2
 80213ec:	4619      	mov	r1, r3
 80213ee:	f04f 0200 	mov.w	r2, #0
 80213f2:	4b26      	ldr	r3, [pc, #152]	; (802148c <MotorControl+0x1dc>)
 80213f4:	f7fe ff52 	bl	802029c <__adddf3>
 80213f8:	4602      	mov	r2, r0
 80213fa:	460b      	mov	r3, r1
 80213fc:	4610      	mov	r0, r2
 80213fe:	4619      	mov	r1, r3
 8021400:	f7ff fbda 	bl	8020bb8 <__aeabi_d2uiz>
 8021404:	4603      	mov	r3, r0
 8021406:	61fb      	str	r3, [r7, #28]

	    if (motor_speed > MAX_MOTOR_SPEED) motor_speed = MAX_MOTOR_SPEED;
 8021408:	69fb      	ldr	r3, [r7, #28]
 802140a:	2b8c      	cmp	r3, #140	; 0x8c
 802140c:	d901      	bls.n	8021412 <MotorControl+0x162>
 802140e:	238c      	movs	r3, #140	; 0x8c
 8021410:	61fb      	str	r3, [r7, #28]
	    if (motor_speed < MIN_MOTOR_SPEED) motor_speed = MIN_MOTOR_SPEED;
 8021412:	69fb      	ldr	r3, [r7, #28]
 8021414:	2b27      	cmp	r3, #39	; 0x27
 8021416:	d801      	bhi.n	802141c <MotorControl+0x16c>
 8021418:	2328      	movs	r3, #40	; 0x28
 802141a:	61fb      	str	r3, [r7, #28]

	    // Control motor direction and speed
	    if (position_error > 0) {
 802141c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8021420:	2b00      	cmp	r3, #0
 8021422:	dd09      	ble.n	8021438 <MotorControl+0x188>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // DIR = 1 (move right)
 8021424:	2200      	movs	r2, #0
 8021426:	2102      	movs	r1, #2
 8021428:	4819      	ldr	r0, [pc, #100]	; (8021490 <MotorControl+0x1e0>)
 802142a:	f000 ff77 	bl	802231c <HAL_GPIO_WritePin>
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_speed); // Set PWM
 802142e:	4b19      	ldr	r3, [pc, #100]	; (8021494 <MotorControl+0x1e4>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	69fa      	ldr	r2, [r7, #28]
 8021434:	635a      	str	r2, [r3, #52]	; 0x34
//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // DIR = 0 (left)
//        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_speed); // Set PWM
//    } else {
//        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // Stop the motor
//    }
}
 8021436:	e011      	b.n	802145c <MotorControl+0x1ac>
	    } else if (position_error < 0) {
 8021438:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802143c:	2b00      	cmp	r3, #0
 802143e:	da09      	bge.n	8021454 <MotorControl+0x1a4>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);     // DIR = 0 (move left)
 8021440:	2201      	movs	r2, #1
 8021442:	2102      	movs	r1, #2
 8021444:	4812      	ldr	r0, [pc, #72]	; (8021490 <MotorControl+0x1e0>)
 8021446:	f000 ff69 	bl	802231c <HAL_GPIO_WritePin>
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_speed); // Set PWM
 802144a:	4b12      	ldr	r3, [pc, #72]	; (8021494 <MotorControl+0x1e4>)
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	69fa      	ldr	r2, [r7, #28]
 8021450:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021452:	e003      	b.n	802145c <MotorControl+0x1ac>
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // Stop the motor when in position
 8021454:	4b0f      	ldr	r3, [pc, #60]	; (8021494 <MotorControl+0x1e4>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	2200      	movs	r2, #0
 802145a:	635a      	str	r2, [r3, #52]	; 0x34
}
 802145c:	bf00      	nop
 802145e:	3720      	adds	r7, #32
 8021460:	46bd      	mov	sp, r7
 8021462:	bd80      	pop	{r7, pc}
 8021464:	f3af 8000 	nop.w
 8021468:	00000000 	.word	0x00000000
 802146c:	406fe000 	.word	0x406fe000
 8021470:	20000210 	.word	0x20000210
 8021474:	42480000 	.word	0x42480000
 8021478:	3d4ccccd 	.word	0x3d4ccccd
 802147c:	43fa0000 	.word	0x43fa0000
 8021480:	20000214 	.word	0x20000214
 8021484:	bd4ccccd 	.word	0xbd4ccccd
 8021488:	40590000 	.word	0x40590000
 802148c:	40440000 	.word	0x40440000
 8021490:	40020000 	.word	0x40020000
 8021494:	20000284 	.word	0x20000284

08021498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021498:	b480      	push	{r7}
 802149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802149c:	b672      	cpsid	i
}
 802149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80214a0:	e7fe      	b.n	80214a0 <Error_Handler+0x8>
	...

080214a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80214a4:	b580      	push	{r7, lr}
 80214a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80214a8:	4b0f      	ldr	r3, [pc, #60]	; (80214e8 <MX_RTC_Init+0x44>)
 80214aa:	4a10      	ldr	r2, [pc, #64]	; (80214ec <MX_RTC_Init+0x48>)
 80214ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80214ae:	4b0e      	ldr	r3, [pc, #56]	; (80214e8 <MX_RTC_Init+0x44>)
 80214b0:	2200      	movs	r2, #0
 80214b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80214b4:	4b0c      	ldr	r3, [pc, #48]	; (80214e8 <MX_RTC_Init+0x44>)
 80214b6:	227f      	movs	r2, #127	; 0x7f
 80214b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80214ba:	4b0b      	ldr	r3, [pc, #44]	; (80214e8 <MX_RTC_Init+0x44>)
 80214bc:	22ff      	movs	r2, #255	; 0xff
 80214be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80214c0:	4b09      	ldr	r3, [pc, #36]	; (80214e8 <MX_RTC_Init+0x44>)
 80214c2:	2200      	movs	r2, #0
 80214c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80214c6:	4b08      	ldr	r3, [pc, #32]	; (80214e8 <MX_RTC_Init+0x44>)
 80214c8:	2200      	movs	r2, #0
 80214ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80214cc:	4b06      	ldr	r3, [pc, #24]	; (80214e8 <MX_RTC_Init+0x44>)
 80214ce:	2200      	movs	r2, #0
 80214d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80214d2:	4805      	ldr	r0, [pc, #20]	; (80214e8 <MX_RTC_Init+0x44>)
 80214d4:	f001 fc82 	bl	8022ddc <HAL_RTC_Init>
 80214d8:	4603      	mov	r3, r0
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d001      	beq.n	80214e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80214de:	f7ff ffdb 	bl	8021498 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80214e2:	bf00      	nop
 80214e4:	bd80      	pop	{r7, pc}
 80214e6:	bf00      	nop
 80214e8:	20000218 	.word	0x20000218
 80214ec:	40002800 	.word	0x40002800

080214f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80214f0:	b580      	push	{r7, lr}
 80214f2:	b088      	sub	sp, #32
 80214f4:	af00      	add	r7, sp, #0
 80214f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80214f8:	f107 030c 	add.w	r3, r7, #12
 80214fc:	2200      	movs	r2, #0
 80214fe:	601a      	str	r2, [r3, #0]
 8021500:	605a      	str	r2, [r3, #4]
 8021502:	609a      	str	r2, [r3, #8]
 8021504:	60da      	str	r2, [r3, #12]
 8021506:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	4a0c      	ldr	r2, [pc, #48]	; (8021540 <HAL_RTC_MspInit+0x50>)
 802150e:	4293      	cmp	r3, r2
 8021510:	d111      	bne.n	8021536 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8021512:	2302      	movs	r3, #2
 8021514:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8021516:	f44f 7300 	mov.w	r3, #512	; 0x200
 802151a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802151c:	f107 030c 	add.w	r3, r7, #12
 8021520:	4618      	mov	r0, r3
 8021522:	f001 fb6d 	bl	8022c00 <HAL_RCCEx_PeriphCLKConfig>
 8021526:	4603      	mov	r3, r0
 8021528:	2b00      	cmp	r3, #0
 802152a:	d001      	beq.n	8021530 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 802152c:	f7ff ffb4 	bl	8021498 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8021530:	4b04      	ldr	r3, [pc, #16]	; (8021544 <HAL_RTC_MspInit+0x54>)
 8021532:	2201      	movs	r2, #1
 8021534:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8021536:	bf00      	nop
 8021538:	3720      	adds	r7, #32
 802153a:	46bd      	mov	sp, r7
 802153c:	bd80      	pop	{r7, pc}
 802153e:	bf00      	nop
 8021540:	40002800 	.word	0x40002800
 8021544:	42470e3c 	.word	0x42470e3c

08021548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021548:	b480      	push	{r7}
 802154a:	b083      	sub	sp, #12
 802154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802154e:	2300      	movs	r3, #0
 8021550:	607b      	str	r3, [r7, #4]
 8021552:	4b10      	ldr	r3, [pc, #64]	; (8021594 <HAL_MspInit+0x4c>)
 8021554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021556:	4a0f      	ldr	r2, [pc, #60]	; (8021594 <HAL_MspInit+0x4c>)
 8021558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802155c:	6453      	str	r3, [r2, #68]	; 0x44
 802155e:	4b0d      	ldr	r3, [pc, #52]	; (8021594 <HAL_MspInit+0x4c>)
 8021560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021566:	607b      	str	r3, [r7, #4]
 8021568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802156a:	2300      	movs	r3, #0
 802156c:	603b      	str	r3, [r7, #0]
 802156e:	4b09      	ldr	r3, [pc, #36]	; (8021594 <HAL_MspInit+0x4c>)
 8021570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021572:	4a08      	ldr	r2, [pc, #32]	; (8021594 <HAL_MspInit+0x4c>)
 8021574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021578:	6413      	str	r3, [r2, #64]	; 0x40
 802157a:	4b06      	ldr	r3, [pc, #24]	; (8021594 <HAL_MspInit+0x4c>)
 802157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021582:	603b      	str	r3, [r7, #0]
 8021584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021586:	bf00      	nop
 8021588:	370c      	adds	r7, #12
 802158a:	46bd      	mov	sp, r7
 802158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021590:	4770      	bx	lr
 8021592:	bf00      	nop
 8021594:	40023800 	.word	0x40023800

08021598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021598:	b480      	push	{r7}
 802159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 802159c:	e7fe      	b.n	802159c <NMI_Handler+0x4>

0802159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802159e:	b480      	push	{r7}
 80215a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80215a2:	e7fe      	b.n	80215a2 <HardFault_Handler+0x4>

080215a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80215a4:	b480      	push	{r7}
 80215a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80215a8:	e7fe      	b.n	80215a8 <MemManage_Handler+0x4>

080215aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80215aa:	b480      	push	{r7}
 80215ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80215ae:	e7fe      	b.n	80215ae <BusFault_Handler+0x4>

080215b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80215b0:	b480      	push	{r7}
 80215b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80215b4:	e7fe      	b.n	80215b4 <UsageFault_Handler+0x4>

080215b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80215b6:	b480      	push	{r7}
 80215b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80215ba:	bf00      	nop
 80215bc:	46bd      	mov	sp, r7
 80215be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215c2:	4770      	bx	lr

080215c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80215c4:	b480      	push	{r7}
 80215c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80215c8:	bf00      	nop
 80215ca:	46bd      	mov	sp, r7
 80215cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215d0:	4770      	bx	lr

080215d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80215d2:	b480      	push	{r7}
 80215d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80215d6:	bf00      	nop
 80215d8:	46bd      	mov	sp, r7
 80215da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215de:	4770      	bx	lr

080215e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80215e4:	f000 fb52 	bl	8021c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80215e8:	bf00      	nop
 80215ea:	bd80      	pop	{r7, pc}

080215ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80215ec:	b580      	push	{r7, lr}
 80215ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80215f0:	4802      	ldr	r0, [pc, #8]	; (80215fc <TIM3_IRQHandler+0x10>)
 80215f2:	f001 ff2d 	bl	8023450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80215f6:	bf00      	nop
 80215f8:	bd80      	pop	{r7, pc}
 80215fa:	bf00      	nop
 80215fc:	2000023c 	.word	0x2000023c

08021600 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8021600:	b580      	push	{r7, lr}
 8021602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8021604:	4802      	ldr	r0, [pc, #8]	; (8021610 <TIM4_IRQHandler+0x10>)
 8021606:	f001 ff23 	bl	8023450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802160a:	bf00      	nop
 802160c:	bd80      	pop	{r7, pc}
 802160e:	bf00      	nop
 8021610:	20000284 	.word	0x20000284

08021614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8021614:	b580      	push	{r7, lr}
 8021616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8021618:	4802      	ldr	r0, [pc, #8]	; (8021624 <USART2_IRQHandler+0x10>)
 802161a:	f002 fd2f 	bl	802407c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 802161e:	bf00      	nop
 8021620:	bd80      	pop	{r7, pc}
 8021622:	bf00      	nop
 8021624:	200002cc 	.word	0x200002cc

08021628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8021628:	b480      	push	{r7}
 802162a:	af00      	add	r7, sp, #0
  return 1;
 802162c:	2301      	movs	r3, #1
}
 802162e:	4618      	mov	r0, r3
 8021630:	46bd      	mov	sp, r7
 8021632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021636:	4770      	bx	lr

08021638 <_kill>:

int _kill(int pid, int sig)
{
 8021638:	b580      	push	{r7, lr}
 802163a:	b082      	sub	sp, #8
 802163c:	af00      	add	r7, sp, #0
 802163e:	6078      	str	r0, [r7, #4]
 8021640:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8021642:	f004 fc5d 	bl	8025f00 <__errno>
 8021646:	4603      	mov	r3, r0
 8021648:	2216      	movs	r2, #22
 802164a:	601a      	str	r2, [r3, #0]
  return -1;
 802164c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021650:	4618      	mov	r0, r3
 8021652:	3708      	adds	r7, #8
 8021654:	46bd      	mov	sp, r7
 8021656:	bd80      	pop	{r7, pc}

08021658 <_exit>:

void _exit (int status)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b082      	sub	sp, #8
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8021660:	f04f 31ff 	mov.w	r1, #4294967295
 8021664:	6878      	ldr	r0, [r7, #4]
 8021666:	f7ff ffe7 	bl	8021638 <_kill>
  while (1) {}    /* Make sure we hang here */
 802166a:	e7fe      	b.n	802166a <_exit+0x12>

0802166c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b086      	sub	sp, #24
 8021670:	af00      	add	r7, sp, #0
 8021672:	60f8      	str	r0, [r7, #12]
 8021674:	60b9      	str	r1, [r7, #8]
 8021676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021678:	2300      	movs	r3, #0
 802167a:	617b      	str	r3, [r7, #20]
 802167c:	e00a      	b.n	8021694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802167e:	f3af 8000 	nop.w
 8021682:	4601      	mov	r1, r0
 8021684:	68bb      	ldr	r3, [r7, #8]
 8021686:	1c5a      	adds	r2, r3, #1
 8021688:	60ba      	str	r2, [r7, #8]
 802168a:	b2ca      	uxtb	r2, r1
 802168c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802168e:	697b      	ldr	r3, [r7, #20]
 8021690:	3301      	adds	r3, #1
 8021692:	617b      	str	r3, [r7, #20]
 8021694:	697a      	ldr	r2, [r7, #20]
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	429a      	cmp	r2, r3
 802169a:	dbf0      	blt.n	802167e <_read+0x12>
  }

  return len;
 802169c:	687b      	ldr	r3, [r7, #4]
}
 802169e:	4618      	mov	r0, r3
 80216a0:	3718      	adds	r7, #24
 80216a2:	46bd      	mov	sp, r7
 80216a4:	bd80      	pop	{r7, pc}

080216a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80216a6:	b580      	push	{r7, lr}
 80216a8:	b086      	sub	sp, #24
 80216aa:	af00      	add	r7, sp, #0
 80216ac:	60f8      	str	r0, [r7, #12]
 80216ae:	60b9      	str	r1, [r7, #8]
 80216b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216b2:	2300      	movs	r3, #0
 80216b4:	617b      	str	r3, [r7, #20]
 80216b6:	e009      	b.n	80216cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80216b8:	68bb      	ldr	r3, [r7, #8]
 80216ba:	1c5a      	adds	r2, r3, #1
 80216bc:	60ba      	str	r2, [r7, #8]
 80216be:	781b      	ldrb	r3, [r3, #0]
 80216c0:	4618      	mov	r0, r3
 80216c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216c6:	697b      	ldr	r3, [r7, #20]
 80216c8:	3301      	adds	r3, #1
 80216ca:	617b      	str	r3, [r7, #20]
 80216cc:	697a      	ldr	r2, [r7, #20]
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	429a      	cmp	r2, r3
 80216d2:	dbf1      	blt.n	80216b8 <_write+0x12>
  }
  return len;
 80216d4:	687b      	ldr	r3, [r7, #4]
}
 80216d6:	4618      	mov	r0, r3
 80216d8:	3718      	adds	r7, #24
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}

080216de <_close>:

int _close(int file)
{
 80216de:	b480      	push	{r7}
 80216e0:	b083      	sub	sp, #12
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80216e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	370c      	adds	r7, #12
 80216ee:	46bd      	mov	sp, r7
 80216f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f4:	4770      	bx	lr

080216f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80216f6:	b480      	push	{r7}
 80216f8:	b083      	sub	sp, #12
 80216fa:	af00      	add	r7, sp, #0
 80216fc:	6078      	str	r0, [r7, #4]
 80216fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021700:	683b      	ldr	r3, [r7, #0]
 8021702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021706:	605a      	str	r2, [r3, #4]
  return 0;
 8021708:	2300      	movs	r3, #0
}
 802170a:	4618      	mov	r0, r3
 802170c:	370c      	adds	r7, #12
 802170e:	46bd      	mov	sp, r7
 8021710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021714:	4770      	bx	lr

08021716 <_isatty>:

int _isatty(int file)
{
 8021716:	b480      	push	{r7}
 8021718:	b083      	sub	sp, #12
 802171a:	af00      	add	r7, sp, #0
 802171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802171e:	2301      	movs	r3, #1
}
 8021720:	4618      	mov	r0, r3
 8021722:	370c      	adds	r7, #12
 8021724:	46bd      	mov	sp, r7
 8021726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172a:	4770      	bx	lr

0802172c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802172c:	b480      	push	{r7}
 802172e:	b085      	sub	sp, #20
 8021730:	af00      	add	r7, sp, #0
 8021732:	60f8      	str	r0, [r7, #12]
 8021734:	60b9      	str	r1, [r7, #8]
 8021736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8021738:	2300      	movs	r3, #0
}
 802173a:	4618      	mov	r0, r3
 802173c:	3714      	adds	r7, #20
 802173e:	46bd      	mov	sp, r7
 8021740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021744:	4770      	bx	lr
	...

08021748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021748:	b580      	push	{r7, lr}
 802174a:	b086      	sub	sp, #24
 802174c:	af00      	add	r7, sp, #0
 802174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021750:	4a14      	ldr	r2, [pc, #80]	; (80217a4 <_sbrk+0x5c>)
 8021752:	4b15      	ldr	r3, [pc, #84]	; (80217a8 <_sbrk+0x60>)
 8021754:	1ad3      	subs	r3, r2, r3
 8021756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021758:	697b      	ldr	r3, [r7, #20]
 802175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802175c:	4b13      	ldr	r3, [pc, #76]	; (80217ac <_sbrk+0x64>)
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d102      	bne.n	802176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021764:	4b11      	ldr	r3, [pc, #68]	; (80217ac <_sbrk+0x64>)
 8021766:	4a12      	ldr	r2, [pc, #72]	; (80217b0 <_sbrk+0x68>)
 8021768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802176a:	4b10      	ldr	r3, [pc, #64]	; (80217ac <_sbrk+0x64>)
 802176c:	681a      	ldr	r2, [r3, #0]
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	4413      	add	r3, r2
 8021772:	693a      	ldr	r2, [r7, #16]
 8021774:	429a      	cmp	r2, r3
 8021776:	d207      	bcs.n	8021788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021778:	f004 fbc2 	bl	8025f00 <__errno>
 802177c:	4603      	mov	r3, r0
 802177e:	220c      	movs	r2, #12
 8021780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021782:	f04f 33ff 	mov.w	r3, #4294967295
 8021786:	e009      	b.n	802179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021788:	4b08      	ldr	r3, [pc, #32]	; (80217ac <_sbrk+0x64>)
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802178e:	4b07      	ldr	r3, [pc, #28]	; (80217ac <_sbrk+0x64>)
 8021790:	681a      	ldr	r2, [r3, #0]
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	4413      	add	r3, r2
 8021796:	4a05      	ldr	r2, [pc, #20]	; (80217ac <_sbrk+0x64>)
 8021798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802179a:	68fb      	ldr	r3, [r7, #12]
}
 802179c:	4618      	mov	r0, r3
 802179e:	3718      	adds	r7, #24
 80217a0:	46bd      	mov	sp, r7
 80217a2:	bd80      	pop	{r7, pc}
 80217a4:	20018000 	.word	0x20018000
 80217a8:	00000400 	.word	0x00000400
 80217ac:	20000238 	.word	0x20000238
 80217b0:	20000468 	.word	0x20000468

080217b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80217b4:	b480      	push	{r7}
 80217b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80217b8:	4b07      	ldr	r3, [pc, #28]	; (80217d8 <SystemInit+0x24>)
 80217ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80217be:	4a06      	ldr	r2, [pc, #24]	; (80217d8 <SystemInit+0x24>)
 80217c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80217c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = 0x08020000;  // Set Vector Table to Sector 5
 80217c8:	4b03      	ldr	r3, [pc, #12]	; (80217d8 <SystemInit+0x24>)
 80217ca:	4a04      	ldr	r2, [pc, #16]	; (80217dc <SystemInit+0x28>)
 80217cc:	609a      	str	r2, [r3, #8]

//  /* Configure the Vector Table location -------------------------------------*/
//#if defined(USER_VECT_TAB_ADDRESS)
//  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
//#endif /* USER_VECT_TAB_ADDRESS */
}
 80217ce:	bf00      	nop
 80217d0:	46bd      	mov	sp, r7
 80217d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d6:	4770      	bx	lr
 80217d8:	e000ed00 	.word	0xe000ed00
 80217dc:	08020000 	.word	0x08020000

080217e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80217e0:	b580      	push	{r7, lr}
 80217e2:	b08c      	sub	sp, #48	; 0x30
 80217e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80217e6:	f107 030c 	add.w	r3, r7, #12
 80217ea:	2224      	movs	r2, #36	; 0x24
 80217ec:	2100      	movs	r1, #0
 80217ee:	4618      	mov	r0, r3
 80217f0:	f004 fb33 	bl	8025e5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80217f4:	1d3b      	adds	r3, r7, #4
 80217f6:	2200      	movs	r2, #0
 80217f8:	601a      	str	r2, [r3, #0]
 80217fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80217fc:	4b20      	ldr	r3, [pc, #128]	; (8021880 <MX_TIM3_Init+0xa0>)
 80217fe:	4a21      	ldr	r2, [pc, #132]	; (8021884 <MX_TIM3_Init+0xa4>)
 8021800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8021802:	4b1f      	ldr	r3, [pc, #124]	; (8021880 <MX_TIM3_Init+0xa0>)
 8021804:	2200      	movs	r2, #0
 8021806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021808:	4b1d      	ldr	r3, [pc, #116]	; (8021880 <MX_TIM3_Init+0xa0>)
 802180a:	2200      	movs	r2, #0
 802180c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 802180e:	4b1c      	ldr	r3, [pc, #112]	; (8021880 <MX_TIM3_Init+0xa0>)
 8021810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021816:	4b1a      	ldr	r3, [pc, #104]	; (8021880 <MX_TIM3_Init+0xa0>)
 8021818:	2200      	movs	r2, #0
 802181a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802181c:	4b18      	ldr	r3, [pc, #96]	; (8021880 <MX_TIM3_Init+0xa0>)
 802181e:	2200      	movs	r2, #0
 8021820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8021822:	2301      	movs	r3, #1
 8021824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8021826:	2300      	movs	r3, #0
 8021828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802182a:	2301      	movs	r3, #1
 802182c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802182e:	2300      	movs	r3, #0
 8021830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8021832:	2300      	movs	r3, #0
 8021834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8021836:	2300      	movs	r3, #0
 8021838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802183a:	2301      	movs	r3, #1
 802183c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802183e:	2300      	movs	r3, #0
 8021840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021842:	2300      	movs	r3, #0
 8021844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8021846:	f107 030c 	add.w	r3, r7, #12
 802184a:	4619      	mov	r1, r3
 802184c:	480c      	ldr	r0, [pc, #48]	; (8021880 <MX_TIM3_Init+0xa0>)
 802184e:	f001 fccb 	bl	80231e8 <HAL_TIM_Encoder_Init>
 8021852:	4603      	mov	r3, r0
 8021854:	2b00      	cmp	r3, #0
 8021856:	d001      	beq.n	802185c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8021858:	f7ff fe1e 	bl	8021498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802185c:	2300      	movs	r3, #0
 802185e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021860:	2300      	movs	r3, #0
 8021862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8021864:	1d3b      	adds	r3, r7, #4
 8021866:	4619      	mov	r1, r3
 8021868:	4805      	ldr	r0, [pc, #20]	; (8021880 <MX_TIM3_Init+0xa0>)
 802186a:	f002 fa13 	bl	8023c94 <HAL_TIMEx_MasterConfigSynchronization>
 802186e:	4603      	mov	r3, r0
 8021870:	2b00      	cmp	r3, #0
 8021872:	d001      	beq.n	8021878 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8021874:	f7ff fe10 	bl	8021498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8021878:	bf00      	nop
 802187a:	3730      	adds	r7, #48	; 0x30
 802187c:	46bd      	mov	sp, r7
 802187e:	bd80      	pop	{r7, pc}
 8021880:	2000023c 	.word	0x2000023c
 8021884:	40000400 	.word	0x40000400

08021888 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8021888:	b580      	push	{r7, lr}
 802188a:	b08a      	sub	sp, #40	; 0x28
 802188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802188e:	f107 0320 	add.w	r3, r7, #32
 8021892:	2200      	movs	r2, #0
 8021894:	601a      	str	r2, [r3, #0]
 8021896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021898:	1d3b      	adds	r3, r7, #4
 802189a:	2200      	movs	r2, #0
 802189c:	601a      	str	r2, [r3, #0]
 802189e:	605a      	str	r2, [r3, #4]
 80218a0:	609a      	str	r2, [r3, #8]
 80218a2:	60da      	str	r2, [r3, #12]
 80218a4:	611a      	str	r2, [r3, #16]
 80218a6:	615a      	str	r2, [r3, #20]
 80218a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80218aa:	4b22      	ldr	r3, [pc, #136]	; (8021934 <MX_TIM4_Init+0xac>)
 80218ac:	4a22      	ldr	r2, [pc, #136]	; (8021938 <MX_TIM4_Init+0xb0>)
 80218ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80218b0:	4b20      	ldr	r3, [pc, #128]	; (8021934 <MX_TIM4_Init+0xac>)
 80218b2:	2253      	movs	r2, #83	; 0x53
 80218b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80218b6:	4b1f      	ldr	r3, [pc, #124]	; (8021934 <MX_TIM4_Init+0xac>)
 80218b8:	2200      	movs	r2, #0
 80218ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80218bc:	4b1d      	ldr	r3, [pc, #116]	; (8021934 <MX_TIM4_Init+0xac>)
 80218be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80218c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80218c4:	4b1b      	ldr	r3, [pc, #108]	; (8021934 <MX_TIM4_Init+0xac>)
 80218c6:	2200      	movs	r2, #0
 80218c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80218ca:	4b1a      	ldr	r3, [pc, #104]	; (8021934 <MX_TIM4_Init+0xac>)
 80218cc:	2280      	movs	r2, #128	; 0x80
 80218ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80218d0:	4818      	ldr	r0, [pc, #96]	; (8021934 <MX_TIM4_Init+0xac>)
 80218d2:	f001 fb89 	bl	8022fe8 <HAL_TIM_PWM_Init>
 80218d6:	4603      	mov	r3, r0
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d001      	beq.n	80218e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80218dc:	f7ff fddc 	bl	8021498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80218e0:	2300      	movs	r3, #0
 80218e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80218e4:	2300      	movs	r3, #0
 80218e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80218e8:	f107 0320 	add.w	r3, r7, #32
 80218ec:	4619      	mov	r1, r3
 80218ee:	4811      	ldr	r0, [pc, #68]	; (8021934 <MX_TIM4_Init+0xac>)
 80218f0:	f002 f9d0 	bl	8023c94 <HAL_TIMEx_MasterConfigSynchronization>
 80218f4:	4603      	mov	r3, r0
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d001      	beq.n	80218fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80218fa:	f7ff fdcd 	bl	8021498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80218fe:	2360      	movs	r3, #96	; 0x60
 8021900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021902:	2300      	movs	r3, #0
 8021904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021906:	2300      	movs	r3, #0
 8021908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802190a:	2300      	movs	r3, #0
 802190c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802190e:	1d3b      	adds	r3, r7, #4
 8021910:	2200      	movs	r2, #0
 8021912:	4619      	mov	r1, r3
 8021914:	4807      	ldr	r0, [pc, #28]	; (8021934 <MX_TIM4_Init+0xac>)
 8021916:	f001 fe8b 	bl	8023630 <HAL_TIM_PWM_ConfigChannel>
 802191a:	4603      	mov	r3, r0
 802191c:	2b00      	cmp	r3, #0
 802191e:	d001      	beq.n	8021924 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8021920:	f7ff fdba 	bl	8021498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8021924:	4803      	ldr	r0, [pc, #12]	; (8021934 <MX_TIM4_Init+0xac>)
 8021926:	f000 f881 	bl	8021a2c <HAL_TIM_MspPostInit>

}
 802192a:	bf00      	nop
 802192c:	3728      	adds	r7, #40	; 0x28
 802192e:	46bd      	mov	sp, r7
 8021930:	bd80      	pop	{r7, pc}
 8021932:	bf00      	nop
 8021934:	20000284 	.word	0x20000284
 8021938:	40000800 	.word	0x40000800

0802193c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 802193c:	b580      	push	{r7, lr}
 802193e:	b08a      	sub	sp, #40	; 0x28
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021944:	f107 0314 	add.w	r3, r7, #20
 8021948:	2200      	movs	r2, #0
 802194a:	601a      	str	r2, [r3, #0]
 802194c:	605a      	str	r2, [r3, #4]
 802194e:	609a      	str	r2, [r3, #8]
 8021950:	60da      	str	r2, [r3, #12]
 8021952:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	681b      	ldr	r3, [r3, #0]
 8021958:	4a1d      	ldr	r2, [pc, #116]	; (80219d0 <HAL_TIM_Encoder_MspInit+0x94>)
 802195a:	4293      	cmp	r3, r2
 802195c:	d133      	bne.n	80219c6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 802195e:	2300      	movs	r3, #0
 8021960:	613b      	str	r3, [r7, #16]
 8021962:	4b1c      	ldr	r3, [pc, #112]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8021964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021966:	4a1b      	ldr	r2, [pc, #108]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8021968:	f043 0302 	orr.w	r3, r3, #2
 802196c:	6413      	str	r3, [r2, #64]	; 0x40
 802196e:	4b19      	ldr	r3, [pc, #100]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8021970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021972:	f003 0302 	and.w	r3, r3, #2
 8021976:	613b      	str	r3, [r7, #16]
 8021978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802197a:	2300      	movs	r3, #0
 802197c:	60fb      	str	r3, [r7, #12]
 802197e:	4b15      	ldr	r3, [pc, #84]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8021980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021982:	4a14      	ldr	r2, [pc, #80]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8021984:	f043 0301 	orr.w	r3, r3, #1
 8021988:	6313      	str	r3, [r2, #48]	; 0x30
 802198a:	4b12      	ldr	r3, [pc, #72]	; (80219d4 <HAL_TIM_Encoder_MspInit+0x98>)
 802198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198e:	f003 0301 	and.w	r3, r3, #1
 8021992:	60fb      	str	r3, [r7, #12]
 8021994:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021996:	23c0      	movs	r3, #192	; 0xc0
 8021998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802199a:	2302      	movs	r3, #2
 802199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802199e:	2300      	movs	r3, #0
 80219a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219a2:	2300      	movs	r3, #0
 80219a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80219a6:	2302      	movs	r3, #2
 80219a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80219aa:	f107 0314 	add.w	r3, r7, #20
 80219ae:	4619      	mov	r1, r3
 80219b0:	4809      	ldr	r0, [pc, #36]	; (80219d8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80219b2:	f000 fb2f 	bl	8022014 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80219b6:	2200      	movs	r2, #0
 80219b8:	2100      	movs	r1, #0
 80219ba:	201d      	movs	r0, #29
 80219bc:	f000 fa61 	bl	8021e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80219c0:	201d      	movs	r0, #29
 80219c2:	f000 fa7a 	bl	8021eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80219c6:	bf00      	nop
 80219c8:	3728      	adds	r7, #40	; 0x28
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd80      	pop	{r7, pc}
 80219ce:	bf00      	nop
 80219d0:	40000400 	.word	0x40000400
 80219d4:	40023800 	.word	0x40023800
 80219d8:	40020000 	.word	0x40020000

080219dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80219dc:	b580      	push	{r7, lr}
 80219de:	b084      	sub	sp, #16
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	4a0e      	ldr	r2, [pc, #56]	; (8021a24 <HAL_TIM_PWM_MspInit+0x48>)
 80219ea:	4293      	cmp	r3, r2
 80219ec:	d115      	bne.n	8021a1a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80219ee:	2300      	movs	r3, #0
 80219f0:	60fb      	str	r3, [r7, #12]
 80219f2:	4b0d      	ldr	r3, [pc, #52]	; (8021a28 <HAL_TIM_PWM_MspInit+0x4c>)
 80219f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219f6:	4a0c      	ldr	r2, [pc, #48]	; (8021a28 <HAL_TIM_PWM_MspInit+0x4c>)
 80219f8:	f043 0304 	orr.w	r3, r3, #4
 80219fc:	6413      	str	r3, [r2, #64]	; 0x40
 80219fe:	4b0a      	ldr	r3, [pc, #40]	; (8021a28 <HAL_TIM_PWM_MspInit+0x4c>)
 8021a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a02:	f003 0304 	and.w	r3, r3, #4
 8021a06:	60fb      	str	r3, [r7, #12]
 8021a08:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	2100      	movs	r1, #0
 8021a0e:	201e      	movs	r0, #30
 8021a10:	f000 fa37 	bl	8021e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8021a14:	201e      	movs	r0, #30
 8021a16:	f000 fa50 	bl	8021eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8021a1a:	bf00      	nop
 8021a1c:	3710      	adds	r7, #16
 8021a1e:	46bd      	mov	sp, r7
 8021a20:	bd80      	pop	{r7, pc}
 8021a22:	bf00      	nop
 8021a24:	40000800 	.word	0x40000800
 8021a28:	40023800 	.word	0x40023800

08021a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8021a2c:	b580      	push	{r7, lr}
 8021a2e:	b088      	sub	sp, #32
 8021a30:	af00      	add	r7, sp, #0
 8021a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021a34:	f107 030c 	add.w	r3, r7, #12
 8021a38:	2200      	movs	r2, #0
 8021a3a:	601a      	str	r2, [r3, #0]
 8021a3c:	605a      	str	r2, [r3, #4]
 8021a3e:	609a      	str	r2, [r3, #8]
 8021a40:	60da      	str	r2, [r3, #12]
 8021a42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	4a12      	ldr	r2, [pc, #72]	; (8021a94 <HAL_TIM_MspPostInit+0x68>)
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	d11d      	bne.n	8021a8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021a4e:	2300      	movs	r3, #0
 8021a50:	60bb      	str	r3, [r7, #8]
 8021a52:	4b11      	ldr	r3, [pc, #68]	; (8021a98 <HAL_TIM_MspPostInit+0x6c>)
 8021a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a56:	4a10      	ldr	r2, [pc, #64]	; (8021a98 <HAL_TIM_MspPostInit+0x6c>)
 8021a58:	f043 0302 	orr.w	r3, r3, #2
 8021a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8021a5e:	4b0e      	ldr	r3, [pc, #56]	; (8021a98 <HAL_TIM_MspPostInit+0x6c>)
 8021a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a62:	f003 0302 	and.w	r3, r3, #2
 8021a66:	60bb      	str	r3, [r7, #8]
 8021a68:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8021a6a:	2340      	movs	r3, #64	; 0x40
 8021a6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a6e:	2302      	movs	r3, #2
 8021a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a72:	2300      	movs	r3, #0
 8021a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a76:	2300      	movs	r3, #0
 8021a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8021a7a:	2302      	movs	r3, #2
 8021a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a7e:	f107 030c 	add.w	r3, r7, #12
 8021a82:	4619      	mov	r1, r3
 8021a84:	4805      	ldr	r0, [pc, #20]	; (8021a9c <HAL_TIM_MspPostInit+0x70>)
 8021a86:	f000 fac5 	bl	8022014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8021a8a:	bf00      	nop
 8021a8c:	3720      	adds	r7, #32
 8021a8e:	46bd      	mov	sp, r7
 8021a90:	bd80      	pop	{r7, pc}
 8021a92:	bf00      	nop
 8021a94:	40000800 	.word	0x40000800
 8021a98:	40023800 	.word	0x40023800
 8021a9c:	40020400 	.word	0x40020400

08021aa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8021aa0:	b580      	push	{r7, lr}
 8021aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8021aa4:	4b11      	ldr	r3, [pc, #68]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021aa6:	4a12      	ldr	r2, [pc, #72]	; (8021af0 <MX_USART2_UART_Init+0x50>)
 8021aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8021aaa:	4b10      	ldr	r3, [pc, #64]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8021ab2:	4b0e      	ldr	r3, [pc, #56]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021ab4:	2200      	movs	r2, #0
 8021ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8021ab8:	4b0c      	ldr	r3, [pc, #48]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021aba:	2200      	movs	r2, #0
 8021abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8021abe:	4b0b      	ldr	r3, [pc, #44]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021ac0:	2200      	movs	r2, #0
 8021ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8021ac4:	4b09      	ldr	r3, [pc, #36]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021ac6:	220c      	movs	r2, #12
 8021ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021aca:	4b08      	ldr	r3, [pc, #32]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021acc:	2200      	movs	r2, #0
 8021ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8021ad0:	4b06      	ldr	r3, [pc, #24]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021ad2:	2200      	movs	r2, #0
 8021ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8021ad6:	4805      	ldr	r0, [pc, #20]	; (8021aec <MX_USART2_UART_Init+0x4c>)
 8021ad8:	f002 f95e 	bl	8023d98 <HAL_UART_Init>
 8021adc:	4603      	mov	r3, r0
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d001      	beq.n	8021ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8021ae2:	f7ff fcd9 	bl	8021498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8021ae6:	bf00      	nop
 8021ae8:	bd80      	pop	{r7, pc}
 8021aea:	bf00      	nop
 8021aec:	200002cc 	.word	0x200002cc
 8021af0:	40004400 	.word	0x40004400

08021af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b08a      	sub	sp, #40	; 0x28
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021afc:	f107 0314 	add.w	r3, r7, #20
 8021b00:	2200      	movs	r2, #0
 8021b02:	601a      	str	r2, [r3, #0]
 8021b04:	605a      	str	r2, [r3, #4]
 8021b06:	609a      	str	r2, [r3, #8]
 8021b08:	60da      	str	r2, [r3, #12]
 8021b0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	681b      	ldr	r3, [r3, #0]
 8021b10:	4a1d      	ldr	r2, [pc, #116]	; (8021b88 <HAL_UART_MspInit+0x94>)
 8021b12:	4293      	cmp	r3, r2
 8021b14:	d133      	bne.n	8021b7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8021b16:	2300      	movs	r3, #0
 8021b18:	613b      	str	r3, [r7, #16]
 8021b1a:	4b1c      	ldr	r3, [pc, #112]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b1e:	4a1b      	ldr	r2, [pc, #108]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021b24:	6413      	str	r3, [r2, #64]	; 0x40
 8021b26:	4b19      	ldr	r3, [pc, #100]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021b2e:	613b      	str	r3, [r7, #16]
 8021b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021b32:	2300      	movs	r3, #0
 8021b34:	60fb      	str	r3, [r7, #12]
 8021b36:	4b15      	ldr	r3, [pc, #84]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b3a:	4a14      	ldr	r2, [pc, #80]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b3c:	f043 0301 	orr.w	r3, r3, #1
 8021b40:	6313      	str	r3, [r2, #48]	; 0x30
 8021b42:	4b12      	ldr	r3, [pc, #72]	; (8021b8c <HAL_UART_MspInit+0x98>)
 8021b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b46:	f003 0301 	and.w	r3, r3, #1
 8021b4a:	60fb      	str	r3, [r7, #12]
 8021b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8021b4e:	230c      	movs	r3, #12
 8021b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b52:	2302      	movs	r3, #2
 8021b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b56:	2300      	movs	r3, #0
 8021b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b5a:	2303      	movs	r3, #3
 8021b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8021b5e:	2307      	movs	r3, #7
 8021b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021b62:	f107 0314 	add.w	r3, r7, #20
 8021b66:	4619      	mov	r1, r3
 8021b68:	4809      	ldr	r0, [pc, #36]	; (8021b90 <HAL_UART_MspInit+0x9c>)
 8021b6a:	f000 fa53 	bl	8022014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8021b6e:	2200      	movs	r2, #0
 8021b70:	2100      	movs	r1, #0
 8021b72:	2026      	movs	r0, #38	; 0x26
 8021b74:	f000 f985 	bl	8021e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8021b78:	2026      	movs	r0, #38	; 0x26
 8021b7a:	f000 f99e 	bl	8021eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8021b7e:	bf00      	nop
 8021b80:	3728      	adds	r7, #40	; 0x28
 8021b82:	46bd      	mov	sp, r7
 8021b84:	bd80      	pop	{r7, pc}
 8021b86:	bf00      	nop
 8021b88:	40004400 	.word	0x40004400
 8021b8c:	40023800 	.word	0x40023800
 8021b90:	40020000 	.word	0x40020000

08021b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8021b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8021b98:	f7ff fe0c 	bl	80217b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021b9c:	480c      	ldr	r0, [pc, #48]	; (8021bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8021b9e:	490d      	ldr	r1, [pc, #52]	; (8021bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8021ba0:	4a0d      	ldr	r2, [pc, #52]	; (8021bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8021ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021ba4:	e002      	b.n	8021bac <LoopCopyDataInit>

08021ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021baa:	3304      	adds	r3, #4

08021bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021bb0:	d3f9      	bcc.n	8021ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021bb2:	4a0a      	ldr	r2, [pc, #40]	; (8021bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8021bb4:	4c0a      	ldr	r4, [pc, #40]	; (8021be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8021bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021bb8:	e001      	b.n	8021bbe <LoopFillZerobss>

08021bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021bbc:	3204      	adds	r2, #4

08021bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021bc0:	d3fb      	bcc.n	8021bba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8021bc2:	f004 f9a3 	bl	8025f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021bc6:	f7ff fa6b 	bl	80210a0 <main>
  bx  lr    
 8021bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8021bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8021bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021bd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8021bd8:	0802a3ac 	.word	0x0802a3ac
  ldr r2, =_sbss
 8021bdc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8021be0:	20000464 	.word	0x20000464

08021be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021be4:	e7fe      	b.n	8021be4 <ADC_IRQHandler>
	...

08021be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021be8:	b580      	push	{r7, lr}
 8021bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021bec:	4b0e      	ldr	r3, [pc, #56]	; (8021c28 <HAL_Init+0x40>)
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	4a0d      	ldr	r2, [pc, #52]	; (8021c28 <HAL_Init+0x40>)
 8021bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021bf8:	4b0b      	ldr	r3, [pc, #44]	; (8021c28 <HAL_Init+0x40>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	4a0a      	ldr	r2, [pc, #40]	; (8021c28 <HAL_Init+0x40>)
 8021bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021c04:	4b08      	ldr	r3, [pc, #32]	; (8021c28 <HAL_Init+0x40>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	4a07      	ldr	r2, [pc, #28]	; (8021c28 <HAL_Init+0x40>)
 8021c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021c10:	2003      	movs	r0, #3
 8021c12:	f000 f92b 	bl	8021e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021c16:	200f      	movs	r0, #15
 8021c18:	f000 f808 	bl	8021c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021c1c:	f7ff fc94 	bl	8021548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021c20:	2300      	movs	r3, #0
}
 8021c22:	4618      	mov	r0, r3
 8021c24:	bd80      	pop	{r7, pc}
 8021c26:	bf00      	nop
 8021c28:	40023c00 	.word	0x40023c00

08021c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021c2c:	b580      	push	{r7, lr}
 8021c2e:	b082      	sub	sp, #8
 8021c30:	af00      	add	r7, sp, #0
 8021c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8021c34:	4b12      	ldr	r3, [pc, #72]	; (8021c80 <HAL_InitTick+0x54>)
 8021c36:	681a      	ldr	r2, [r3, #0]
 8021c38:	4b12      	ldr	r3, [pc, #72]	; (8021c84 <HAL_InitTick+0x58>)
 8021c3a:	781b      	ldrb	r3, [r3, #0]
 8021c3c:	4619      	mov	r1, r3
 8021c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8021c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	f000 f943 	bl	8021ed6 <HAL_SYSTICK_Config>
 8021c50:	4603      	mov	r3, r0
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d001      	beq.n	8021c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8021c56:	2301      	movs	r3, #1
 8021c58:	e00e      	b.n	8021c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	2b0f      	cmp	r3, #15
 8021c5e:	d80a      	bhi.n	8021c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021c60:	2200      	movs	r2, #0
 8021c62:	6879      	ldr	r1, [r7, #4]
 8021c64:	f04f 30ff 	mov.w	r0, #4294967295
 8021c68:	f000 f90b 	bl	8021e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021c6c:	4a06      	ldr	r2, [pc, #24]	; (8021c88 <HAL_InitTick+0x5c>)
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021c72:	2300      	movs	r3, #0
 8021c74:	e000      	b.n	8021c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8021c76:	2301      	movs	r3, #1
}
 8021c78:	4618      	mov	r0, r3
 8021c7a:	3708      	adds	r7, #8
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}
 8021c80:	20000000 	.word	0x20000000
 8021c84:	20000008 	.word	0x20000008
 8021c88:	20000004 	.word	0x20000004

08021c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021c8c:	b480      	push	{r7}
 8021c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021c90:	4b06      	ldr	r3, [pc, #24]	; (8021cac <HAL_IncTick+0x20>)
 8021c92:	781b      	ldrb	r3, [r3, #0]
 8021c94:	461a      	mov	r2, r3
 8021c96:	4b06      	ldr	r3, [pc, #24]	; (8021cb0 <HAL_IncTick+0x24>)
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	4413      	add	r3, r2
 8021c9c:	4a04      	ldr	r2, [pc, #16]	; (8021cb0 <HAL_IncTick+0x24>)
 8021c9e:	6013      	str	r3, [r2, #0]
}
 8021ca0:	bf00      	nop
 8021ca2:	46bd      	mov	sp, r7
 8021ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca8:	4770      	bx	lr
 8021caa:	bf00      	nop
 8021cac:	20000008 	.word	0x20000008
 8021cb0:	20000314 	.word	0x20000314

08021cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021cb4:	b480      	push	{r7}
 8021cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8021cb8:	4b03      	ldr	r3, [pc, #12]	; (8021cc8 <HAL_GetTick+0x14>)
 8021cba:	681b      	ldr	r3, [r3, #0]
}
 8021cbc:	4618      	mov	r0, r3
 8021cbe:	46bd      	mov	sp, r7
 8021cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cc4:	4770      	bx	lr
 8021cc6:	bf00      	nop
 8021cc8:	20000314 	.word	0x20000314

08021ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021ccc:	b480      	push	{r7}
 8021cce:	b085      	sub	sp, #20
 8021cd0:	af00      	add	r7, sp, #0
 8021cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	f003 0307 	and.w	r3, r3, #7
 8021cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021cdc:	4b0c      	ldr	r3, [pc, #48]	; (8021d10 <__NVIC_SetPriorityGrouping+0x44>)
 8021cde:	68db      	ldr	r3, [r3, #12]
 8021ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021ce2:	68ba      	ldr	r2, [r7, #8]
 8021ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021ce8:	4013      	ands	r3, r2
 8021cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021cec:	68fb      	ldr	r3, [r7, #12]
 8021cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021cf0:	68bb      	ldr	r3, [r7, #8]
 8021cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8021cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021cfe:	4a04      	ldr	r2, [pc, #16]	; (8021d10 <__NVIC_SetPriorityGrouping+0x44>)
 8021d00:	68bb      	ldr	r3, [r7, #8]
 8021d02:	60d3      	str	r3, [r2, #12]
}
 8021d04:	bf00      	nop
 8021d06:	3714      	adds	r7, #20
 8021d08:	46bd      	mov	sp, r7
 8021d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0e:	4770      	bx	lr
 8021d10:	e000ed00 	.word	0xe000ed00

08021d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021d14:	b480      	push	{r7}
 8021d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021d18:	4b04      	ldr	r3, [pc, #16]	; (8021d2c <__NVIC_GetPriorityGrouping+0x18>)
 8021d1a:	68db      	ldr	r3, [r3, #12]
 8021d1c:	0a1b      	lsrs	r3, r3, #8
 8021d1e:	f003 0307 	and.w	r3, r3, #7
}
 8021d22:	4618      	mov	r0, r3
 8021d24:	46bd      	mov	sp, r7
 8021d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d2a:	4770      	bx	lr
 8021d2c:	e000ed00 	.word	0xe000ed00

08021d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021d30:	b480      	push	{r7}
 8021d32:	b083      	sub	sp, #12
 8021d34:	af00      	add	r7, sp, #0
 8021d36:	4603      	mov	r3, r0
 8021d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	db0b      	blt.n	8021d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021d42:	79fb      	ldrb	r3, [r7, #7]
 8021d44:	f003 021f 	and.w	r2, r3, #31
 8021d48:	4907      	ldr	r1, [pc, #28]	; (8021d68 <__NVIC_EnableIRQ+0x38>)
 8021d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d4e:	095b      	lsrs	r3, r3, #5
 8021d50:	2001      	movs	r0, #1
 8021d52:	fa00 f202 	lsl.w	r2, r0, r2
 8021d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8021d5a:	bf00      	nop
 8021d5c:	370c      	adds	r7, #12
 8021d5e:	46bd      	mov	sp, r7
 8021d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d64:	4770      	bx	lr
 8021d66:	bf00      	nop
 8021d68:	e000e100 	.word	0xe000e100

08021d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021d6c:	b480      	push	{r7}
 8021d6e:	b083      	sub	sp, #12
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	4603      	mov	r3, r0
 8021d74:	6039      	str	r1, [r7, #0]
 8021d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	db0a      	blt.n	8021d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021d80:	683b      	ldr	r3, [r7, #0]
 8021d82:	b2da      	uxtb	r2, r3
 8021d84:	490c      	ldr	r1, [pc, #48]	; (8021db8 <__NVIC_SetPriority+0x4c>)
 8021d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d8a:	0112      	lsls	r2, r2, #4
 8021d8c:	b2d2      	uxtb	r2, r2
 8021d8e:	440b      	add	r3, r1
 8021d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021d94:	e00a      	b.n	8021dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021d96:	683b      	ldr	r3, [r7, #0]
 8021d98:	b2da      	uxtb	r2, r3
 8021d9a:	4908      	ldr	r1, [pc, #32]	; (8021dbc <__NVIC_SetPriority+0x50>)
 8021d9c:	79fb      	ldrb	r3, [r7, #7]
 8021d9e:	f003 030f 	and.w	r3, r3, #15
 8021da2:	3b04      	subs	r3, #4
 8021da4:	0112      	lsls	r2, r2, #4
 8021da6:	b2d2      	uxtb	r2, r2
 8021da8:	440b      	add	r3, r1
 8021daa:	761a      	strb	r2, [r3, #24]
}
 8021dac:	bf00      	nop
 8021dae:	370c      	adds	r7, #12
 8021db0:	46bd      	mov	sp, r7
 8021db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021db6:	4770      	bx	lr
 8021db8:	e000e100 	.word	0xe000e100
 8021dbc:	e000ed00 	.word	0xe000ed00

08021dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021dc0:	b480      	push	{r7}
 8021dc2:	b089      	sub	sp, #36	; 0x24
 8021dc4:	af00      	add	r7, sp, #0
 8021dc6:	60f8      	str	r0, [r7, #12]
 8021dc8:	60b9      	str	r1, [r7, #8]
 8021dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	f003 0307 	and.w	r3, r3, #7
 8021dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021dd4:	69fb      	ldr	r3, [r7, #28]
 8021dd6:	f1c3 0307 	rsb	r3, r3, #7
 8021dda:	2b04      	cmp	r3, #4
 8021ddc:	bf28      	it	cs
 8021dde:	2304      	movcs	r3, #4
 8021de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021de2:	69fb      	ldr	r3, [r7, #28]
 8021de4:	3304      	adds	r3, #4
 8021de6:	2b06      	cmp	r3, #6
 8021de8:	d902      	bls.n	8021df0 <NVIC_EncodePriority+0x30>
 8021dea:	69fb      	ldr	r3, [r7, #28]
 8021dec:	3b03      	subs	r3, #3
 8021dee:	e000      	b.n	8021df2 <NVIC_EncodePriority+0x32>
 8021df0:	2300      	movs	r3, #0
 8021df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021df4:	f04f 32ff 	mov.w	r2, #4294967295
 8021df8:	69bb      	ldr	r3, [r7, #24]
 8021dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8021dfe:	43da      	mvns	r2, r3
 8021e00:	68bb      	ldr	r3, [r7, #8]
 8021e02:	401a      	ands	r2, r3
 8021e04:	697b      	ldr	r3, [r7, #20]
 8021e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021e08:	f04f 31ff 	mov.w	r1, #4294967295
 8021e0c:	697b      	ldr	r3, [r7, #20]
 8021e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8021e12:	43d9      	mvns	r1, r3
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021e18:	4313      	orrs	r3, r2
         );
}
 8021e1a:	4618      	mov	r0, r3
 8021e1c:	3724      	adds	r7, #36	; 0x24
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e24:	4770      	bx	lr
	...

08021e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021e28:	b580      	push	{r7, lr}
 8021e2a:	b082      	sub	sp, #8
 8021e2c:	af00      	add	r7, sp, #0
 8021e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	3b01      	subs	r3, #1
 8021e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021e38:	d301      	bcc.n	8021e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021e3a:	2301      	movs	r3, #1
 8021e3c:	e00f      	b.n	8021e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021e3e:	4a0a      	ldr	r2, [pc, #40]	; (8021e68 <SysTick_Config+0x40>)
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	3b01      	subs	r3, #1
 8021e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021e46:	210f      	movs	r1, #15
 8021e48:	f04f 30ff 	mov.w	r0, #4294967295
 8021e4c:	f7ff ff8e 	bl	8021d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021e50:	4b05      	ldr	r3, [pc, #20]	; (8021e68 <SysTick_Config+0x40>)
 8021e52:	2200      	movs	r2, #0
 8021e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021e56:	4b04      	ldr	r3, [pc, #16]	; (8021e68 <SysTick_Config+0x40>)
 8021e58:	2207      	movs	r2, #7
 8021e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021e5c:	2300      	movs	r3, #0
}
 8021e5e:	4618      	mov	r0, r3
 8021e60:	3708      	adds	r7, #8
 8021e62:	46bd      	mov	sp, r7
 8021e64:	bd80      	pop	{r7, pc}
 8021e66:	bf00      	nop
 8021e68:	e000e010 	.word	0xe000e010

08021e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b082      	sub	sp, #8
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021e74:	6878      	ldr	r0, [r7, #4]
 8021e76:	f7ff ff29 	bl	8021ccc <__NVIC_SetPriorityGrouping>
}
 8021e7a:	bf00      	nop
 8021e7c:	3708      	adds	r7, #8
 8021e7e:	46bd      	mov	sp, r7
 8021e80:	bd80      	pop	{r7, pc}

08021e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021e82:	b580      	push	{r7, lr}
 8021e84:	b086      	sub	sp, #24
 8021e86:	af00      	add	r7, sp, #0
 8021e88:	4603      	mov	r3, r0
 8021e8a:	60b9      	str	r1, [r7, #8]
 8021e8c:	607a      	str	r2, [r7, #4]
 8021e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021e90:	2300      	movs	r3, #0
 8021e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021e94:	f7ff ff3e 	bl	8021d14 <__NVIC_GetPriorityGrouping>
 8021e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021e9a:	687a      	ldr	r2, [r7, #4]
 8021e9c:	68b9      	ldr	r1, [r7, #8]
 8021e9e:	6978      	ldr	r0, [r7, #20]
 8021ea0:	f7ff ff8e 	bl	8021dc0 <NVIC_EncodePriority>
 8021ea4:	4602      	mov	r2, r0
 8021ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021eaa:	4611      	mov	r1, r2
 8021eac:	4618      	mov	r0, r3
 8021eae:	f7ff ff5d 	bl	8021d6c <__NVIC_SetPriority>
}
 8021eb2:	bf00      	nop
 8021eb4:	3718      	adds	r7, #24
 8021eb6:	46bd      	mov	sp, r7
 8021eb8:	bd80      	pop	{r7, pc}

08021eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021eba:	b580      	push	{r7, lr}
 8021ebc:	b082      	sub	sp, #8
 8021ebe:	af00      	add	r7, sp, #0
 8021ec0:	4603      	mov	r3, r0
 8021ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8021ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021ec8:	4618      	mov	r0, r3
 8021eca:	f7ff ff31 	bl	8021d30 <__NVIC_EnableIRQ>
}
 8021ece:	bf00      	nop
 8021ed0:	3708      	adds	r7, #8
 8021ed2:	46bd      	mov	sp, r7
 8021ed4:	bd80      	pop	{r7, pc}

08021ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8021ed6:	b580      	push	{r7, lr}
 8021ed8:	b082      	sub	sp, #8
 8021eda:	af00      	add	r7, sp, #0
 8021edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021ede:	6878      	ldr	r0, [r7, #4]
 8021ee0:	f7ff ffa2 	bl	8021e28 <SysTick_Config>
 8021ee4:	4603      	mov	r3, r0
}
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	3708      	adds	r7, #8
 8021eea:	46bd      	mov	sp, r7
 8021eec:	bd80      	pop	{r7, pc}

08021eee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8021eee:	b580      	push	{r7, lr}
 8021ef0:	b084      	sub	sp, #16
 8021ef2:	af00      	add	r7, sp, #0
 8021ef4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021efa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8021efc:	f7ff feda 	bl	8021cb4 <HAL_GetTick>
 8021f00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8021f08:	b2db      	uxtb	r3, r3
 8021f0a:	2b02      	cmp	r3, #2
 8021f0c:	d008      	beq.n	8021f20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	2280      	movs	r2, #128	; 0x80
 8021f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	2200      	movs	r2, #0
 8021f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8021f1c:	2301      	movs	r3, #1
 8021f1e:	e052      	b.n	8021fc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021f20:	687b      	ldr	r3, [r7, #4]
 8021f22:	681b      	ldr	r3, [r3, #0]
 8021f24:	681a      	ldr	r2, [r3, #0]
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	f022 0216 	bic.w	r2, r2, #22
 8021f2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	681b      	ldr	r3, [r3, #0]
 8021f34:	695a      	ldr	r2, [r3, #20]
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	681b      	ldr	r3, [r3, #0]
 8021f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021f3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d103      	bne.n	8021f50 <HAL_DMA_Abort+0x62>
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d007      	beq.n	8021f60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	681a      	ldr	r2, [r3, #0]
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	f022 0208 	bic.w	r2, r2, #8
 8021f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	681a      	ldr	r2, [r3, #0]
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	681b      	ldr	r3, [r3, #0]
 8021f6a:	f022 0201 	bic.w	r2, r2, #1
 8021f6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021f70:	e013      	b.n	8021f9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8021f72:	f7ff fe9f 	bl	8021cb4 <HAL_GetTick>
 8021f76:	4602      	mov	r2, r0
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	1ad3      	subs	r3, r2, r3
 8021f7c:	2b05      	cmp	r3, #5
 8021f7e:	d90c      	bls.n	8021f9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	2220      	movs	r2, #32
 8021f84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	2203      	movs	r2, #3
 8021f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	2200      	movs	r2, #0
 8021f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8021f96:	2303      	movs	r3, #3
 8021f98:	e015      	b.n	8021fc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	f003 0301 	and.w	r3, r3, #1
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d1e4      	bne.n	8021f72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021fac:	223f      	movs	r2, #63	; 0x3f
 8021fae:	409a      	lsls	r2, r3
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	2201      	movs	r2, #1
 8021fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	2200      	movs	r2, #0
 8021fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8021fc4:	2300      	movs	r3, #0
}
 8021fc6:	4618      	mov	r0, r3
 8021fc8:	3710      	adds	r7, #16
 8021fca:	46bd      	mov	sp, r7
 8021fcc:	bd80      	pop	{r7, pc}

08021fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021fce:	b480      	push	{r7}
 8021fd0:	b083      	sub	sp, #12
 8021fd2:	af00      	add	r7, sp, #0
 8021fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8021fdc:	b2db      	uxtb	r3, r3
 8021fde:	2b02      	cmp	r3, #2
 8021fe0:	d004      	beq.n	8021fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	2280      	movs	r2, #128	; 0x80
 8021fe6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8021fe8:	2301      	movs	r3, #1
 8021fea:	e00c      	b.n	8022006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	2205      	movs	r2, #5
 8021ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	681a      	ldr	r2, [r3, #0]
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	681b      	ldr	r3, [r3, #0]
 8021ffe:	f022 0201 	bic.w	r2, r2, #1
 8022002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022004:	2300      	movs	r3, #0
}
 8022006:	4618      	mov	r0, r3
 8022008:	370c      	adds	r7, #12
 802200a:	46bd      	mov	sp, r7
 802200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022010:	4770      	bx	lr
	...

08022014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022014:	b480      	push	{r7}
 8022016:	b089      	sub	sp, #36	; 0x24
 8022018:	af00      	add	r7, sp, #0
 802201a:	6078      	str	r0, [r7, #4]
 802201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802201e:	2300      	movs	r3, #0
 8022020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8022022:	2300      	movs	r3, #0
 8022024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8022026:	2300      	movs	r3, #0
 8022028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802202a:	2300      	movs	r3, #0
 802202c:	61fb      	str	r3, [r7, #28]
 802202e:	e159      	b.n	80222e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8022030:	2201      	movs	r2, #1
 8022032:	69fb      	ldr	r3, [r7, #28]
 8022034:	fa02 f303 	lsl.w	r3, r2, r3
 8022038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802203a:	683b      	ldr	r3, [r7, #0]
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	697a      	ldr	r2, [r7, #20]
 8022040:	4013      	ands	r3, r2
 8022042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8022044:	693a      	ldr	r2, [r7, #16]
 8022046:	697b      	ldr	r3, [r7, #20]
 8022048:	429a      	cmp	r2, r3
 802204a:	f040 8148 	bne.w	80222de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802204e:	683b      	ldr	r3, [r7, #0]
 8022050:	685b      	ldr	r3, [r3, #4]
 8022052:	f003 0303 	and.w	r3, r3, #3
 8022056:	2b01      	cmp	r3, #1
 8022058:	d005      	beq.n	8022066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802205a:	683b      	ldr	r3, [r7, #0]
 802205c:	685b      	ldr	r3, [r3, #4]
 802205e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022062:	2b02      	cmp	r3, #2
 8022064:	d130      	bne.n	80220c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	689b      	ldr	r3, [r3, #8]
 802206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802206c:	69fb      	ldr	r3, [r7, #28]
 802206e:	005b      	lsls	r3, r3, #1
 8022070:	2203      	movs	r2, #3
 8022072:	fa02 f303 	lsl.w	r3, r2, r3
 8022076:	43db      	mvns	r3, r3
 8022078:	69ba      	ldr	r2, [r7, #24]
 802207a:	4013      	ands	r3, r2
 802207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802207e:	683b      	ldr	r3, [r7, #0]
 8022080:	68da      	ldr	r2, [r3, #12]
 8022082:	69fb      	ldr	r3, [r7, #28]
 8022084:	005b      	lsls	r3, r3, #1
 8022086:	fa02 f303 	lsl.w	r3, r2, r3
 802208a:	69ba      	ldr	r2, [r7, #24]
 802208c:	4313      	orrs	r3, r2
 802208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	69ba      	ldr	r2, [r7, #24]
 8022094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	685b      	ldr	r3, [r3, #4]
 802209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802209c:	2201      	movs	r2, #1
 802209e:	69fb      	ldr	r3, [r7, #28]
 80220a0:	fa02 f303 	lsl.w	r3, r2, r3
 80220a4:	43db      	mvns	r3, r3
 80220a6:	69ba      	ldr	r2, [r7, #24]
 80220a8:	4013      	ands	r3, r2
 80220aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80220ac:	683b      	ldr	r3, [r7, #0]
 80220ae:	685b      	ldr	r3, [r3, #4]
 80220b0:	091b      	lsrs	r3, r3, #4
 80220b2:	f003 0201 	and.w	r2, r3, #1
 80220b6:	69fb      	ldr	r3, [r7, #28]
 80220b8:	fa02 f303 	lsl.w	r3, r2, r3
 80220bc:	69ba      	ldr	r2, [r7, #24]
 80220be:	4313      	orrs	r3, r2
 80220c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	69ba      	ldr	r2, [r7, #24]
 80220c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80220c8:	683b      	ldr	r3, [r7, #0]
 80220ca:	685b      	ldr	r3, [r3, #4]
 80220cc:	f003 0303 	and.w	r3, r3, #3
 80220d0:	2b03      	cmp	r3, #3
 80220d2:	d017      	beq.n	8022104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	68db      	ldr	r3, [r3, #12]
 80220d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80220da:	69fb      	ldr	r3, [r7, #28]
 80220dc:	005b      	lsls	r3, r3, #1
 80220de:	2203      	movs	r2, #3
 80220e0:	fa02 f303 	lsl.w	r3, r2, r3
 80220e4:	43db      	mvns	r3, r3
 80220e6:	69ba      	ldr	r2, [r7, #24]
 80220e8:	4013      	ands	r3, r2
 80220ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80220ec:	683b      	ldr	r3, [r7, #0]
 80220ee:	689a      	ldr	r2, [r3, #8]
 80220f0:	69fb      	ldr	r3, [r7, #28]
 80220f2:	005b      	lsls	r3, r3, #1
 80220f4:	fa02 f303 	lsl.w	r3, r2, r3
 80220f8:	69ba      	ldr	r2, [r7, #24]
 80220fa:	4313      	orrs	r3, r2
 80220fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	69ba      	ldr	r2, [r7, #24]
 8022102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022104:	683b      	ldr	r3, [r7, #0]
 8022106:	685b      	ldr	r3, [r3, #4]
 8022108:	f003 0303 	and.w	r3, r3, #3
 802210c:	2b02      	cmp	r3, #2
 802210e:	d123      	bne.n	8022158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8022110:	69fb      	ldr	r3, [r7, #28]
 8022112:	08da      	lsrs	r2, r3, #3
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	3208      	adds	r2, #8
 8022118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802211e:	69fb      	ldr	r3, [r7, #28]
 8022120:	f003 0307 	and.w	r3, r3, #7
 8022124:	009b      	lsls	r3, r3, #2
 8022126:	220f      	movs	r2, #15
 8022128:	fa02 f303 	lsl.w	r3, r2, r3
 802212c:	43db      	mvns	r3, r3
 802212e:	69ba      	ldr	r2, [r7, #24]
 8022130:	4013      	ands	r3, r2
 8022132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8022134:	683b      	ldr	r3, [r7, #0]
 8022136:	691a      	ldr	r2, [r3, #16]
 8022138:	69fb      	ldr	r3, [r7, #28]
 802213a:	f003 0307 	and.w	r3, r3, #7
 802213e:	009b      	lsls	r3, r3, #2
 8022140:	fa02 f303 	lsl.w	r3, r2, r3
 8022144:	69ba      	ldr	r2, [r7, #24]
 8022146:	4313      	orrs	r3, r2
 8022148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802214a:	69fb      	ldr	r3, [r7, #28]
 802214c:	08da      	lsrs	r2, r3, #3
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	3208      	adds	r2, #8
 8022152:	69b9      	ldr	r1, [r7, #24]
 8022154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802215e:	69fb      	ldr	r3, [r7, #28]
 8022160:	005b      	lsls	r3, r3, #1
 8022162:	2203      	movs	r2, #3
 8022164:	fa02 f303 	lsl.w	r3, r2, r3
 8022168:	43db      	mvns	r3, r3
 802216a:	69ba      	ldr	r2, [r7, #24]
 802216c:	4013      	ands	r3, r2
 802216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8022170:	683b      	ldr	r3, [r7, #0]
 8022172:	685b      	ldr	r3, [r3, #4]
 8022174:	f003 0203 	and.w	r2, r3, #3
 8022178:	69fb      	ldr	r3, [r7, #28]
 802217a:	005b      	lsls	r3, r3, #1
 802217c:	fa02 f303 	lsl.w	r3, r2, r3
 8022180:	69ba      	ldr	r2, [r7, #24]
 8022182:	4313      	orrs	r3, r2
 8022184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	69ba      	ldr	r2, [r7, #24]
 802218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802218c:	683b      	ldr	r3, [r7, #0]
 802218e:	685b      	ldr	r3, [r3, #4]
 8022190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8022194:	2b00      	cmp	r3, #0
 8022196:	f000 80a2 	beq.w	80222de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802219a:	2300      	movs	r3, #0
 802219c:	60fb      	str	r3, [r7, #12]
 802219e:	4b57      	ldr	r3, [pc, #348]	; (80222fc <HAL_GPIO_Init+0x2e8>)
 80221a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221a2:	4a56      	ldr	r2, [pc, #344]	; (80222fc <HAL_GPIO_Init+0x2e8>)
 80221a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80221a8:	6453      	str	r3, [r2, #68]	; 0x44
 80221aa:	4b54      	ldr	r3, [pc, #336]	; (80222fc <HAL_GPIO_Init+0x2e8>)
 80221ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80221b2:	60fb      	str	r3, [r7, #12]
 80221b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80221b6:	4a52      	ldr	r2, [pc, #328]	; (8022300 <HAL_GPIO_Init+0x2ec>)
 80221b8:	69fb      	ldr	r3, [r7, #28]
 80221ba:	089b      	lsrs	r3, r3, #2
 80221bc:	3302      	adds	r3, #2
 80221be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80221c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80221c4:	69fb      	ldr	r3, [r7, #28]
 80221c6:	f003 0303 	and.w	r3, r3, #3
 80221ca:	009b      	lsls	r3, r3, #2
 80221cc:	220f      	movs	r2, #15
 80221ce:	fa02 f303 	lsl.w	r3, r2, r3
 80221d2:	43db      	mvns	r3, r3
 80221d4:	69ba      	ldr	r2, [r7, #24]
 80221d6:	4013      	ands	r3, r2
 80221d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	4a49      	ldr	r2, [pc, #292]	; (8022304 <HAL_GPIO_Init+0x2f0>)
 80221de:	4293      	cmp	r3, r2
 80221e0:	d019      	beq.n	8022216 <HAL_GPIO_Init+0x202>
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	4a48      	ldr	r2, [pc, #288]	; (8022308 <HAL_GPIO_Init+0x2f4>)
 80221e6:	4293      	cmp	r3, r2
 80221e8:	d013      	beq.n	8022212 <HAL_GPIO_Init+0x1fe>
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	4a47      	ldr	r2, [pc, #284]	; (802230c <HAL_GPIO_Init+0x2f8>)
 80221ee:	4293      	cmp	r3, r2
 80221f0:	d00d      	beq.n	802220e <HAL_GPIO_Init+0x1fa>
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	4a46      	ldr	r2, [pc, #280]	; (8022310 <HAL_GPIO_Init+0x2fc>)
 80221f6:	4293      	cmp	r3, r2
 80221f8:	d007      	beq.n	802220a <HAL_GPIO_Init+0x1f6>
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	4a45      	ldr	r2, [pc, #276]	; (8022314 <HAL_GPIO_Init+0x300>)
 80221fe:	4293      	cmp	r3, r2
 8022200:	d101      	bne.n	8022206 <HAL_GPIO_Init+0x1f2>
 8022202:	2304      	movs	r3, #4
 8022204:	e008      	b.n	8022218 <HAL_GPIO_Init+0x204>
 8022206:	2307      	movs	r3, #7
 8022208:	e006      	b.n	8022218 <HAL_GPIO_Init+0x204>
 802220a:	2303      	movs	r3, #3
 802220c:	e004      	b.n	8022218 <HAL_GPIO_Init+0x204>
 802220e:	2302      	movs	r3, #2
 8022210:	e002      	b.n	8022218 <HAL_GPIO_Init+0x204>
 8022212:	2301      	movs	r3, #1
 8022214:	e000      	b.n	8022218 <HAL_GPIO_Init+0x204>
 8022216:	2300      	movs	r3, #0
 8022218:	69fa      	ldr	r2, [r7, #28]
 802221a:	f002 0203 	and.w	r2, r2, #3
 802221e:	0092      	lsls	r2, r2, #2
 8022220:	4093      	lsls	r3, r2
 8022222:	69ba      	ldr	r2, [r7, #24]
 8022224:	4313      	orrs	r3, r2
 8022226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8022228:	4935      	ldr	r1, [pc, #212]	; (8022300 <HAL_GPIO_Init+0x2ec>)
 802222a:	69fb      	ldr	r3, [r7, #28]
 802222c:	089b      	lsrs	r3, r3, #2
 802222e:	3302      	adds	r3, #2
 8022230:	69ba      	ldr	r2, [r7, #24]
 8022232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8022236:	4b38      	ldr	r3, [pc, #224]	; (8022318 <HAL_GPIO_Init+0x304>)
 8022238:	689b      	ldr	r3, [r3, #8]
 802223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802223c:	693b      	ldr	r3, [r7, #16]
 802223e:	43db      	mvns	r3, r3
 8022240:	69ba      	ldr	r2, [r7, #24]
 8022242:	4013      	ands	r3, r2
 8022244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8022246:	683b      	ldr	r3, [r7, #0]
 8022248:	685b      	ldr	r3, [r3, #4]
 802224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802224e:	2b00      	cmp	r3, #0
 8022250:	d003      	beq.n	802225a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8022252:	69ba      	ldr	r2, [r7, #24]
 8022254:	693b      	ldr	r3, [r7, #16]
 8022256:	4313      	orrs	r3, r2
 8022258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802225a:	4a2f      	ldr	r2, [pc, #188]	; (8022318 <HAL_GPIO_Init+0x304>)
 802225c:	69bb      	ldr	r3, [r7, #24]
 802225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8022260:	4b2d      	ldr	r3, [pc, #180]	; (8022318 <HAL_GPIO_Init+0x304>)
 8022262:	68db      	ldr	r3, [r3, #12]
 8022264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022266:	693b      	ldr	r3, [r7, #16]
 8022268:	43db      	mvns	r3, r3
 802226a:	69ba      	ldr	r2, [r7, #24]
 802226c:	4013      	ands	r3, r2
 802226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8022270:	683b      	ldr	r3, [r7, #0]
 8022272:	685b      	ldr	r3, [r3, #4]
 8022274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022278:	2b00      	cmp	r3, #0
 802227a:	d003      	beq.n	8022284 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 802227c:	69ba      	ldr	r2, [r7, #24]
 802227e:	693b      	ldr	r3, [r7, #16]
 8022280:	4313      	orrs	r3, r2
 8022282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8022284:	4a24      	ldr	r2, [pc, #144]	; (8022318 <HAL_GPIO_Init+0x304>)
 8022286:	69bb      	ldr	r3, [r7, #24]
 8022288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802228a:	4b23      	ldr	r3, [pc, #140]	; (8022318 <HAL_GPIO_Init+0x304>)
 802228c:	685b      	ldr	r3, [r3, #4]
 802228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022290:	693b      	ldr	r3, [r7, #16]
 8022292:	43db      	mvns	r3, r3
 8022294:	69ba      	ldr	r2, [r7, #24]
 8022296:	4013      	ands	r3, r2
 8022298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802229a:	683b      	ldr	r3, [r7, #0]
 802229c:	685b      	ldr	r3, [r3, #4]
 802229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d003      	beq.n	80222ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80222a6:	69ba      	ldr	r2, [r7, #24]
 80222a8:	693b      	ldr	r3, [r7, #16]
 80222aa:	4313      	orrs	r3, r2
 80222ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80222ae:	4a1a      	ldr	r2, [pc, #104]	; (8022318 <HAL_GPIO_Init+0x304>)
 80222b0:	69bb      	ldr	r3, [r7, #24]
 80222b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80222b4:	4b18      	ldr	r3, [pc, #96]	; (8022318 <HAL_GPIO_Init+0x304>)
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80222ba:	693b      	ldr	r3, [r7, #16]
 80222bc:	43db      	mvns	r3, r3
 80222be:	69ba      	ldr	r2, [r7, #24]
 80222c0:	4013      	ands	r3, r2
 80222c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80222c4:	683b      	ldr	r3, [r7, #0]
 80222c6:	685b      	ldr	r3, [r3, #4]
 80222c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d003      	beq.n	80222d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80222d0:	69ba      	ldr	r2, [r7, #24]
 80222d2:	693b      	ldr	r3, [r7, #16]
 80222d4:	4313      	orrs	r3, r2
 80222d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80222d8:	4a0f      	ldr	r2, [pc, #60]	; (8022318 <HAL_GPIO_Init+0x304>)
 80222da:	69bb      	ldr	r3, [r7, #24]
 80222dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80222de:	69fb      	ldr	r3, [r7, #28]
 80222e0:	3301      	adds	r3, #1
 80222e2:	61fb      	str	r3, [r7, #28]
 80222e4:	69fb      	ldr	r3, [r7, #28]
 80222e6:	2b0f      	cmp	r3, #15
 80222e8:	f67f aea2 	bls.w	8022030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80222ec:	bf00      	nop
 80222ee:	bf00      	nop
 80222f0:	3724      	adds	r7, #36	; 0x24
 80222f2:	46bd      	mov	sp, r7
 80222f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222f8:	4770      	bx	lr
 80222fa:	bf00      	nop
 80222fc:	40023800 	.word	0x40023800
 8022300:	40013800 	.word	0x40013800
 8022304:	40020000 	.word	0x40020000
 8022308:	40020400 	.word	0x40020400
 802230c:	40020800 	.word	0x40020800
 8022310:	40020c00 	.word	0x40020c00
 8022314:	40021000 	.word	0x40021000
 8022318:	40013c00 	.word	0x40013c00

0802231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802231c:	b480      	push	{r7}
 802231e:	b083      	sub	sp, #12
 8022320:	af00      	add	r7, sp, #0
 8022322:	6078      	str	r0, [r7, #4]
 8022324:	460b      	mov	r3, r1
 8022326:	807b      	strh	r3, [r7, #2]
 8022328:	4613      	mov	r3, r2
 802232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802232c:	787b      	ldrb	r3, [r7, #1]
 802232e:	2b00      	cmp	r3, #0
 8022330:	d003      	beq.n	802233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022332:	887a      	ldrh	r2, [r7, #2]
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8022338:	e003      	b.n	8022342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802233a:	887b      	ldrh	r3, [r7, #2]
 802233c:	041a      	lsls	r2, r3, #16
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	619a      	str	r2, [r3, #24]
}
 8022342:	bf00      	nop
 8022344:	370c      	adds	r7, #12
 8022346:	46bd      	mov	sp, r7
 8022348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802234c:	4770      	bx	lr
	...

08022350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8022350:	b580      	push	{r7, lr}
 8022352:	b086      	sub	sp, #24
 8022354:	af00      	add	r7, sp, #0
 8022356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	2b00      	cmp	r3, #0
 802235c:	d101      	bne.n	8022362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802235e:	2301      	movs	r3, #1
 8022360:	e267      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	f003 0301 	and.w	r3, r3, #1
 802236a:	2b00      	cmp	r3, #0
 802236c:	d075      	beq.n	802245a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 802236e:	4b88      	ldr	r3, [pc, #544]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022370:	689b      	ldr	r3, [r3, #8]
 8022372:	f003 030c 	and.w	r3, r3, #12
 8022376:	2b04      	cmp	r3, #4
 8022378:	d00c      	beq.n	8022394 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802237a:	4b85      	ldr	r3, [pc, #532]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 802237c:	689b      	ldr	r3, [r3, #8]
 802237e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8022382:	2b08      	cmp	r3, #8
 8022384:	d112      	bne.n	80223ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8022386:	4b82      	ldr	r3, [pc, #520]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022388:	685b      	ldr	r3, [r3, #4]
 802238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802238e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022392:	d10b      	bne.n	80223ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022394:	4b7e      	ldr	r3, [pc, #504]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802239c:	2b00      	cmp	r3, #0
 802239e:	d05b      	beq.n	8022458 <HAL_RCC_OscConfig+0x108>
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	685b      	ldr	r3, [r3, #4]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d157      	bne.n	8022458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80223a8:	2301      	movs	r3, #1
 80223aa:	e242      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	685b      	ldr	r3, [r3, #4]
 80223b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80223b4:	d106      	bne.n	80223c4 <HAL_RCC_OscConfig+0x74>
 80223b6:	4b76      	ldr	r3, [pc, #472]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223b8:	681b      	ldr	r3, [r3, #0]
 80223ba:	4a75      	ldr	r2, [pc, #468]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80223c0:	6013      	str	r3, [r2, #0]
 80223c2:	e01d      	b.n	8022400 <HAL_RCC_OscConfig+0xb0>
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	685b      	ldr	r3, [r3, #4]
 80223c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80223cc:	d10c      	bne.n	80223e8 <HAL_RCC_OscConfig+0x98>
 80223ce:	4b70      	ldr	r3, [pc, #448]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223d0:	681b      	ldr	r3, [r3, #0]
 80223d2:	4a6f      	ldr	r2, [pc, #444]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80223d8:	6013      	str	r3, [r2, #0]
 80223da:	4b6d      	ldr	r3, [pc, #436]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	4a6c      	ldr	r2, [pc, #432]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80223e4:	6013      	str	r3, [r2, #0]
 80223e6:	e00b      	b.n	8022400 <HAL_RCC_OscConfig+0xb0>
 80223e8:	4b69      	ldr	r3, [pc, #420]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	4a68      	ldr	r2, [pc, #416]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80223f2:	6013      	str	r3, [r2, #0]
 80223f4:	4b66      	ldr	r3, [pc, #408]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	4a65      	ldr	r2, [pc, #404]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80223fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80223fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	685b      	ldr	r3, [r3, #4]
 8022404:	2b00      	cmp	r3, #0
 8022406:	d013      	beq.n	8022430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022408:	f7ff fc54 	bl	8021cb4 <HAL_GetTick>
 802240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802240e:	e008      	b.n	8022422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022410:	f7ff fc50 	bl	8021cb4 <HAL_GetTick>
 8022414:	4602      	mov	r2, r0
 8022416:	693b      	ldr	r3, [r7, #16]
 8022418:	1ad3      	subs	r3, r2, r3
 802241a:	2b64      	cmp	r3, #100	; 0x64
 802241c:	d901      	bls.n	8022422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802241e:	2303      	movs	r3, #3
 8022420:	e207      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022422:	4b5b      	ldr	r3, [pc, #364]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802242a:	2b00      	cmp	r3, #0
 802242c:	d0f0      	beq.n	8022410 <HAL_RCC_OscConfig+0xc0>
 802242e:	e014      	b.n	802245a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022430:	f7ff fc40 	bl	8021cb4 <HAL_GetTick>
 8022434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8022436:	e008      	b.n	802244a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022438:	f7ff fc3c 	bl	8021cb4 <HAL_GetTick>
 802243c:	4602      	mov	r2, r0
 802243e:	693b      	ldr	r3, [r7, #16]
 8022440:	1ad3      	subs	r3, r2, r3
 8022442:	2b64      	cmp	r3, #100	; 0x64
 8022444:	d901      	bls.n	802244a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8022446:	2303      	movs	r3, #3
 8022448:	e1f3      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802244a:	4b51      	ldr	r3, [pc, #324]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022452:	2b00      	cmp	r3, #0
 8022454:	d1f0      	bne.n	8022438 <HAL_RCC_OscConfig+0xe8>
 8022456:	e000      	b.n	802245a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	f003 0302 	and.w	r3, r3, #2
 8022462:	2b00      	cmp	r3, #0
 8022464:	d063      	beq.n	802252e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8022466:	4b4a      	ldr	r3, [pc, #296]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022468:	689b      	ldr	r3, [r3, #8]
 802246a:	f003 030c 	and.w	r3, r3, #12
 802246e:	2b00      	cmp	r3, #0
 8022470:	d00b      	beq.n	802248a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022472:	4b47      	ldr	r3, [pc, #284]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022474:	689b      	ldr	r3, [r3, #8]
 8022476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 802247a:	2b08      	cmp	r3, #8
 802247c:	d11c      	bne.n	80224b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802247e:	4b44      	ldr	r3, [pc, #272]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022480:	685b      	ldr	r3, [r3, #4]
 8022482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022486:	2b00      	cmp	r3, #0
 8022488:	d116      	bne.n	80224b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802248a:	4b41      	ldr	r3, [pc, #260]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	f003 0302 	and.w	r3, r3, #2
 8022492:	2b00      	cmp	r3, #0
 8022494:	d005      	beq.n	80224a2 <HAL_RCC_OscConfig+0x152>
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	68db      	ldr	r3, [r3, #12]
 802249a:	2b01      	cmp	r3, #1
 802249c:	d001      	beq.n	80224a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802249e:	2301      	movs	r3, #1
 80224a0:	e1c7      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80224a2:	4b3b      	ldr	r3, [pc, #236]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80224a4:	681b      	ldr	r3, [r3, #0]
 80224a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	691b      	ldr	r3, [r3, #16]
 80224ae:	00db      	lsls	r3, r3, #3
 80224b0:	4937      	ldr	r1, [pc, #220]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80224b2:	4313      	orrs	r3, r2
 80224b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80224b6:	e03a      	b.n	802252e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	68db      	ldr	r3, [r3, #12]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d020      	beq.n	8022502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80224c0:	4b34      	ldr	r3, [pc, #208]	; (8022594 <HAL_RCC_OscConfig+0x244>)
 80224c2:	2201      	movs	r2, #1
 80224c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80224c6:	f7ff fbf5 	bl	8021cb4 <HAL_GetTick>
 80224ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80224cc:	e008      	b.n	80224e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80224ce:	f7ff fbf1 	bl	8021cb4 <HAL_GetTick>
 80224d2:	4602      	mov	r2, r0
 80224d4:	693b      	ldr	r3, [r7, #16]
 80224d6:	1ad3      	subs	r3, r2, r3
 80224d8:	2b02      	cmp	r3, #2
 80224da:	d901      	bls.n	80224e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80224dc:	2303      	movs	r3, #3
 80224de:	e1a8      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80224e0:	4b2b      	ldr	r3, [pc, #172]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	f003 0302 	and.w	r3, r3, #2
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d0f0      	beq.n	80224ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80224ec:	4b28      	ldr	r3, [pc, #160]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	691b      	ldr	r3, [r3, #16]
 80224f8:	00db      	lsls	r3, r3, #3
 80224fa:	4925      	ldr	r1, [pc, #148]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 80224fc:	4313      	orrs	r3, r2
 80224fe:	600b      	str	r3, [r1, #0]
 8022500:	e015      	b.n	802252e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8022502:	4b24      	ldr	r3, [pc, #144]	; (8022594 <HAL_RCC_OscConfig+0x244>)
 8022504:	2200      	movs	r2, #0
 8022506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022508:	f7ff fbd4 	bl	8021cb4 <HAL_GetTick>
 802250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802250e:	e008      	b.n	8022522 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022510:	f7ff fbd0 	bl	8021cb4 <HAL_GetTick>
 8022514:	4602      	mov	r2, r0
 8022516:	693b      	ldr	r3, [r7, #16]
 8022518:	1ad3      	subs	r3, r2, r3
 802251a:	2b02      	cmp	r3, #2
 802251c:	d901      	bls.n	8022522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802251e:	2303      	movs	r3, #3
 8022520:	e187      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022522:	4b1b      	ldr	r3, [pc, #108]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	f003 0302 	and.w	r3, r3, #2
 802252a:	2b00      	cmp	r3, #0
 802252c:	d1f0      	bne.n	8022510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	681b      	ldr	r3, [r3, #0]
 8022532:	f003 0308 	and.w	r3, r3, #8
 8022536:	2b00      	cmp	r3, #0
 8022538:	d036      	beq.n	80225a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	695b      	ldr	r3, [r3, #20]
 802253e:	2b00      	cmp	r3, #0
 8022540:	d016      	beq.n	8022570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022542:	4b15      	ldr	r3, [pc, #84]	; (8022598 <HAL_RCC_OscConfig+0x248>)
 8022544:	2201      	movs	r2, #1
 8022546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022548:	f7ff fbb4 	bl	8021cb4 <HAL_GetTick>
 802254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802254e:	e008      	b.n	8022562 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022550:	f7ff fbb0 	bl	8021cb4 <HAL_GetTick>
 8022554:	4602      	mov	r2, r0
 8022556:	693b      	ldr	r3, [r7, #16]
 8022558:	1ad3      	subs	r3, r2, r3
 802255a:	2b02      	cmp	r3, #2
 802255c:	d901      	bls.n	8022562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802255e:	2303      	movs	r3, #3
 8022560:	e167      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8022562:	4b0b      	ldr	r3, [pc, #44]	; (8022590 <HAL_RCC_OscConfig+0x240>)
 8022564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022566:	f003 0302 	and.w	r3, r3, #2
 802256a:	2b00      	cmp	r3, #0
 802256c:	d0f0      	beq.n	8022550 <HAL_RCC_OscConfig+0x200>
 802256e:	e01b      	b.n	80225a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022570:	4b09      	ldr	r3, [pc, #36]	; (8022598 <HAL_RCC_OscConfig+0x248>)
 8022572:	2200      	movs	r2, #0
 8022574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022576:	f7ff fb9d 	bl	8021cb4 <HAL_GetTick>
 802257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802257c:	e00e      	b.n	802259c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802257e:	f7ff fb99 	bl	8021cb4 <HAL_GetTick>
 8022582:	4602      	mov	r2, r0
 8022584:	693b      	ldr	r3, [r7, #16]
 8022586:	1ad3      	subs	r3, r2, r3
 8022588:	2b02      	cmp	r3, #2
 802258a:	d907      	bls.n	802259c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802258c:	2303      	movs	r3, #3
 802258e:	e150      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
 8022590:	40023800 	.word	0x40023800
 8022594:	42470000 	.word	0x42470000
 8022598:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802259c:	4b88      	ldr	r3, [pc, #544]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80225a0:	f003 0302 	and.w	r3, r3, #2
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d1ea      	bne.n	802257e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	f003 0304 	and.w	r3, r3, #4
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	f000 8097 	beq.w	80226e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80225b6:	2300      	movs	r3, #0
 80225b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80225ba:	4b81      	ldr	r3, [pc, #516]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80225bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d10f      	bne.n	80225e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80225c6:	2300      	movs	r3, #0
 80225c8:	60bb      	str	r3, [r7, #8]
 80225ca:	4b7d      	ldr	r3, [pc, #500]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80225cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225ce:	4a7c      	ldr	r2, [pc, #496]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80225d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80225d4:	6413      	str	r3, [r2, #64]	; 0x40
 80225d6:	4b7a      	ldr	r3, [pc, #488]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80225d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80225de:	60bb      	str	r3, [r7, #8]
 80225e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80225e2:	2301      	movs	r3, #1
 80225e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80225e6:	4b77      	ldr	r3, [pc, #476]	; (80227c4 <HAL_RCC_OscConfig+0x474>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d118      	bne.n	8022624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80225f2:	4b74      	ldr	r3, [pc, #464]	; (80227c4 <HAL_RCC_OscConfig+0x474>)
 80225f4:	681b      	ldr	r3, [r3, #0]
 80225f6:	4a73      	ldr	r2, [pc, #460]	; (80227c4 <HAL_RCC_OscConfig+0x474>)
 80225f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80225fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80225fe:	f7ff fb59 	bl	8021cb4 <HAL_GetTick>
 8022602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022604:	e008      	b.n	8022618 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022606:	f7ff fb55 	bl	8021cb4 <HAL_GetTick>
 802260a:	4602      	mov	r2, r0
 802260c:	693b      	ldr	r3, [r7, #16]
 802260e:	1ad3      	subs	r3, r2, r3
 8022610:	2b02      	cmp	r3, #2
 8022612:	d901      	bls.n	8022618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8022614:	2303      	movs	r3, #3
 8022616:	e10c      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022618:	4b6a      	ldr	r3, [pc, #424]	; (80227c4 <HAL_RCC_OscConfig+0x474>)
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022620:	2b00      	cmp	r3, #0
 8022622:	d0f0      	beq.n	8022606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	689b      	ldr	r3, [r3, #8]
 8022628:	2b01      	cmp	r3, #1
 802262a:	d106      	bne.n	802263a <HAL_RCC_OscConfig+0x2ea>
 802262c:	4b64      	ldr	r3, [pc, #400]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022630:	4a63      	ldr	r2, [pc, #396]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022632:	f043 0301 	orr.w	r3, r3, #1
 8022636:	6713      	str	r3, [r2, #112]	; 0x70
 8022638:	e01c      	b.n	8022674 <HAL_RCC_OscConfig+0x324>
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	689b      	ldr	r3, [r3, #8]
 802263e:	2b05      	cmp	r3, #5
 8022640:	d10c      	bne.n	802265c <HAL_RCC_OscConfig+0x30c>
 8022642:	4b5f      	ldr	r3, [pc, #380]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022646:	4a5e      	ldr	r2, [pc, #376]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022648:	f043 0304 	orr.w	r3, r3, #4
 802264c:	6713      	str	r3, [r2, #112]	; 0x70
 802264e:	4b5c      	ldr	r3, [pc, #368]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022652:	4a5b      	ldr	r2, [pc, #364]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022654:	f043 0301 	orr.w	r3, r3, #1
 8022658:	6713      	str	r3, [r2, #112]	; 0x70
 802265a:	e00b      	b.n	8022674 <HAL_RCC_OscConfig+0x324>
 802265c:	4b58      	ldr	r3, [pc, #352]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022660:	4a57      	ldr	r2, [pc, #348]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022662:	f023 0301 	bic.w	r3, r3, #1
 8022666:	6713      	str	r3, [r2, #112]	; 0x70
 8022668:	4b55      	ldr	r3, [pc, #340]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802266c:	4a54      	ldr	r2, [pc, #336]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802266e:	f023 0304 	bic.w	r3, r3, #4
 8022672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	689b      	ldr	r3, [r3, #8]
 8022678:	2b00      	cmp	r3, #0
 802267a:	d015      	beq.n	80226a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802267c:	f7ff fb1a 	bl	8021cb4 <HAL_GetTick>
 8022680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022682:	e00a      	b.n	802269a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022684:	f7ff fb16 	bl	8021cb4 <HAL_GetTick>
 8022688:	4602      	mov	r2, r0
 802268a:	693b      	ldr	r3, [r7, #16]
 802268c:	1ad3      	subs	r3, r2, r3
 802268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8022692:	4293      	cmp	r3, r2
 8022694:	d901      	bls.n	802269a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8022696:	2303      	movs	r3, #3
 8022698:	e0cb      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802269a:	4b49      	ldr	r3, [pc, #292]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802269e:	f003 0302 	and.w	r3, r3, #2
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	d0ee      	beq.n	8022684 <HAL_RCC_OscConfig+0x334>
 80226a6:	e014      	b.n	80226d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80226a8:	f7ff fb04 	bl	8021cb4 <HAL_GetTick>
 80226ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80226ae:	e00a      	b.n	80226c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80226b0:	f7ff fb00 	bl	8021cb4 <HAL_GetTick>
 80226b4:	4602      	mov	r2, r0
 80226b6:	693b      	ldr	r3, [r7, #16]
 80226b8:	1ad3      	subs	r3, r2, r3
 80226ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80226be:	4293      	cmp	r3, r2
 80226c0:	d901      	bls.n	80226c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80226c2:	2303      	movs	r3, #3
 80226c4:	e0b5      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80226c6:	4b3e      	ldr	r3, [pc, #248]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80226c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80226ca:	f003 0302 	and.w	r3, r3, #2
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d1ee      	bne.n	80226b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80226d2:	7dfb      	ldrb	r3, [r7, #23]
 80226d4:	2b01      	cmp	r3, #1
 80226d6:	d105      	bne.n	80226e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80226d8:	4b39      	ldr	r3, [pc, #228]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80226da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226dc:	4a38      	ldr	r2, [pc, #224]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80226de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80226e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	699b      	ldr	r3, [r3, #24]
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	f000 80a1 	beq.w	8022830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80226ee:	4b34      	ldr	r3, [pc, #208]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80226f0:	689b      	ldr	r3, [r3, #8]
 80226f2:	f003 030c 	and.w	r3, r3, #12
 80226f6:	2b08      	cmp	r3, #8
 80226f8:	d05c      	beq.n	80227b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	699b      	ldr	r3, [r3, #24]
 80226fe:	2b02      	cmp	r3, #2
 8022700:	d141      	bne.n	8022786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022702:	4b31      	ldr	r3, [pc, #196]	; (80227c8 <HAL_RCC_OscConfig+0x478>)
 8022704:	2200      	movs	r2, #0
 8022706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022708:	f7ff fad4 	bl	8021cb4 <HAL_GetTick>
 802270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802270e:	e008      	b.n	8022722 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022710:	f7ff fad0 	bl	8021cb4 <HAL_GetTick>
 8022714:	4602      	mov	r2, r0
 8022716:	693b      	ldr	r3, [r7, #16]
 8022718:	1ad3      	subs	r3, r2, r3
 802271a:	2b02      	cmp	r3, #2
 802271c:	d901      	bls.n	8022722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802271e:	2303      	movs	r3, #3
 8022720:	e087      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022722:	4b27      	ldr	r3, [pc, #156]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802272a:	2b00      	cmp	r3, #0
 802272c:	d1f0      	bne.n	8022710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	69da      	ldr	r2, [r3, #28]
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	6a1b      	ldr	r3, [r3, #32]
 8022736:	431a      	orrs	r2, r3
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802273c:	019b      	lsls	r3, r3, #6
 802273e:	431a      	orrs	r2, r3
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022744:	085b      	lsrs	r3, r3, #1
 8022746:	3b01      	subs	r3, #1
 8022748:	041b      	lsls	r3, r3, #16
 802274a:	431a      	orrs	r2, r3
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022750:	061b      	lsls	r3, r3, #24
 8022752:	491b      	ldr	r1, [pc, #108]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 8022754:	4313      	orrs	r3, r2
 8022756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8022758:	4b1b      	ldr	r3, [pc, #108]	; (80227c8 <HAL_RCC_OscConfig+0x478>)
 802275a:	2201      	movs	r2, #1
 802275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802275e:	f7ff faa9 	bl	8021cb4 <HAL_GetTick>
 8022762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022764:	e008      	b.n	8022778 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022766:	f7ff faa5 	bl	8021cb4 <HAL_GetTick>
 802276a:	4602      	mov	r2, r0
 802276c:	693b      	ldr	r3, [r7, #16]
 802276e:	1ad3      	subs	r3, r2, r3
 8022770:	2b02      	cmp	r3, #2
 8022772:	d901      	bls.n	8022778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8022774:	2303      	movs	r3, #3
 8022776:	e05c      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022778:	4b11      	ldr	r3, [pc, #68]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 802277a:	681b      	ldr	r3, [r3, #0]
 802277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022780:	2b00      	cmp	r3, #0
 8022782:	d0f0      	beq.n	8022766 <HAL_RCC_OscConfig+0x416>
 8022784:	e054      	b.n	8022830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022786:	4b10      	ldr	r3, [pc, #64]	; (80227c8 <HAL_RCC_OscConfig+0x478>)
 8022788:	2200      	movs	r2, #0
 802278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802278c:	f7ff fa92 	bl	8021cb4 <HAL_GetTick>
 8022790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022792:	e008      	b.n	80227a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022794:	f7ff fa8e 	bl	8021cb4 <HAL_GetTick>
 8022798:	4602      	mov	r2, r0
 802279a:	693b      	ldr	r3, [r7, #16]
 802279c:	1ad3      	subs	r3, r2, r3
 802279e:	2b02      	cmp	r3, #2
 80227a0:	d901      	bls.n	80227a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80227a2:	2303      	movs	r3, #3
 80227a4:	e045      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80227a6:	4b06      	ldr	r3, [pc, #24]	; (80227c0 <HAL_RCC_OscConfig+0x470>)
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d1f0      	bne.n	8022794 <HAL_RCC_OscConfig+0x444>
 80227b2:	e03d      	b.n	8022830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	699b      	ldr	r3, [r3, #24]
 80227b8:	2b01      	cmp	r3, #1
 80227ba:	d107      	bne.n	80227cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80227bc:	2301      	movs	r3, #1
 80227be:	e038      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
 80227c0:	40023800 	.word	0x40023800
 80227c4:	40007000 	.word	0x40007000
 80227c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80227cc:	4b1b      	ldr	r3, [pc, #108]	; (802283c <HAL_RCC_OscConfig+0x4ec>)
 80227ce:	685b      	ldr	r3, [r3, #4]
 80227d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	699b      	ldr	r3, [r3, #24]
 80227d6:	2b01      	cmp	r3, #1
 80227d8:	d028      	beq.n	802282c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80227e4:	429a      	cmp	r2, r3
 80227e6:	d121      	bne.n	802282c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80227e8:	68fb      	ldr	r3, [r7, #12]
 80227ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80227f2:	429a      	cmp	r2, r3
 80227f4:	d11a      	bne.n	802282c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80227f6:	68fa      	ldr	r2, [r7, #12]
 80227f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80227fc:	4013      	ands	r3, r2
 80227fe:	687a      	ldr	r2, [r7, #4]
 8022800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8022804:	4293      	cmp	r3, r2
 8022806:	d111      	bne.n	802282c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8022808:	68fb      	ldr	r3, [r7, #12]
 802280a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022812:	085b      	lsrs	r3, r3, #1
 8022814:	3b01      	subs	r3, #1
 8022816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8022818:	429a      	cmp	r2, r3
 802281a:	d107      	bne.n	802282c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8022828:	429a      	cmp	r2, r3
 802282a:	d001      	beq.n	8022830 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 802282c:	2301      	movs	r3, #1
 802282e:	e000      	b.n	8022832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8022830:	2300      	movs	r3, #0
}
 8022832:	4618      	mov	r0, r3
 8022834:	3718      	adds	r7, #24
 8022836:	46bd      	mov	sp, r7
 8022838:	bd80      	pop	{r7, pc}
 802283a:	bf00      	nop
 802283c:	40023800 	.word	0x40023800

08022840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b084      	sub	sp, #16
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
 8022848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	2b00      	cmp	r3, #0
 802284e:	d101      	bne.n	8022854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022850:	2301      	movs	r3, #1
 8022852:	e0cc      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8022854:	4b68      	ldr	r3, [pc, #416]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	f003 0307 	and.w	r3, r3, #7
 802285c:	683a      	ldr	r2, [r7, #0]
 802285e:	429a      	cmp	r2, r3
 8022860:	d90c      	bls.n	802287c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022862:	4b65      	ldr	r3, [pc, #404]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 8022864:	683a      	ldr	r2, [r7, #0]
 8022866:	b2d2      	uxtb	r2, r2
 8022868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802286a:	4b63      	ldr	r3, [pc, #396]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	f003 0307 	and.w	r3, r3, #7
 8022872:	683a      	ldr	r2, [r7, #0]
 8022874:	429a      	cmp	r2, r3
 8022876:	d001      	beq.n	802287c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8022878:	2301      	movs	r3, #1
 802287a:	e0b8      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	f003 0302 	and.w	r3, r3, #2
 8022884:	2b00      	cmp	r3, #0
 8022886:	d020      	beq.n	80228ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	681b      	ldr	r3, [r3, #0]
 802288c:	f003 0304 	and.w	r3, r3, #4
 8022890:	2b00      	cmp	r3, #0
 8022892:	d005      	beq.n	80228a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8022894:	4b59      	ldr	r3, [pc, #356]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022896:	689b      	ldr	r3, [r3, #8]
 8022898:	4a58      	ldr	r2, [pc, #352]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 802289a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802289e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	f003 0308 	and.w	r3, r3, #8
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	d005      	beq.n	80228b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80228ac:	4b53      	ldr	r3, [pc, #332]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80228ae:	689b      	ldr	r3, [r3, #8]
 80228b0:	4a52      	ldr	r2, [pc, #328]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80228b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80228b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80228b8:	4b50      	ldr	r3, [pc, #320]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80228ba:	689b      	ldr	r3, [r3, #8]
 80228bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	689b      	ldr	r3, [r3, #8]
 80228c4:	494d      	ldr	r1, [pc, #308]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80228c6:	4313      	orrs	r3, r2
 80228c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	f003 0301 	and.w	r3, r3, #1
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	d044      	beq.n	8022960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	685b      	ldr	r3, [r3, #4]
 80228da:	2b01      	cmp	r3, #1
 80228dc:	d107      	bne.n	80228ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80228de:	4b47      	ldr	r3, [pc, #284]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d119      	bne.n	802291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80228ea:	2301      	movs	r3, #1
 80228ec:	e07f      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	685b      	ldr	r3, [r3, #4]
 80228f2:	2b02      	cmp	r3, #2
 80228f4:	d003      	beq.n	80228fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80228fa:	2b03      	cmp	r3, #3
 80228fc:	d107      	bne.n	802290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80228fe:	4b3f      	ldr	r3, [pc, #252]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022906:	2b00      	cmp	r3, #0
 8022908:	d109      	bne.n	802291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802290a:	2301      	movs	r3, #1
 802290c:	e06f      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802290e:	4b3b      	ldr	r3, [pc, #236]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022910:	681b      	ldr	r3, [r3, #0]
 8022912:	f003 0302 	and.w	r3, r3, #2
 8022916:	2b00      	cmp	r3, #0
 8022918:	d101      	bne.n	802291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802291a:	2301      	movs	r3, #1
 802291c:	e067      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802291e:	4b37      	ldr	r3, [pc, #220]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022920:	689b      	ldr	r3, [r3, #8]
 8022922:	f023 0203 	bic.w	r2, r3, #3
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	685b      	ldr	r3, [r3, #4]
 802292a:	4934      	ldr	r1, [pc, #208]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 802292c:	4313      	orrs	r3, r2
 802292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022930:	f7ff f9c0 	bl	8021cb4 <HAL_GetTick>
 8022934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022936:	e00a      	b.n	802294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022938:	f7ff f9bc 	bl	8021cb4 <HAL_GetTick>
 802293c:	4602      	mov	r2, r0
 802293e:	68fb      	ldr	r3, [r7, #12]
 8022940:	1ad3      	subs	r3, r2, r3
 8022942:	f241 3288 	movw	r2, #5000	; 0x1388
 8022946:	4293      	cmp	r3, r2
 8022948:	d901      	bls.n	802294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802294a:	2303      	movs	r3, #3
 802294c:	e04f      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802294e:	4b2b      	ldr	r3, [pc, #172]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022950:	689b      	ldr	r3, [r3, #8]
 8022952:	f003 020c 	and.w	r2, r3, #12
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	685b      	ldr	r3, [r3, #4]
 802295a:	009b      	lsls	r3, r3, #2
 802295c:	429a      	cmp	r2, r3
 802295e:	d1eb      	bne.n	8022938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8022960:	4b25      	ldr	r3, [pc, #148]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 8022962:	681b      	ldr	r3, [r3, #0]
 8022964:	f003 0307 	and.w	r3, r3, #7
 8022968:	683a      	ldr	r2, [r7, #0]
 802296a:	429a      	cmp	r2, r3
 802296c:	d20c      	bcs.n	8022988 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802296e:	4b22      	ldr	r3, [pc, #136]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 8022970:	683a      	ldr	r2, [r7, #0]
 8022972:	b2d2      	uxtb	r2, r2
 8022974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022976:	4b20      	ldr	r3, [pc, #128]	; (80229f8 <HAL_RCC_ClockConfig+0x1b8>)
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	f003 0307 	and.w	r3, r3, #7
 802297e:	683a      	ldr	r2, [r7, #0]
 8022980:	429a      	cmp	r2, r3
 8022982:	d001      	beq.n	8022988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8022984:	2301      	movs	r3, #1
 8022986:	e032      	b.n	80229ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	f003 0304 	and.w	r3, r3, #4
 8022990:	2b00      	cmp	r3, #0
 8022992:	d008      	beq.n	80229a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022994:	4b19      	ldr	r3, [pc, #100]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 8022996:	689b      	ldr	r3, [r3, #8]
 8022998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802299c:	687b      	ldr	r3, [r7, #4]
 802299e:	68db      	ldr	r3, [r3, #12]
 80229a0:	4916      	ldr	r1, [pc, #88]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80229a2:	4313      	orrs	r3, r2
 80229a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	f003 0308 	and.w	r3, r3, #8
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d009      	beq.n	80229c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80229b2:	4b12      	ldr	r3, [pc, #72]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80229b4:	689b      	ldr	r3, [r3, #8]
 80229b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	691b      	ldr	r3, [r3, #16]
 80229be:	00db      	lsls	r3, r3, #3
 80229c0:	490e      	ldr	r1, [pc, #56]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80229c2:	4313      	orrs	r3, r2
 80229c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80229c6:	f000 f821 	bl	8022a0c <HAL_RCC_GetSysClockFreq>
 80229ca:	4602      	mov	r2, r0
 80229cc:	4b0b      	ldr	r3, [pc, #44]	; (80229fc <HAL_RCC_ClockConfig+0x1bc>)
 80229ce:	689b      	ldr	r3, [r3, #8]
 80229d0:	091b      	lsrs	r3, r3, #4
 80229d2:	f003 030f 	and.w	r3, r3, #15
 80229d6:	490a      	ldr	r1, [pc, #40]	; (8022a00 <HAL_RCC_ClockConfig+0x1c0>)
 80229d8:	5ccb      	ldrb	r3, [r1, r3]
 80229da:	fa22 f303 	lsr.w	r3, r2, r3
 80229de:	4a09      	ldr	r2, [pc, #36]	; (8022a04 <HAL_RCC_ClockConfig+0x1c4>)
 80229e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80229e2:	4b09      	ldr	r3, [pc, #36]	; (8022a08 <HAL_RCC_ClockConfig+0x1c8>)
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	4618      	mov	r0, r3
 80229e8:	f7ff f920 	bl	8021c2c <HAL_InitTick>

  return HAL_OK;
 80229ec:	2300      	movs	r3, #0
}
 80229ee:	4618      	mov	r0, r3
 80229f0:	3710      	adds	r7, #16
 80229f2:	46bd      	mov	sp, r7
 80229f4:	bd80      	pop	{r7, pc}
 80229f6:	bf00      	nop
 80229f8:	40023c00 	.word	0x40023c00
 80229fc:	40023800 	.word	0x40023800
 8022a00:	08029f3c 	.word	0x08029f3c
 8022a04:	20000000 	.word	0x20000000
 8022a08:	20000004 	.word	0x20000004

08022a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022a10:	b090      	sub	sp, #64	; 0x40
 8022a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8022a14:	2300      	movs	r3, #0
 8022a16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8022a18:	2300      	movs	r3, #0
 8022a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8022a1c:	2300      	movs	r3, #0
 8022a1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8022a20:	2300      	movs	r3, #0
 8022a22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022a24:	4b59      	ldr	r3, [pc, #356]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022a26:	689b      	ldr	r3, [r3, #8]
 8022a28:	f003 030c 	and.w	r3, r3, #12
 8022a2c:	2b08      	cmp	r3, #8
 8022a2e:	d00d      	beq.n	8022a4c <HAL_RCC_GetSysClockFreq+0x40>
 8022a30:	2b08      	cmp	r3, #8
 8022a32:	f200 80a1 	bhi.w	8022b78 <HAL_RCC_GetSysClockFreq+0x16c>
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d002      	beq.n	8022a40 <HAL_RCC_GetSysClockFreq+0x34>
 8022a3a:	2b04      	cmp	r3, #4
 8022a3c:	d003      	beq.n	8022a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8022a3e:	e09b      	b.n	8022b78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8022a40:	4b53      	ldr	r3, [pc, #332]	; (8022b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8022a42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022a44:	e09b      	b.n	8022b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8022a46:	4b53      	ldr	r3, [pc, #332]	; (8022b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8022a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022a4a:	e098      	b.n	8022b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022a4c:	4b4f      	ldr	r3, [pc, #316]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022a4e:	685b      	ldr	r3, [r3, #4]
 8022a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022a54:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8022a56:	4b4d      	ldr	r3, [pc, #308]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022a58:	685b      	ldr	r3, [r3, #4]
 8022a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d028      	beq.n	8022ab4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022a62:	4b4a      	ldr	r3, [pc, #296]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022a64:	685b      	ldr	r3, [r3, #4]
 8022a66:	099b      	lsrs	r3, r3, #6
 8022a68:	2200      	movs	r2, #0
 8022a6a:	623b      	str	r3, [r7, #32]
 8022a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8022a6e:	6a3b      	ldr	r3, [r7, #32]
 8022a70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8022a74:	2100      	movs	r1, #0
 8022a76:	4b47      	ldr	r3, [pc, #284]	; (8022b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8022a78:	fb03 f201 	mul.w	r2, r3, r1
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	fb00 f303 	mul.w	r3, r0, r3
 8022a82:	4413      	add	r3, r2
 8022a84:	4a43      	ldr	r2, [pc, #268]	; (8022b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8022a86:	fba0 1202 	umull	r1, r2, r0, r2
 8022a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022a8c:	460a      	mov	r2, r1
 8022a8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8022a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022a92:	4413      	add	r3, r2
 8022a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022a98:	2200      	movs	r2, #0
 8022a9a:	61bb      	str	r3, [r7, #24]
 8022a9c:	61fa      	str	r2, [r7, #28]
 8022a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022aa6:	f7fe f8f7 	bl	8020c98 <__aeabi_uldivmod>
 8022aaa:	4602      	mov	r2, r0
 8022aac:	460b      	mov	r3, r1
 8022aae:	4613      	mov	r3, r2
 8022ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022ab2:	e053      	b.n	8022b5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022ab4:	4b35      	ldr	r3, [pc, #212]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022ab6:	685b      	ldr	r3, [r3, #4]
 8022ab8:	099b      	lsrs	r3, r3, #6
 8022aba:	2200      	movs	r2, #0
 8022abc:	613b      	str	r3, [r7, #16]
 8022abe:	617a      	str	r2, [r7, #20]
 8022ac0:	693b      	ldr	r3, [r7, #16]
 8022ac2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8022ac6:	f04f 0b00 	mov.w	fp, #0
 8022aca:	4652      	mov	r2, sl
 8022acc:	465b      	mov	r3, fp
 8022ace:	f04f 0000 	mov.w	r0, #0
 8022ad2:	f04f 0100 	mov.w	r1, #0
 8022ad6:	0159      	lsls	r1, r3, #5
 8022ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022adc:	0150      	lsls	r0, r2, #5
 8022ade:	4602      	mov	r2, r0
 8022ae0:	460b      	mov	r3, r1
 8022ae2:	ebb2 080a 	subs.w	r8, r2, sl
 8022ae6:	eb63 090b 	sbc.w	r9, r3, fp
 8022aea:	f04f 0200 	mov.w	r2, #0
 8022aee:	f04f 0300 	mov.w	r3, #0
 8022af2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8022af6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8022afa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8022afe:	ebb2 0408 	subs.w	r4, r2, r8
 8022b02:	eb63 0509 	sbc.w	r5, r3, r9
 8022b06:	f04f 0200 	mov.w	r2, #0
 8022b0a:	f04f 0300 	mov.w	r3, #0
 8022b0e:	00eb      	lsls	r3, r5, #3
 8022b10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022b14:	00e2      	lsls	r2, r4, #3
 8022b16:	4614      	mov	r4, r2
 8022b18:	461d      	mov	r5, r3
 8022b1a:	eb14 030a 	adds.w	r3, r4, sl
 8022b1e:	603b      	str	r3, [r7, #0]
 8022b20:	eb45 030b 	adc.w	r3, r5, fp
 8022b24:	607b      	str	r3, [r7, #4]
 8022b26:	f04f 0200 	mov.w	r2, #0
 8022b2a:	f04f 0300 	mov.w	r3, #0
 8022b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8022b32:	4629      	mov	r1, r5
 8022b34:	028b      	lsls	r3, r1, #10
 8022b36:	4621      	mov	r1, r4
 8022b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8022b3c:	4621      	mov	r1, r4
 8022b3e:	028a      	lsls	r2, r1, #10
 8022b40:	4610      	mov	r0, r2
 8022b42:	4619      	mov	r1, r3
 8022b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022b46:	2200      	movs	r2, #0
 8022b48:	60bb      	str	r3, [r7, #8]
 8022b4a:	60fa      	str	r2, [r7, #12]
 8022b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022b50:	f7fe f8a2 	bl	8020c98 <__aeabi_uldivmod>
 8022b54:	4602      	mov	r2, r0
 8022b56:	460b      	mov	r3, r1
 8022b58:	4613      	mov	r3, r2
 8022b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8022b5c:	4b0b      	ldr	r3, [pc, #44]	; (8022b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8022b5e:	685b      	ldr	r3, [r3, #4]
 8022b60:	0c1b      	lsrs	r3, r3, #16
 8022b62:	f003 0303 	and.w	r3, r3, #3
 8022b66:	3301      	adds	r3, #1
 8022b68:	005b      	lsls	r3, r3, #1
 8022b6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8022b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8022b74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022b76:	e002      	b.n	8022b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022b78:	4b05      	ldr	r3, [pc, #20]	; (8022b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8022b7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8022b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8022b80:	4618      	mov	r0, r3
 8022b82:	3740      	adds	r7, #64	; 0x40
 8022b84:	46bd      	mov	sp, r7
 8022b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022b8a:	bf00      	nop
 8022b8c:	40023800 	.word	0x40023800
 8022b90:	00f42400 	.word	0x00f42400
 8022b94:	017d7840 	.word	0x017d7840

08022b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022b98:	b480      	push	{r7}
 8022b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022b9c:	4b03      	ldr	r3, [pc, #12]	; (8022bac <HAL_RCC_GetHCLKFreq+0x14>)
 8022b9e:	681b      	ldr	r3, [r3, #0]
}
 8022ba0:	4618      	mov	r0, r3
 8022ba2:	46bd      	mov	sp, r7
 8022ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ba8:	4770      	bx	lr
 8022baa:	bf00      	nop
 8022bac:	20000000 	.word	0x20000000

08022bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8022bb0:	b580      	push	{r7, lr}
 8022bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8022bb4:	f7ff fff0 	bl	8022b98 <HAL_RCC_GetHCLKFreq>
 8022bb8:	4602      	mov	r2, r0
 8022bba:	4b05      	ldr	r3, [pc, #20]	; (8022bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8022bbc:	689b      	ldr	r3, [r3, #8]
 8022bbe:	0a9b      	lsrs	r3, r3, #10
 8022bc0:	f003 0307 	and.w	r3, r3, #7
 8022bc4:	4903      	ldr	r1, [pc, #12]	; (8022bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8022bc6:	5ccb      	ldrb	r3, [r1, r3]
 8022bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022bcc:	4618      	mov	r0, r3
 8022bce:	bd80      	pop	{r7, pc}
 8022bd0:	40023800 	.word	0x40023800
 8022bd4:	08029f4c 	.word	0x08029f4c

08022bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8022bd8:	b580      	push	{r7, lr}
 8022bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8022bdc:	f7ff ffdc 	bl	8022b98 <HAL_RCC_GetHCLKFreq>
 8022be0:	4602      	mov	r2, r0
 8022be2:	4b05      	ldr	r3, [pc, #20]	; (8022bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8022be4:	689b      	ldr	r3, [r3, #8]
 8022be6:	0b5b      	lsrs	r3, r3, #13
 8022be8:	f003 0307 	and.w	r3, r3, #7
 8022bec:	4903      	ldr	r1, [pc, #12]	; (8022bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8022bee:	5ccb      	ldrb	r3, [r1, r3]
 8022bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022bf4:	4618      	mov	r0, r3
 8022bf6:	bd80      	pop	{r7, pc}
 8022bf8:	40023800 	.word	0x40023800
 8022bfc:	08029f4c 	.word	0x08029f4c

08022c00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022c00:	b580      	push	{r7, lr}
 8022c02:	b086      	sub	sp, #24
 8022c04:	af00      	add	r7, sp, #0
 8022c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022c08:	2300      	movs	r3, #0
 8022c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8022c0c:	2300      	movs	r3, #0
 8022c0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	f003 0301 	and.w	r3, r3, #1
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d105      	bne.n	8022c28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	681b      	ldr	r3, [r3, #0]
 8022c20:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	d035      	beq.n	8022c94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8022c28:	4b67      	ldr	r3, [pc, #412]	; (8022dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8022c2a:	2200      	movs	r2, #0
 8022c2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8022c2e:	f7ff f841 	bl	8021cb4 <HAL_GetTick>
 8022c32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8022c34:	e008      	b.n	8022c48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8022c36:	f7ff f83d 	bl	8021cb4 <HAL_GetTick>
 8022c3a:	4602      	mov	r2, r0
 8022c3c:	697b      	ldr	r3, [r7, #20]
 8022c3e:	1ad3      	subs	r3, r2, r3
 8022c40:	2b02      	cmp	r3, #2
 8022c42:	d901      	bls.n	8022c48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022c44:	2303      	movs	r3, #3
 8022c46:	e0ba      	b.n	8022dbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8022c48:	4b60      	ldr	r3, [pc, #384]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d1f0      	bne.n	8022c36 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	685b      	ldr	r3, [r3, #4]
 8022c58:	019a      	lsls	r2, r3, #6
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	689b      	ldr	r3, [r3, #8]
 8022c5e:	071b      	lsls	r3, r3, #28
 8022c60:	495a      	ldr	r1, [pc, #360]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022c62:	4313      	orrs	r3, r2
 8022c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8022c68:	4b57      	ldr	r3, [pc, #348]	; (8022dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8022c6a:	2201      	movs	r2, #1
 8022c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8022c6e:	f7ff f821 	bl	8021cb4 <HAL_GetTick>
 8022c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8022c74:	e008      	b.n	8022c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8022c76:	f7ff f81d 	bl	8021cb4 <HAL_GetTick>
 8022c7a:	4602      	mov	r2, r0
 8022c7c:	697b      	ldr	r3, [r7, #20]
 8022c7e:	1ad3      	subs	r3, r2, r3
 8022c80:	2b02      	cmp	r3, #2
 8022c82:	d901      	bls.n	8022c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022c84:	2303      	movs	r3, #3
 8022c86:	e09a      	b.n	8022dbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8022c88:	4b50      	ldr	r3, [pc, #320]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d0f0      	beq.n	8022c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	f003 0302 	and.w	r3, r3, #2
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	f000 8083 	beq.w	8022da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8022ca2:	2300      	movs	r3, #0
 8022ca4:	60fb      	str	r3, [r7, #12]
 8022ca6:	4b49      	ldr	r3, [pc, #292]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022caa:	4a48      	ldr	r2, [pc, #288]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8022cb2:	4b46      	ldr	r3, [pc, #280]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022cba:	60fb      	str	r3, [r7, #12]
 8022cbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8022cbe:	4b44      	ldr	r3, [pc, #272]	; (8022dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022cc0:	681b      	ldr	r3, [r3, #0]
 8022cc2:	4a43      	ldr	r2, [pc, #268]	; (8022dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022cc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8022cca:	f7fe fff3 	bl	8021cb4 <HAL_GetTick>
 8022cce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8022cd0:	e008      	b.n	8022ce4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022cd2:	f7fe ffef 	bl	8021cb4 <HAL_GetTick>
 8022cd6:	4602      	mov	r2, r0
 8022cd8:	697b      	ldr	r3, [r7, #20]
 8022cda:	1ad3      	subs	r3, r2, r3
 8022cdc:	2b02      	cmp	r3, #2
 8022cde:	d901      	bls.n	8022ce4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8022ce0:	2303      	movs	r3, #3
 8022ce2:	e06c      	b.n	8022dbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8022ce4:	4b3a      	ldr	r3, [pc, #232]	; (8022dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022ce6:	681b      	ldr	r3, [r3, #0]
 8022ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	d0f0      	beq.n	8022cd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8022cf0:	4b36      	ldr	r3, [pc, #216]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022cf8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8022cfa:	693b      	ldr	r3, [r7, #16]
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d02f      	beq.n	8022d60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	68db      	ldr	r3, [r3, #12]
 8022d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022d08:	693a      	ldr	r2, [r7, #16]
 8022d0a:	429a      	cmp	r2, r3
 8022d0c:	d028      	beq.n	8022d60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8022d0e:	4b2f      	ldr	r3, [pc, #188]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022d16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8022d18:	4b2e      	ldr	r3, [pc, #184]	; (8022dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8022d1a:	2201      	movs	r2, #1
 8022d1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8022d1e:	4b2d      	ldr	r3, [pc, #180]	; (8022dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8022d20:	2200      	movs	r2, #0
 8022d22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8022d24:	4a29      	ldr	r2, [pc, #164]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d26:	693b      	ldr	r3, [r7, #16]
 8022d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8022d2a:	4b28      	ldr	r3, [pc, #160]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022d2e:	f003 0301 	and.w	r3, r3, #1
 8022d32:	2b01      	cmp	r3, #1
 8022d34:	d114      	bne.n	8022d60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8022d36:	f7fe ffbd 	bl	8021cb4 <HAL_GetTick>
 8022d3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022d3c:	e00a      	b.n	8022d54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022d3e:	f7fe ffb9 	bl	8021cb4 <HAL_GetTick>
 8022d42:	4602      	mov	r2, r0
 8022d44:	697b      	ldr	r3, [r7, #20]
 8022d46:	1ad3      	subs	r3, r2, r3
 8022d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8022d4c:	4293      	cmp	r3, r2
 8022d4e:	d901      	bls.n	8022d54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8022d50:	2303      	movs	r3, #3
 8022d52:	e034      	b.n	8022dbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022d54:	4b1d      	ldr	r3, [pc, #116]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022d58:	f003 0302 	and.w	r3, r3, #2
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d0ee      	beq.n	8022d3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8022d60:	687b      	ldr	r3, [r7, #4]
 8022d62:	68db      	ldr	r3, [r3, #12]
 8022d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022d6c:	d10d      	bne.n	8022d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8022d6e:	4b17      	ldr	r3, [pc, #92]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d70:	689b      	ldr	r3, [r3, #8]
 8022d72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	68db      	ldr	r3, [r3, #12]
 8022d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8022d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022d82:	4912      	ldr	r1, [pc, #72]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d84:	4313      	orrs	r3, r2
 8022d86:	608b      	str	r3, [r1, #8]
 8022d88:	e005      	b.n	8022d96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8022d8a:	4b10      	ldr	r3, [pc, #64]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d8c:	689b      	ldr	r3, [r3, #8]
 8022d8e:	4a0f      	ldr	r2, [pc, #60]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8022d94:	6093      	str	r3, [r2, #8]
 8022d96:	4b0d      	ldr	r3, [pc, #52]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8022d9a:	687b      	ldr	r3, [r7, #4]
 8022d9c:	68db      	ldr	r3, [r3, #12]
 8022d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022da2:	490a      	ldr	r1, [pc, #40]	; (8022dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8022da4:	4313      	orrs	r3, r2
 8022da6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	f003 0308 	and.w	r3, r3, #8
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	d003      	beq.n	8022dbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	7c1a      	ldrb	r2, [r3, #16]
 8022db8:	4b07      	ldr	r3, [pc, #28]	; (8022dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8022dba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8022dbc:	2300      	movs	r3, #0
}
 8022dbe:	4618      	mov	r0, r3
 8022dc0:	3718      	adds	r7, #24
 8022dc2:	46bd      	mov	sp, r7
 8022dc4:	bd80      	pop	{r7, pc}
 8022dc6:	bf00      	nop
 8022dc8:	42470068 	.word	0x42470068
 8022dcc:	40023800 	.word	0x40023800
 8022dd0:	40007000 	.word	0x40007000
 8022dd4:	42470e40 	.word	0x42470e40
 8022dd8:	424711e0 	.word	0x424711e0

08022ddc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8022ddc:	b580      	push	{r7, lr}
 8022dde:	b084      	sub	sp, #16
 8022de0:	af00      	add	r7, sp, #0
 8022de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8022de4:	2301      	movs	r3, #1
 8022de6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	d101      	bne.n	8022df2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8022dee:	2301      	movs	r3, #1
 8022df0:	e073      	b.n	8022eda <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8022df2:	687b      	ldr	r3, [r7, #4]
 8022df4:	7f5b      	ldrb	r3, [r3, #29]
 8022df6:	b2db      	uxtb	r3, r3
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d105      	bne.n	8022e08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	2200      	movs	r2, #0
 8022e00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8022e02:	6878      	ldr	r0, [r7, #4]
 8022e04:	f7fe fb74 	bl	80214f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	2202      	movs	r2, #2
 8022e0c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	68db      	ldr	r3, [r3, #12]
 8022e14:	f003 0310 	and.w	r3, r3, #16
 8022e18:	2b10      	cmp	r3, #16
 8022e1a:	d055      	beq.n	8022ec8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8022e1c:	687b      	ldr	r3, [r7, #4]
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	22ca      	movs	r2, #202	; 0xca
 8022e22:	625a      	str	r2, [r3, #36]	; 0x24
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	2253      	movs	r2, #83	; 0x53
 8022e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8022e2c:	6878      	ldr	r0, [r7, #4]
 8022e2e:	f000 f87f 	bl	8022f30 <RTC_EnterInitMode>
 8022e32:	4603      	mov	r3, r0
 8022e34:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8022e36:	7bfb      	ldrb	r3, [r7, #15]
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d12c      	bne.n	8022e96 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	681b      	ldr	r3, [r3, #0]
 8022e40:	689b      	ldr	r3, [r3, #8]
 8022e42:	687a      	ldr	r2, [r7, #4]
 8022e44:	6812      	ldr	r2, [r2, #0]
 8022e46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022e4e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	681b      	ldr	r3, [r3, #0]
 8022e54:	6899      	ldr	r1, [r3, #8]
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	685a      	ldr	r2, [r3, #4]
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	691b      	ldr	r3, [r3, #16]
 8022e5e:	431a      	orrs	r2, r3
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	695b      	ldr	r3, [r3, #20]
 8022e64:	431a      	orrs	r2, r3
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	681b      	ldr	r3, [r3, #0]
 8022e6a:	430a      	orrs	r2, r1
 8022e6c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	681b      	ldr	r3, [r3, #0]
 8022e72:	687a      	ldr	r2, [r7, #4]
 8022e74:	68d2      	ldr	r2, [r2, #12]
 8022e76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	681b      	ldr	r3, [r3, #0]
 8022e7c:	6919      	ldr	r1, [r3, #16]
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	689b      	ldr	r3, [r3, #8]
 8022e82:	041a      	lsls	r2, r3, #16
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	430a      	orrs	r2, r1
 8022e8a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8022e8c:	6878      	ldr	r0, [r7, #4]
 8022e8e:	f000 f886 	bl	8022f9e <RTC_ExitInitMode>
 8022e92:	4603      	mov	r3, r0
 8022e94:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8022e96:	7bfb      	ldrb	r3, [r7, #15]
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	d110      	bne.n	8022ebe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8022eaa:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	699a      	ldr	r2, [r3, #24]
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	681b      	ldr	r3, [r3, #0]
 8022eba:	430a      	orrs	r2, r1
 8022ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	681b      	ldr	r3, [r3, #0]
 8022ec2:	22ff      	movs	r2, #255	; 0xff
 8022ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8022ec6:	e001      	b.n	8022ecc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8022ec8:	2300      	movs	r3, #0
 8022eca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8022ecc:	7bfb      	ldrb	r3, [r7, #15]
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d102      	bne.n	8022ed8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	2201      	movs	r2, #1
 8022ed6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8022ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8022eda:	4618      	mov	r0, r3
 8022edc:	3710      	adds	r7, #16
 8022ede:	46bd      	mov	sp, r7
 8022ee0:	bd80      	pop	{r7, pc}
	...

08022ee4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8022ee4:	b580      	push	{r7, lr}
 8022ee6:	b084      	sub	sp, #16
 8022ee8:	af00      	add	r7, sp, #0
 8022eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022eec:	2300      	movs	r3, #0
 8022eee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	681b      	ldr	r3, [r3, #0]
 8022ef4:	4a0d      	ldr	r2, [pc, #52]	; (8022f2c <HAL_RTC_WaitForSynchro+0x48>)
 8022ef6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8022ef8:	f7fe fedc 	bl	8021cb4 <HAL_GetTick>
 8022efc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8022efe:	e009      	b.n	8022f14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8022f00:	f7fe fed8 	bl	8021cb4 <HAL_GetTick>
 8022f04:	4602      	mov	r2, r0
 8022f06:	68fb      	ldr	r3, [r7, #12]
 8022f08:	1ad3      	subs	r3, r2, r3
 8022f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8022f0e:	d901      	bls.n	8022f14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8022f10:	2303      	movs	r3, #3
 8022f12:	e007      	b.n	8022f24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	68db      	ldr	r3, [r3, #12]
 8022f1a:	f003 0320 	and.w	r3, r3, #32
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	d0ee      	beq.n	8022f00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8022f22:	2300      	movs	r3, #0
}
 8022f24:	4618      	mov	r0, r3
 8022f26:	3710      	adds	r7, #16
 8022f28:	46bd      	mov	sp, r7
 8022f2a:	bd80      	pop	{r7, pc}
 8022f2c:	00013f5f 	.word	0x00013f5f

08022f30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8022f30:	b580      	push	{r7, lr}
 8022f32:	b084      	sub	sp, #16
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022f38:	2300      	movs	r3, #0
 8022f3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8022f3c:	2300      	movs	r3, #0
 8022f3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	68db      	ldr	r3, [r3, #12]
 8022f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f4a:	2b00      	cmp	r3, #0
 8022f4c:	d122      	bne.n	8022f94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8022f4e:	687b      	ldr	r3, [r7, #4]
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	68da      	ldr	r2, [r3, #12]
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022f5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8022f5e:	f7fe fea9 	bl	8021cb4 <HAL_GetTick>
 8022f62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8022f64:	e00c      	b.n	8022f80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8022f66:	f7fe fea5 	bl	8021cb4 <HAL_GetTick>
 8022f6a:	4602      	mov	r2, r0
 8022f6c:	68bb      	ldr	r3, [r7, #8]
 8022f6e:	1ad3      	subs	r3, r2, r3
 8022f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8022f74:	d904      	bls.n	8022f80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	2204      	movs	r2, #4
 8022f7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8022f7c:	2301      	movs	r3, #1
 8022f7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	681b      	ldr	r3, [r3, #0]
 8022f84:	68db      	ldr	r3, [r3, #12]
 8022f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	d102      	bne.n	8022f94 <RTC_EnterInitMode+0x64>
 8022f8e:	7bfb      	ldrb	r3, [r7, #15]
 8022f90:	2b01      	cmp	r3, #1
 8022f92:	d1e8      	bne.n	8022f66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8022f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8022f96:	4618      	mov	r0, r3
 8022f98:	3710      	adds	r7, #16
 8022f9a:	46bd      	mov	sp, r7
 8022f9c:	bd80      	pop	{r7, pc}

08022f9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8022f9e:	b580      	push	{r7, lr}
 8022fa0:	b084      	sub	sp, #16
 8022fa2:	af00      	add	r7, sp, #0
 8022fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022fa6:	2300      	movs	r3, #0
 8022fa8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	681b      	ldr	r3, [r3, #0]
 8022fae:	68da      	ldr	r2, [r3, #12]
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	681b      	ldr	r3, [r3, #0]
 8022fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022fb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	681b      	ldr	r3, [r3, #0]
 8022fbe:	689b      	ldr	r3, [r3, #8]
 8022fc0:	f003 0320 	and.w	r3, r3, #32
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d10a      	bne.n	8022fde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8022fc8:	6878      	ldr	r0, [r7, #4]
 8022fca:	f7ff ff8b 	bl	8022ee4 <HAL_RTC_WaitForSynchro>
 8022fce:	4603      	mov	r3, r0
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	d004      	beq.n	8022fde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	2204      	movs	r2, #4
 8022fd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8022fda:	2301      	movs	r3, #1
 8022fdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8022fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8022fe0:	4618      	mov	r0, r3
 8022fe2:	3710      	adds	r7, #16
 8022fe4:	46bd      	mov	sp, r7
 8022fe6:	bd80      	pop	{r7, pc}

08022fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8022fe8:	b580      	push	{r7, lr}
 8022fea:	b082      	sub	sp, #8
 8022fec:	af00      	add	r7, sp, #0
 8022fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d101      	bne.n	8022ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8022ff6:	2301      	movs	r3, #1
 8022ff8:	e041      	b.n	802307e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023000:	b2db      	uxtb	r3, r3
 8023002:	2b00      	cmp	r3, #0
 8023004:	d106      	bne.n	8023014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	2200      	movs	r2, #0
 802300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802300e:	6878      	ldr	r0, [r7, #4]
 8023010:	f7fe fce4 	bl	80219dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	2202      	movs	r2, #2
 8023018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	681a      	ldr	r2, [r3, #0]
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	3304      	adds	r3, #4
 8023024:	4619      	mov	r1, r3
 8023026:	4610      	mov	r0, r2
 8023028:	f000 fbf6 	bl	8023818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	2201      	movs	r2, #1
 8023030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8023034:	687b      	ldr	r3, [r7, #4]
 8023036:	2201      	movs	r2, #1
 8023038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	2201      	movs	r2, #1
 8023040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	2201      	movs	r2, #1
 8023048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	2201      	movs	r2, #1
 8023050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	2201      	movs	r2, #1
 8023058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802305c:	687b      	ldr	r3, [r7, #4]
 802305e:	2201      	movs	r2, #1
 8023060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	2201      	movs	r2, #1
 8023068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	2201      	movs	r2, #1
 8023070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	2201      	movs	r2, #1
 8023078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802307c:	2300      	movs	r3, #0
}
 802307e:	4618      	mov	r0, r3
 8023080:	3708      	adds	r7, #8
 8023082:	46bd      	mov	sp, r7
 8023084:	bd80      	pop	{r7, pc}
	...

08023088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8023088:	b580      	push	{r7, lr}
 802308a:	b084      	sub	sp, #16
 802308c:	af00      	add	r7, sp, #0
 802308e:	6078      	str	r0, [r7, #4]
 8023090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8023092:	683b      	ldr	r3, [r7, #0]
 8023094:	2b00      	cmp	r3, #0
 8023096:	d109      	bne.n	80230ac <HAL_TIM_PWM_Start+0x24>
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802309e:	b2db      	uxtb	r3, r3
 80230a0:	2b01      	cmp	r3, #1
 80230a2:	bf14      	ite	ne
 80230a4:	2301      	movne	r3, #1
 80230a6:	2300      	moveq	r3, #0
 80230a8:	b2db      	uxtb	r3, r3
 80230aa:	e022      	b.n	80230f2 <HAL_TIM_PWM_Start+0x6a>
 80230ac:	683b      	ldr	r3, [r7, #0]
 80230ae:	2b04      	cmp	r3, #4
 80230b0:	d109      	bne.n	80230c6 <HAL_TIM_PWM_Start+0x3e>
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80230b8:	b2db      	uxtb	r3, r3
 80230ba:	2b01      	cmp	r3, #1
 80230bc:	bf14      	ite	ne
 80230be:	2301      	movne	r3, #1
 80230c0:	2300      	moveq	r3, #0
 80230c2:	b2db      	uxtb	r3, r3
 80230c4:	e015      	b.n	80230f2 <HAL_TIM_PWM_Start+0x6a>
 80230c6:	683b      	ldr	r3, [r7, #0]
 80230c8:	2b08      	cmp	r3, #8
 80230ca:	d109      	bne.n	80230e0 <HAL_TIM_PWM_Start+0x58>
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80230d2:	b2db      	uxtb	r3, r3
 80230d4:	2b01      	cmp	r3, #1
 80230d6:	bf14      	ite	ne
 80230d8:	2301      	movne	r3, #1
 80230da:	2300      	moveq	r3, #0
 80230dc:	b2db      	uxtb	r3, r3
 80230de:	e008      	b.n	80230f2 <HAL_TIM_PWM_Start+0x6a>
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80230e6:	b2db      	uxtb	r3, r3
 80230e8:	2b01      	cmp	r3, #1
 80230ea:	bf14      	ite	ne
 80230ec:	2301      	movne	r3, #1
 80230ee:	2300      	moveq	r3, #0
 80230f0:	b2db      	uxtb	r3, r3
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d001      	beq.n	80230fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80230f6:	2301      	movs	r3, #1
 80230f8:	e068      	b.n	80231cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80230fa:	683b      	ldr	r3, [r7, #0]
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d104      	bne.n	802310a <HAL_TIM_PWM_Start+0x82>
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	2202      	movs	r2, #2
 8023104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8023108:	e013      	b.n	8023132 <HAL_TIM_PWM_Start+0xaa>
 802310a:	683b      	ldr	r3, [r7, #0]
 802310c:	2b04      	cmp	r3, #4
 802310e:	d104      	bne.n	802311a <HAL_TIM_PWM_Start+0x92>
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	2202      	movs	r2, #2
 8023114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8023118:	e00b      	b.n	8023132 <HAL_TIM_PWM_Start+0xaa>
 802311a:	683b      	ldr	r3, [r7, #0]
 802311c:	2b08      	cmp	r3, #8
 802311e:	d104      	bne.n	802312a <HAL_TIM_PWM_Start+0xa2>
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	2202      	movs	r2, #2
 8023124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8023128:	e003      	b.n	8023132 <HAL_TIM_PWM_Start+0xaa>
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	2202      	movs	r2, #2
 802312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	2201      	movs	r2, #1
 8023138:	6839      	ldr	r1, [r7, #0]
 802313a:	4618      	mov	r0, r3
 802313c:	f000 fd84 	bl	8023c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	4a23      	ldr	r2, [pc, #140]	; (80231d4 <HAL_TIM_PWM_Start+0x14c>)
 8023146:	4293      	cmp	r3, r2
 8023148:	d107      	bne.n	802315a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8023158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	4a1d      	ldr	r2, [pc, #116]	; (80231d4 <HAL_TIM_PWM_Start+0x14c>)
 8023160:	4293      	cmp	r3, r2
 8023162:	d018      	beq.n	8023196 <HAL_TIM_PWM_Start+0x10e>
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	681b      	ldr	r3, [r3, #0]
 8023168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802316c:	d013      	beq.n	8023196 <HAL_TIM_PWM_Start+0x10e>
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	681b      	ldr	r3, [r3, #0]
 8023172:	4a19      	ldr	r2, [pc, #100]	; (80231d8 <HAL_TIM_PWM_Start+0x150>)
 8023174:	4293      	cmp	r3, r2
 8023176:	d00e      	beq.n	8023196 <HAL_TIM_PWM_Start+0x10e>
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	4a17      	ldr	r2, [pc, #92]	; (80231dc <HAL_TIM_PWM_Start+0x154>)
 802317e:	4293      	cmp	r3, r2
 8023180:	d009      	beq.n	8023196 <HAL_TIM_PWM_Start+0x10e>
 8023182:	687b      	ldr	r3, [r7, #4]
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	4a16      	ldr	r2, [pc, #88]	; (80231e0 <HAL_TIM_PWM_Start+0x158>)
 8023188:	4293      	cmp	r3, r2
 802318a:	d004      	beq.n	8023196 <HAL_TIM_PWM_Start+0x10e>
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	4a14      	ldr	r2, [pc, #80]	; (80231e4 <HAL_TIM_PWM_Start+0x15c>)
 8023192:	4293      	cmp	r3, r2
 8023194:	d111      	bne.n	80231ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8023196:	687b      	ldr	r3, [r7, #4]
 8023198:	681b      	ldr	r3, [r3, #0]
 802319a:	689b      	ldr	r3, [r3, #8]
 802319c:	f003 0307 	and.w	r3, r3, #7
 80231a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	2b06      	cmp	r3, #6
 80231a6:	d010      	beq.n	80231ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	681a      	ldr	r2, [r3, #0]
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	f042 0201 	orr.w	r2, r2, #1
 80231b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80231b8:	e007      	b.n	80231ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	681a      	ldr	r2, [r3, #0]
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	681b      	ldr	r3, [r3, #0]
 80231c4:	f042 0201 	orr.w	r2, r2, #1
 80231c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80231ca:	2300      	movs	r3, #0
}
 80231cc:	4618      	mov	r0, r3
 80231ce:	3710      	adds	r7, #16
 80231d0:	46bd      	mov	sp, r7
 80231d2:	bd80      	pop	{r7, pc}
 80231d4:	40010000 	.word	0x40010000
 80231d8:	40000400 	.word	0x40000400
 80231dc:	40000800 	.word	0x40000800
 80231e0:	40000c00 	.word	0x40000c00
 80231e4:	40014000 	.word	0x40014000

080231e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80231e8:	b580      	push	{r7, lr}
 80231ea:	b086      	sub	sp, #24
 80231ec:	af00      	add	r7, sp, #0
 80231ee:	6078      	str	r0, [r7, #4]
 80231f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d101      	bne.n	80231fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80231f8:	2301      	movs	r3, #1
 80231fa:	e097      	b.n	802332c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023202:	b2db      	uxtb	r3, r3
 8023204:	2b00      	cmp	r3, #0
 8023206:	d106      	bne.n	8023216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	2200      	movs	r2, #0
 802320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8023210:	6878      	ldr	r0, [r7, #4]
 8023212:	f7fe fb93 	bl	802193c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023216:	687b      	ldr	r3, [r7, #4]
 8023218:	2202      	movs	r2, #2
 802321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	689b      	ldr	r3, [r3, #8]
 8023224:	687a      	ldr	r2, [r7, #4]
 8023226:	6812      	ldr	r2, [r2, #0]
 8023228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802322c:	f023 0307 	bic.w	r3, r3, #7
 8023230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	681a      	ldr	r2, [r3, #0]
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	3304      	adds	r3, #4
 802323a:	4619      	mov	r1, r3
 802323c:	4610      	mov	r0, r2
 802323e:	f000 faeb 	bl	8023818 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	689b      	ldr	r3, [r3, #8]
 8023248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	699b      	ldr	r3, [r3, #24]
 8023250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8023252:	687b      	ldr	r3, [r7, #4]
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	6a1b      	ldr	r3, [r3, #32]
 8023258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802325a:	683b      	ldr	r3, [r7, #0]
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	697a      	ldr	r2, [r7, #20]
 8023260:	4313      	orrs	r3, r2
 8023262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8023264:	693b      	ldr	r3, [r7, #16]
 8023266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802326a:	f023 0303 	bic.w	r3, r3, #3
 802326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8023270:	683b      	ldr	r3, [r7, #0]
 8023272:	689a      	ldr	r2, [r3, #8]
 8023274:	683b      	ldr	r3, [r7, #0]
 8023276:	699b      	ldr	r3, [r3, #24]
 8023278:	021b      	lsls	r3, r3, #8
 802327a:	4313      	orrs	r3, r2
 802327c:	693a      	ldr	r2, [r7, #16]
 802327e:	4313      	orrs	r3, r2
 8023280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8023282:	693b      	ldr	r3, [r7, #16]
 8023284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8023288:	f023 030c 	bic.w	r3, r3, #12
 802328c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 802328e:	693b      	ldr	r3, [r7, #16]
 8023290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8023294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8023298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802329a:	683b      	ldr	r3, [r7, #0]
 802329c:	68da      	ldr	r2, [r3, #12]
 802329e:	683b      	ldr	r3, [r7, #0]
 80232a0:	69db      	ldr	r3, [r3, #28]
 80232a2:	021b      	lsls	r3, r3, #8
 80232a4:	4313      	orrs	r3, r2
 80232a6:	693a      	ldr	r2, [r7, #16]
 80232a8:	4313      	orrs	r3, r2
 80232aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80232ac:	683b      	ldr	r3, [r7, #0]
 80232ae:	691b      	ldr	r3, [r3, #16]
 80232b0:	011a      	lsls	r2, r3, #4
 80232b2:	683b      	ldr	r3, [r7, #0]
 80232b4:	6a1b      	ldr	r3, [r3, #32]
 80232b6:	031b      	lsls	r3, r3, #12
 80232b8:	4313      	orrs	r3, r2
 80232ba:	693a      	ldr	r2, [r7, #16]
 80232bc:	4313      	orrs	r3, r2
 80232be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80232c0:	68fb      	ldr	r3, [r7, #12]
 80232c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80232c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80232c8:	68fb      	ldr	r3, [r7, #12]
 80232ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80232ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80232d0:	683b      	ldr	r3, [r7, #0]
 80232d2:	685a      	ldr	r2, [r3, #4]
 80232d4:	683b      	ldr	r3, [r7, #0]
 80232d6:	695b      	ldr	r3, [r3, #20]
 80232d8:	011b      	lsls	r3, r3, #4
 80232da:	4313      	orrs	r3, r2
 80232dc:	68fa      	ldr	r2, [r7, #12]
 80232de:	4313      	orrs	r3, r2
 80232e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	697a      	ldr	r2, [r7, #20]
 80232e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	693a      	ldr	r2, [r7, #16]
 80232f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	681b      	ldr	r3, [r3, #0]
 80232f6:	68fa      	ldr	r2, [r7, #12]
 80232f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	2201      	movs	r2, #1
 80232fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	2201      	movs	r2, #1
 8023306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	2201      	movs	r2, #1
 802330e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	2201      	movs	r2, #1
 8023316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	2201      	movs	r2, #1
 802331e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	2201      	movs	r2, #1
 8023326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802332a:	2300      	movs	r3, #0
}
 802332c:	4618      	mov	r0, r3
 802332e:	3718      	adds	r7, #24
 8023330:	46bd      	mov	sp, r7
 8023332:	bd80      	pop	{r7, pc}

08023334 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8023334:	b580      	push	{r7, lr}
 8023336:	b084      	sub	sp, #16
 8023338:	af00      	add	r7, sp, #0
 802333a:	6078      	str	r0, [r7, #4]
 802333c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8023344:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 802334c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8023354:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802335c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 802335e:	683b      	ldr	r3, [r7, #0]
 8023360:	2b00      	cmp	r3, #0
 8023362:	d110      	bne.n	8023386 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8023364:	7bfb      	ldrb	r3, [r7, #15]
 8023366:	2b01      	cmp	r3, #1
 8023368:	d102      	bne.n	8023370 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 802336a:	7b7b      	ldrb	r3, [r7, #13]
 802336c:	2b01      	cmp	r3, #1
 802336e:	d001      	beq.n	8023374 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8023370:	2301      	movs	r3, #1
 8023372:	e069      	b.n	8023448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	2202      	movs	r2, #2
 8023378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	2202      	movs	r2, #2
 8023380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8023384:	e031      	b.n	80233ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8023386:	683b      	ldr	r3, [r7, #0]
 8023388:	2b04      	cmp	r3, #4
 802338a:	d110      	bne.n	80233ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 802338c:	7bbb      	ldrb	r3, [r7, #14]
 802338e:	2b01      	cmp	r3, #1
 8023390:	d102      	bne.n	8023398 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8023392:	7b3b      	ldrb	r3, [r7, #12]
 8023394:	2b01      	cmp	r3, #1
 8023396:	d001      	beq.n	802339c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8023398:	2301      	movs	r3, #1
 802339a:	e055      	b.n	8023448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	2202      	movs	r2, #2
 80233a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	2202      	movs	r2, #2
 80233a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80233ac:	e01d      	b.n	80233ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80233ae:	7bfb      	ldrb	r3, [r7, #15]
 80233b0:	2b01      	cmp	r3, #1
 80233b2:	d108      	bne.n	80233c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80233b4:	7bbb      	ldrb	r3, [r7, #14]
 80233b6:	2b01      	cmp	r3, #1
 80233b8:	d105      	bne.n	80233c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80233ba:	7b7b      	ldrb	r3, [r7, #13]
 80233bc:	2b01      	cmp	r3, #1
 80233be:	d102      	bne.n	80233c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80233c0:	7b3b      	ldrb	r3, [r7, #12]
 80233c2:	2b01      	cmp	r3, #1
 80233c4:	d001      	beq.n	80233ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80233c6:	2301      	movs	r3, #1
 80233c8:	e03e      	b.n	8023448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	2202      	movs	r2, #2
 80233ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	2202      	movs	r2, #2
 80233d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	2202      	movs	r2, #2
 80233de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	2202      	movs	r2, #2
 80233e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80233ea:	683b      	ldr	r3, [r7, #0]
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d003      	beq.n	80233f8 <HAL_TIM_Encoder_Start+0xc4>
 80233f0:	683b      	ldr	r3, [r7, #0]
 80233f2:	2b04      	cmp	r3, #4
 80233f4:	d008      	beq.n	8023408 <HAL_TIM_Encoder_Start+0xd4>
 80233f6:	e00f      	b.n	8023418 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	2201      	movs	r2, #1
 80233fe:	2100      	movs	r1, #0
 8023400:	4618      	mov	r0, r3
 8023402:	f000 fc21 	bl	8023c48 <TIM_CCxChannelCmd>
      break;
 8023406:	e016      	b.n	8023436 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8023408:	687b      	ldr	r3, [r7, #4]
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	2201      	movs	r2, #1
 802340e:	2104      	movs	r1, #4
 8023410:	4618      	mov	r0, r3
 8023412:	f000 fc19 	bl	8023c48 <TIM_CCxChannelCmd>
      break;
 8023416:	e00e      	b.n	8023436 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	681b      	ldr	r3, [r3, #0]
 802341c:	2201      	movs	r2, #1
 802341e:	2100      	movs	r1, #0
 8023420:	4618      	mov	r0, r3
 8023422:	f000 fc11 	bl	8023c48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8023426:	687b      	ldr	r3, [r7, #4]
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	2201      	movs	r2, #1
 802342c:	2104      	movs	r1, #4
 802342e:	4618      	mov	r0, r3
 8023430:	f000 fc0a 	bl	8023c48 <TIM_CCxChannelCmd>
      break;
 8023434:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	681a      	ldr	r2, [r3, #0]
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	f042 0201 	orr.w	r2, r2, #1
 8023444:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8023446:	2300      	movs	r3, #0
}
 8023448:	4618      	mov	r0, r3
 802344a:	3710      	adds	r7, #16
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}

08023450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8023450:	b580      	push	{r7, lr}
 8023452:	b084      	sub	sp, #16
 8023454:	af00      	add	r7, sp, #0
 8023456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	68db      	ldr	r3, [r3, #12]
 802345e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	691b      	ldr	r3, [r3, #16]
 8023466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8023468:	68bb      	ldr	r3, [r7, #8]
 802346a:	f003 0302 	and.w	r3, r3, #2
 802346e:	2b00      	cmp	r3, #0
 8023470:	d020      	beq.n	80234b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8023472:	68fb      	ldr	r3, [r7, #12]
 8023474:	f003 0302 	and.w	r3, r3, #2
 8023478:	2b00      	cmp	r3, #0
 802347a:	d01b      	beq.n	80234b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	681b      	ldr	r3, [r3, #0]
 8023480:	f06f 0202 	mvn.w	r2, #2
 8023484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	2201      	movs	r2, #1
 802348a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	699b      	ldr	r3, [r3, #24]
 8023492:	f003 0303 	and.w	r3, r3, #3
 8023496:	2b00      	cmp	r3, #0
 8023498:	d003      	beq.n	80234a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802349a:	6878      	ldr	r0, [r7, #4]
 802349c:	f000 f99e 	bl	80237dc <HAL_TIM_IC_CaptureCallback>
 80234a0:	e005      	b.n	80234ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80234a2:	6878      	ldr	r0, [r7, #4]
 80234a4:	f000 f990 	bl	80237c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80234a8:	6878      	ldr	r0, [r7, #4]
 80234aa:	f000 f9a1 	bl	80237f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	2200      	movs	r2, #0
 80234b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80234b4:	68bb      	ldr	r3, [r7, #8]
 80234b6:	f003 0304 	and.w	r3, r3, #4
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d020      	beq.n	8023500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80234be:	68fb      	ldr	r3, [r7, #12]
 80234c0:	f003 0304 	and.w	r3, r3, #4
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d01b      	beq.n	8023500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	f06f 0204 	mvn.w	r2, #4
 80234d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	2202      	movs	r2, #2
 80234d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	699b      	ldr	r3, [r3, #24]
 80234de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80234e2:	2b00      	cmp	r3, #0
 80234e4:	d003      	beq.n	80234ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80234e6:	6878      	ldr	r0, [r7, #4]
 80234e8:	f000 f978 	bl	80237dc <HAL_TIM_IC_CaptureCallback>
 80234ec:	e005      	b.n	80234fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80234ee:	6878      	ldr	r0, [r7, #4]
 80234f0:	f000 f96a 	bl	80237c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80234f4:	6878      	ldr	r0, [r7, #4]
 80234f6:	f000 f97b 	bl	80237f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	2200      	movs	r2, #0
 80234fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8023500:	68bb      	ldr	r3, [r7, #8]
 8023502:	f003 0308 	and.w	r3, r3, #8
 8023506:	2b00      	cmp	r3, #0
 8023508:	d020      	beq.n	802354c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 802350a:	68fb      	ldr	r3, [r7, #12]
 802350c:	f003 0308 	and.w	r3, r3, #8
 8023510:	2b00      	cmp	r3, #0
 8023512:	d01b      	beq.n	802354c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	f06f 0208 	mvn.w	r2, #8
 802351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	2204      	movs	r2, #4
 8023522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	69db      	ldr	r3, [r3, #28]
 802352a:	f003 0303 	and.w	r3, r3, #3
 802352e:	2b00      	cmp	r3, #0
 8023530:	d003      	beq.n	802353a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023532:	6878      	ldr	r0, [r7, #4]
 8023534:	f000 f952 	bl	80237dc <HAL_TIM_IC_CaptureCallback>
 8023538:	e005      	b.n	8023546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802353a:	6878      	ldr	r0, [r7, #4]
 802353c:	f000 f944 	bl	80237c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023540:	6878      	ldr	r0, [r7, #4]
 8023542:	f000 f955 	bl	80237f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	2200      	movs	r2, #0
 802354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 802354c:	68bb      	ldr	r3, [r7, #8]
 802354e:	f003 0310 	and.w	r3, r3, #16
 8023552:	2b00      	cmp	r3, #0
 8023554:	d020      	beq.n	8023598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8023556:	68fb      	ldr	r3, [r7, #12]
 8023558:	f003 0310 	and.w	r3, r3, #16
 802355c:	2b00      	cmp	r3, #0
 802355e:	d01b      	beq.n	8023598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	f06f 0210 	mvn.w	r2, #16
 8023568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	2208      	movs	r2, #8
 802356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8023570:	687b      	ldr	r3, [r7, #4]
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	69db      	ldr	r3, [r3, #28]
 8023576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802357a:	2b00      	cmp	r3, #0
 802357c:	d003      	beq.n	8023586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802357e:	6878      	ldr	r0, [r7, #4]
 8023580:	f000 f92c 	bl	80237dc <HAL_TIM_IC_CaptureCallback>
 8023584:	e005      	b.n	8023592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023586:	6878      	ldr	r0, [r7, #4]
 8023588:	f000 f91e 	bl	80237c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802358c:	6878      	ldr	r0, [r7, #4]
 802358e:	f000 f92f 	bl	80237f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	2200      	movs	r2, #0
 8023596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8023598:	68bb      	ldr	r3, [r7, #8]
 802359a:	f003 0301 	and.w	r3, r3, #1
 802359e:	2b00      	cmp	r3, #0
 80235a0:	d00c      	beq.n	80235bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	f003 0301 	and.w	r3, r3, #1
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	d007      	beq.n	80235bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80235ac:	687b      	ldr	r3, [r7, #4]
 80235ae:	681b      	ldr	r3, [r3, #0]
 80235b0:	f06f 0201 	mvn.w	r2, #1
 80235b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80235b6:	6878      	ldr	r0, [r7, #4]
 80235b8:	f000 f8fc 	bl	80237b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80235bc:	68bb      	ldr	r3, [r7, #8]
 80235be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	d00c      	beq.n	80235e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80235c6:	68fb      	ldr	r3, [r7, #12]
 80235c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d007      	beq.n	80235e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80235d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80235da:	6878      	ldr	r0, [r7, #4]
 80235dc:	f000 fbd2 	bl	8023d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80235e0:	68bb      	ldr	r3, [r7, #8]
 80235e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	d00c      	beq.n	8023604 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d007      	beq.n	8023604 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	681b      	ldr	r3, [r3, #0]
 80235f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80235fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80235fe:	6878      	ldr	r0, [r7, #4]
 8023600:	f000 f900 	bl	8023804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8023604:	68bb      	ldr	r3, [r7, #8]
 8023606:	f003 0320 	and.w	r3, r3, #32
 802360a:	2b00      	cmp	r3, #0
 802360c:	d00c      	beq.n	8023628 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 802360e:	68fb      	ldr	r3, [r7, #12]
 8023610:	f003 0320 	and.w	r3, r3, #32
 8023614:	2b00      	cmp	r3, #0
 8023616:	d007      	beq.n	8023628 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	f06f 0220 	mvn.w	r2, #32
 8023620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8023622:	6878      	ldr	r0, [r7, #4]
 8023624:	f000 fba4 	bl	8023d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8023628:	bf00      	nop
 802362a:	3710      	adds	r7, #16
 802362c:	46bd      	mov	sp, r7
 802362e:	bd80      	pop	{r7, pc}

08023630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8023630:	b580      	push	{r7, lr}
 8023632:	b086      	sub	sp, #24
 8023634:	af00      	add	r7, sp, #0
 8023636:	60f8      	str	r0, [r7, #12]
 8023638:	60b9      	str	r1, [r7, #8]
 802363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802363c:	2300      	movs	r3, #0
 802363e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8023640:	68fb      	ldr	r3, [r7, #12]
 8023642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023646:	2b01      	cmp	r3, #1
 8023648:	d101      	bne.n	802364e <HAL_TIM_PWM_ConfigChannel+0x1e>
 802364a:	2302      	movs	r3, #2
 802364c:	e0ae      	b.n	80237ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	2201      	movs	r2, #1
 8023652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8023656:	687b      	ldr	r3, [r7, #4]
 8023658:	2b0c      	cmp	r3, #12
 802365a:	f200 809f 	bhi.w	802379c <HAL_TIM_PWM_ConfigChannel+0x16c>
 802365e:	a201      	add	r2, pc, #4	; (adr r2, 8023664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8023660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023664:	08023699 	.word	0x08023699
 8023668:	0802379d 	.word	0x0802379d
 802366c:	0802379d 	.word	0x0802379d
 8023670:	0802379d 	.word	0x0802379d
 8023674:	080236d9 	.word	0x080236d9
 8023678:	0802379d 	.word	0x0802379d
 802367c:	0802379d 	.word	0x0802379d
 8023680:	0802379d 	.word	0x0802379d
 8023684:	0802371b 	.word	0x0802371b
 8023688:	0802379d 	.word	0x0802379d
 802368c:	0802379d 	.word	0x0802379d
 8023690:	0802379d 	.word	0x0802379d
 8023694:	0802375b 	.word	0x0802375b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8023698:	68fb      	ldr	r3, [r7, #12]
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	68b9      	ldr	r1, [r7, #8]
 802369e:	4618      	mov	r0, r3
 80236a0:	f000 f946 	bl	8023930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	699a      	ldr	r2, [r3, #24]
 80236aa:	68fb      	ldr	r3, [r7, #12]
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	f042 0208 	orr.w	r2, r2, #8
 80236b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80236b4:	68fb      	ldr	r3, [r7, #12]
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	699a      	ldr	r2, [r3, #24]
 80236ba:	68fb      	ldr	r3, [r7, #12]
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	f022 0204 	bic.w	r2, r2, #4
 80236c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80236c4:	68fb      	ldr	r3, [r7, #12]
 80236c6:	681b      	ldr	r3, [r3, #0]
 80236c8:	6999      	ldr	r1, [r3, #24]
 80236ca:	68bb      	ldr	r3, [r7, #8]
 80236cc:	691a      	ldr	r2, [r3, #16]
 80236ce:	68fb      	ldr	r3, [r7, #12]
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	430a      	orrs	r2, r1
 80236d4:	619a      	str	r2, [r3, #24]
      break;
 80236d6:	e064      	b.n	80237a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80236d8:	68fb      	ldr	r3, [r7, #12]
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	68b9      	ldr	r1, [r7, #8]
 80236de:	4618      	mov	r0, r3
 80236e0:	f000 f98c 	bl	80239fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80236e4:	68fb      	ldr	r3, [r7, #12]
 80236e6:	681b      	ldr	r3, [r3, #0]
 80236e8:	699a      	ldr	r2, [r3, #24]
 80236ea:	68fb      	ldr	r3, [r7, #12]
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80236f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80236f4:	68fb      	ldr	r3, [r7, #12]
 80236f6:	681b      	ldr	r3, [r3, #0]
 80236f8:	699a      	ldr	r2, [r3, #24]
 80236fa:	68fb      	ldr	r3, [r7, #12]
 80236fc:	681b      	ldr	r3, [r3, #0]
 80236fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8023704:	68fb      	ldr	r3, [r7, #12]
 8023706:	681b      	ldr	r3, [r3, #0]
 8023708:	6999      	ldr	r1, [r3, #24]
 802370a:	68bb      	ldr	r3, [r7, #8]
 802370c:	691b      	ldr	r3, [r3, #16]
 802370e:	021a      	lsls	r2, r3, #8
 8023710:	68fb      	ldr	r3, [r7, #12]
 8023712:	681b      	ldr	r3, [r3, #0]
 8023714:	430a      	orrs	r2, r1
 8023716:	619a      	str	r2, [r3, #24]
      break;
 8023718:	e043      	b.n	80237a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802371a:	68fb      	ldr	r3, [r7, #12]
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	68b9      	ldr	r1, [r7, #8]
 8023720:	4618      	mov	r0, r3
 8023722:	f000 f9d7 	bl	8023ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8023726:	68fb      	ldr	r3, [r7, #12]
 8023728:	681b      	ldr	r3, [r3, #0]
 802372a:	69da      	ldr	r2, [r3, #28]
 802372c:	68fb      	ldr	r3, [r7, #12]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	f042 0208 	orr.w	r2, r2, #8
 8023734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8023736:	68fb      	ldr	r3, [r7, #12]
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	69da      	ldr	r2, [r3, #28]
 802373c:	68fb      	ldr	r3, [r7, #12]
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	f022 0204 	bic.w	r2, r2, #4
 8023744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8023746:	68fb      	ldr	r3, [r7, #12]
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	69d9      	ldr	r1, [r3, #28]
 802374c:	68bb      	ldr	r3, [r7, #8]
 802374e:	691a      	ldr	r2, [r3, #16]
 8023750:	68fb      	ldr	r3, [r7, #12]
 8023752:	681b      	ldr	r3, [r3, #0]
 8023754:	430a      	orrs	r2, r1
 8023756:	61da      	str	r2, [r3, #28]
      break;
 8023758:	e023      	b.n	80237a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802375a:	68fb      	ldr	r3, [r7, #12]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	68b9      	ldr	r1, [r7, #8]
 8023760:	4618      	mov	r0, r3
 8023762:	f000 fa21 	bl	8023ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8023766:	68fb      	ldr	r3, [r7, #12]
 8023768:	681b      	ldr	r3, [r3, #0]
 802376a:	69da      	ldr	r2, [r3, #28]
 802376c:	68fb      	ldr	r3, [r7, #12]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8023776:	68fb      	ldr	r3, [r7, #12]
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	69da      	ldr	r2, [r3, #28]
 802377c:	68fb      	ldr	r3, [r7, #12]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8023786:	68fb      	ldr	r3, [r7, #12]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	69d9      	ldr	r1, [r3, #28]
 802378c:	68bb      	ldr	r3, [r7, #8]
 802378e:	691b      	ldr	r3, [r3, #16]
 8023790:	021a      	lsls	r2, r3, #8
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	681b      	ldr	r3, [r3, #0]
 8023796:	430a      	orrs	r2, r1
 8023798:	61da      	str	r2, [r3, #28]
      break;
 802379a:	e002      	b.n	80237a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 802379c:	2301      	movs	r3, #1
 802379e:	75fb      	strb	r3, [r7, #23]
      break;
 80237a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80237a2:	68fb      	ldr	r3, [r7, #12]
 80237a4:	2200      	movs	r2, #0
 80237a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80237aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80237ac:	4618      	mov	r0, r3
 80237ae:	3718      	adds	r7, #24
 80237b0:	46bd      	mov	sp, r7
 80237b2:	bd80      	pop	{r7, pc}

080237b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80237b4:	b480      	push	{r7}
 80237b6:	b083      	sub	sp, #12
 80237b8:	af00      	add	r7, sp, #0
 80237ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80237bc:	bf00      	nop
 80237be:	370c      	adds	r7, #12
 80237c0:	46bd      	mov	sp, r7
 80237c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237c6:	4770      	bx	lr

080237c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80237c8:	b480      	push	{r7}
 80237ca:	b083      	sub	sp, #12
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80237d0:	bf00      	nop
 80237d2:	370c      	adds	r7, #12
 80237d4:	46bd      	mov	sp, r7
 80237d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237da:	4770      	bx	lr

080237dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80237dc:	b480      	push	{r7}
 80237de:	b083      	sub	sp, #12
 80237e0:	af00      	add	r7, sp, #0
 80237e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80237e4:	bf00      	nop
 80237e6:	370c      	adds	r7, #12
 80237e8:	46bd      	mov	sp, r7
 80237ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ee:	4770      	bx	lr

080237f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80237f0:	b480      	push	{r7}
 80237f2:	b083      	sub	sp, #12
 80237f4:	af00      	add	r7, sp, #0
 80237f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80237f8:	bf00      	nop
 80237fa:	370c      	adds	r7, #12
 80237fc:	46bd      	mov	sp, r7
 80237fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023802:	4770      	bx	lr

08023804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8023804:	b480      	push	{r7}
 8023806:	b083      	sub	sp, #12
 8023808:	af00      	add	r7, sp, #0
 802380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802380c:	bf00      	nop
 802380e:	370c      	adds	r7, #12
 8023810:	46bd      	mov	sp, r7
 8023812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023816:	4770      	bx	lr

08023818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8023818:	b480      	push	{r7}
 802381a:	b085      	sub	sp, #20
 802381c:	af00      	add	r7, sp, #0
 802381e:	6078      	str	r0, [r7, #4]
 8023820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	4a3a      	ldr	r2, [pc, #232]	; (8023914 <TIM_Base_SetConfig+0xfc>)
 802382c:	4293      	cmp	r3, r2
 802382e:	d00f      	beq.n	8023850 <TIM_Base_SetConfig+0x38>
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023836:	d00b      	beq.n	8023850 <TIM_Base_SetConfig+0x38>
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	4a37      	ldr	r2, [pc, #220]	; (8023918 <TIM_Base_SetConfig+0x100>)
 802383c:	4293      	cmp	r3, r2
 802383e:	d007      	beq.n	8023850 <TIM_Base_SetConfig+0x38>
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	4a36      	ldr	r2, [pc, #216]	; (802391c <TIM_Base_SetConfig+0x104>)
 8023844:	4293      	cmp	r3, r2
 8023846:	d003      	beq.n	8023850 <TIM_Base_SetConfig+0x38>
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	4a35      	ldr	r2, [pc, #212]	; (8023920 <TIM_Base_SetConfig+0x108>)
 802384c:	4293      	cmp	r3, r2
 802384e:	d108      	bne.n	8023862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8023850:	68fb      	ldr	r3, [r7, #12]
 8023852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8023858:	683b      	ldr	r3, [r7, #0]
 802385a:	685b      	ldr	r3, [r3, #4]
 802385c:	68fa      	ldr	r2, [r7, #12]
 802385e:	4313      	orrs	r3, r2
 8023860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8023862:	687b      	ldr	r3, [r7, #4]
 8023864:	4a2b      	ldr	r2, [pc, #172]	; (8023914 <TIM_Base_SetConfig+0xfc>)
 8023866:	4293      	cmp	r3, r2
 8023868:	d01b      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023870:	d017      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	4a28      	ldr	r2, [pc, #160]	; (8023918 <TIM_Base_SetConfig+0x100>)
 8023876:	4293      	cmp	r3, r2
 8023878:	d013      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	4a27      	ldr	r2, [pc, #156]	; (802391c <TIM_Base_SetConfig+0x104>)
 802387e:	4293      	cmp	r3, r2
 8023880:	d00f      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 8023882:	687b      	ldr	r3, [r7, #4]
 8023884:	4a26      	ldr	r2, [pc, #152]	; (8023920 <TIM_Base_SetConfig+0x108>)
 8023886:	4293      	cmp	r3, r2
 8023888:	d00b      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	4a25      	ldr	r2, [pc, #148]	; (8023924 <TIM_Base_SetConfig+0x10c>)
 802388e:	4293      	cmp	r3, r2
 8023890:	d007      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	4a24      	ldr	r2, [pc, #144]	; (8023928 <TIM_Base_SetConfig+0x110>)
 8023896:	4293      	cmp	r3, r2
 8023898:	d003      	beq.n	80238a2 <TIM_Base_SetConfig+0x8a>
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	4a23      	ldr	r2, [pc, #140]	; (802392c <TIM_Base_SetConfig+0x114>)
 802389e:	4293      	cmp	r3, r2
 80238a0:	d108      	bne.n	80238b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80238a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80238aa:	683b      	ldr	r3, [r7, #0]
 80238ac:	68db      	ldr	r3, [r3, #12]
 80238ae:	68fa      	ldr	r2, [r7, #12]
 80238b0:	4313      	orrs	r3, r2
 80238b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80238ba:	683b      	ldr	r3, [r7, #0]
 80238bc:	695b      	ldr	r3, [r3, #20]
 80238be:	4313      	orrs	r3, r2
 80238c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	68fa      	ldr	r2, [r7, #12]
 80238c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80238c8:	683b      	ldr	r3, [r7, #0]
 80238ca:	689a      	ldr	r2, [r3, #8]
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80238d0:	683b      	ldr	r3, [r7, #0]
 80238d2:	681a      	ldr	r2, [r3, #0]
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	4a0e      	ldr	r2, [pc, #56]	; (8023914 <TIM_Base_SetConfig+0xfc>)
 80238dc:	4293      	cmp	r3, r2
 80238de:	d103      	bne.n	80238e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80238e0:	683b      	ldr	r3, [r7, #0]
 80238e2:	691a      	ldr	r2, [r3, #16]
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	2201      	movs	r2, #1
 80238ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	691b      	ldr	r3, [r3, #16]
 80238f2:	f003 0301 	and.w	r3, r3, #1
 80238f6:	2b01      	cmp	r3, #1
 80238f8:	d105      	bne.n	8023906 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	691b      	ldr	r3, [r3, #16]
 80238fe:	f023 0201 	bic.w	r2, r3, #1
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	611a      	str	r2, [r3, #16]
  }
}
 8023906:	bf00      	nop
 8023908:	3714      	adds	r7, #20
 802390a:	46bd      	mov	sp, r7
 802390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023910:	4770      	bx	lr
 8023912:	bf00      	nop
 8023914:	40010000 	.word	0x40010000
 8023918:	40000400 	.word	0x40000400
 802391c:	40000800 	.word	0x40000800
 8023920:	40000c00 	.word	0x40000c00
 8023924:	40014000 	.word	0x40014000
 8023928:	40014400 	.word	0x40014400
 802392c:	40014800 	.word	0x40014800

08023930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8023930:	b480      	push	{r7}
 8023932:	b087      	sub	sp, #28
 8023934:	af00      	add	r7, sp, #0
 8023936:	6078      	str	r0, [r7, #4]
 8023938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	6a1b      	ldr	r3, [r3, #32]
 802393e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	6a1b      	ldr	r3, [r3, #32]
 8023944:	f023 0201 	bic.w	r2, r3, #1
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	685b      	ldr	r3, [r3, #4]
 8023950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	699b      	ldr	r3, [r3, #24]
 8023956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8023958:	68fb      	ldr	r3, [r7, #12]
 802395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8023960:	68fb      	ldr	r3, [r7, #12]
 8023962:	f023 0303 	bic.w	r3, r3, #3
 8023966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8023968:	683b      	ldr	r3, [r7, #0]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	68fa      	ldr	r2, [r7, #12]
 802396e:	4313      	orrs	r3, r2
 8023970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8023972:	697b      	ldr	r3, [r7, #20]
 8023974:	f023 0302 	bic.w	r3, r3, #2
 8023978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802397a:	683b      	ldr	r3, [r7, #0]
 802397c:	689b      	ldr	r3, [r3, #8]
 802397e:	697a      	ldr	r2, [r7, #20]
 8023980:	4313      	orrs	r3, r2
 8023982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	4a1c      	ldr	r2, [pc, #112]	; (80239f8 <TIM_OC1_SetConfig+0xc8>)
 8023988:	4293      	cmp	r3, r2
 802398a:	d10c      	bne.n	80239a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802398c:	697b      	ldr	r3, [r7, #20]
 802398e:	f023 0308 	bic.w	r3, r3, #8
 8023992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8023994:	683b      	ldr	r3, [r7, #0]
 8023996:	68db      	ldr	r3, [r3, #12]
 8023998:	697a      	ldr	r2, [r7, #20]
 802399a:	4313      	orrs	r3, r2
 802399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802399e:	697b      	ldr	r3, [r7, #20]
 80239a0:	f023 0304 	bic.w	r3, r3, #4
 80239a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	4a13      	ldr	r2, [pc, #76]	; (80239f8 <TIM_OC1_SetConfig+0xc8>)
 80239aa:	4293      	cmp	r3, r2
 80239ac:	d111      	bne.n	80239d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80239ae:	693b      	ldr	r3, [r7, #16]
 80239b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80239b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80239b6:	693b      	ldr	r3, [r7, #16]
 80239b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80239bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80239be:	683b      	ldr	r3, [r7, #0]
 80239c0:	695b      	ldr	r3, [r3, #20]
 80239c2:	693a      	ldr	r2, [r7, #16]
 80239c4:	4313      	orrs	r3, r2
 80239c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80239c8:	683b      	ldr	r3, [r7, #0]
 80239ca:	699b      	ldr	r3, [r3, #24]
 80239cc:	693a      	ldr	r2, [r7, #16]
 80239ce:	4313      	orrs	r3, r2
 80239d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	693a      	ldr	r2, [r7, #16]
 80239d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	68fa      	ldr	r2, [r7, #12]
 80239dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80239de:	683b      	ldr	r3, [r7, #0]
 80239e0:	685a      	ldr	r2, [r3, #4]
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	697a      	ldr	r2, [r7, #20]
 80239ea:	621a      	str	r2, [r3, #32]
}
 80239ec:	bf00      	nop
 80239ee:	371c      	adds	r7, #28
 80239f0:	46bd      	mov	sp, r7
 80239f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239f6:	4770      	bx	lr
 80239f8:	40010000 	.word	0x40010000

080239fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80239fc:	b480      	push	{r7}
 80239fe:	b087      	sub	sp, #28
 8023a00:	af00      	add	r7, sp, #0
 8023a02:	6078      	str	r0, [r7, #4]
 8023a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023a06:	687b      	ldr	r3, [r7, #4]
 8023a08:	6a1b      	ldr	r3, [r3, #32]
 8023a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	6a1b      	ldr	r3, [r3, #32]
 8023a10:	f023 0210 	bic.w	r2, r3, #16
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	685b      	ldr	r3, [r3, #4]
 8023a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8023a1e:	687b      	ldr	r3, [r7, #4]
 8023a20:	699b      	ldr	r3, [r3, #24]
 8023a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8023a24:	68fb      	ldr	r3, [r7, #12]
 8023a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8023a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8023a34:	683b      	ldr	r3, [r7, #0]
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	021b      	lsls	r3, r3, #8
 8023a3a:	68fa      	ldr	r2, [r7, #12]
 8023a3c:	4313      	orrs	r3, r2
 8023a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8023a40:	697b      	ldr	r3, [r7, #20]
 8023a42:	f023 0320 	bic.w	r3, r3, #32
 8023a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8023a48:	683b      	ldr	r3, [r7, #0]
 8023a4a:	689b      	ldr	r3, [r3, #8]
 8023a4c:	011b      	lsls	r3, r3, #4
 8023a4e:	697a      	ldr	r2, [r7, #20]
 8023a50:	4313      	orrs	r3, r2
 8023a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	4a1e      	ldr	r2, [pc, #120]	; (8023ad0 <TIM_OC2_SetConfig+0xd4>)
 8023a58:	4293      	cmp	r3, r2
 8023a5a:	d10d      	bne.n	8023a78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8023a5c:	697b      	ldr	r3, [r7, #20]
 8023a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8023a64:	683b      	ldr	r3, [r7, #0]
 8023a66:	68db      	ldr	r3, [r3, #12]
 8023a68:	011b      	lsls	r3, r3, #4
 8023a6a:	697a      	ldr	r2, [r7, #20]
 8023a6c:	4313      	orrs	r3, r2
 8023a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8023a70:	697b      	ldr	r3, [r7, #20]
 8023a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023a76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	4a15      	ldr	r2, [pc, #84]	; (8023ad0 <TIM_OC2_SetConfig+0xd4>)
 8023a7c:	4293      	cmp	r3, r2
 8023a7e:	d113      	bne.n	8023aa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8023a80:	693b      	ldr	r3, [r7, #16]
 8023a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8023a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8023a88:	693b      	ldr	r3, [r7, #16]
 8023a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8023a90:	683b      	ldr	r3, [r7, #0]
 8023a92:	695b      	ldr	r3, [r3, #20]
 8023a94:	009b      	lsls	r3, r3, #2
 8023a96:	693a      	ldr	r2, [r7, #16]
 8023a98:	4313      	orrs	r3, r2
 8023a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8023a9c:	683b      	ldr	r3, [r7, #0]
 8023a9e:	699b      	ldr	r3, [r3, #24]
 8023aa0:	009b      	lsls	r3, r3, #2
 8023aa2:	693a      	ldr	r2, [r7, #16]
 8023aa4:	4313      	orrs	r3, r2
 8023aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	693a      	ldr	r2, [r7, #16]
 8023aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	68fa      	ldr	r2, [r7, #12]
 8023ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8023ab4:	683b      	ldr	r3, [r7, #0]
 8023ab6:	685a      	ldr	r2, [r3, #4]
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	697a      	ldr	r2, [r7, #20]
 8023ac0:	621a      	str	r2, [r3, #32]
}
 8023ac2:	bf00      	nop
 8023ac4:	371c      	adds	r7, #28
 8023ac6:	46bd      	mov	sp, r7
 8023ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023acc:	4770      	bx	lr
 8023ace:	bf00      	nop
 8023ad0:	40010000 	.word	0x40010000

08023ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8023ad4:	b480      	push	{r7}
 8023ad6:	b087      	sub	sp, #28
 8023ad8:	af00      	add	r7, sp, #0
 8023ada:	6078      	str	r0, [r7, #4]
 8023adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	6a1b      	ldr	r3, [r3, #32]
 8023ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	6a1b      	ldr	r3, [r3, #32]
 8023ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	685b      	ldr	r3, [r3, #4]
 8023af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	69db      	ldr	r3, [r3, #28]
 8023afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8023b04:	68fb      	ldr	r3, [r7, #12]
 8023b06:	f023 0303 	bic.w	r3, r3, #3
 8023b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8023b0c:	683b      	ldr	r3, [r7, #0]
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	68fa      	ldr	r2, [r7, #12]
 8023b12:	4313      	orrs	r3, r2
 8023b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8023b16:	697b      	ldr	r3, [r7, #20]
 8023b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8023b1e:	683b      	ldr	r3, [r7, #0]
 8023b20:	689b      	ldr	r3, [r3, #8]
 8023b22:	021b      	lsls	r3, r3, #8
 8023b24:	697a      	ldr	r2, [r7, #20]
 8023b26:	4313      	orrs	r3, r2
 8023b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8023b2a:	687b      	ldr	r3, [r7, #4]
 8023b2c:	4a1d      	ldr	r2, [pc, #116]	; (8023ba4 <TIM_OC3_SetConfig+0xd0>)
 8023b2e:	4293      	cmp	r3, r2
 8023b30:	d10d      	bne.n	8023b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8023b32:	697b      	ldr	r3, [r7, #20]
 8023b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8023b3a:	683b      	ldr	r3, [r7, #0]
 8023b3c:	68db      	ldr	r3, [r3, #12]
 8023b3e:	021b      	lsls	r3, r3, #8
 8023b40:	697a      	ldr	r2, [r7, #20]
 8023b42:	4313      	orrs	r3, r2
 8023b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8023b46:	697b      	ldr	r3, [r7, #20]
 8023b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8023b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	4a14      	ldr	r2, [pc, #80]	; (8023ba4 <TIM_OC3_SetConfig+0xd0>)
 8023b52:	4293      	cmp	r3, r2
 8023b54:	d113      	bne.n	8023b7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8023b56:	693b      	ldr	r3, [r7, #16]
 8023b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8023b5e:	693b      	ldr	r3, [r7, #16]
 8023b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8023b66:	683b      	ldr	r3, [r7, #0]
 8023b68:	695b      	ldr	r3, [r3, #20]
 8023b6a:	011b      	lsls	r3, r3, #4
 8023b6c:	693a      	ldr	r2, [r7, #16]
 8023b6e:	4313      	orrs	r3, r2
 8023b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8023b72:	683b      	ldr	r3, [r7, #0]
 8023b74:	699b      	ldr	r3, [r3, #24]
 8023b76:	011b      	lsls	r3, r3, #4
 8023b78:	693a      	ldr	r2, [r7, #16]
 8023b7a:	4313      	orrs	r3, r2
 8023b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	693a      	ldr	r2, [r7, #16]
 8023b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	68fa      	ldr	r2, [r7, #12]
 8023b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8023b8a:	683b      	ldr	r3, [r7, #0]
 8023b8c:	685a      	ldr	r2, [r3, #4]
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	697a      	ldr	r2, [r7, #20]
 8023b96:	621a      	str	r2, [r3, #32]
}
 8023b98:	bf00      	nop
 8023b9a:	371c      	adds	r7, #28
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ba2:	4770      	bx	lr
 8023ba4:	40010000 	.word	0x40010000

08023ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8023ba8:	b480      	push	{r7}
 8023baa:	b087      	sub	sp, #28
 8023bac:	af00      	add	r7, sp, #0
 8023bae:	6078      	str	r0, [r7, #4]
 8023bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	6a1b      	ldr	r3, [r3, #32]
 8023bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	6a1b      	ldr	r3, [r3, #32]
 8023bbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023bc4:	687b      	ldr	r3, [r7, #4]
 8023bc6:	685b      	ldr	r3, [r3, #4]
 8023bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	69db      	ldr	r3, [r3, #28]
 8023bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8023bd0:	68fb      	ldr	r3, [r7, #12]
 8023bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8023bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8023be0:	683b      	ldr	r3, [r7, #0]
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	021b      	lsls	r3, r3, #8
 8023be6:	68fa      	ldr	r2, [r7, #12]
 8023be8:	4313      	orrs	r3, r2
 8023bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8023bec:	693b      	ldr	r3, [r7, #16]
 8023bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8023bf4:	683b      	ldr	r3, [r7, #0]
 8023bf6:	689b      	ldr	r3, [r3, #8]
 8023bf8:	031b      	lsls	r3, r3, #12
 8023bfa:	693a      	ldr	r2, [r7, #16]
 8023bfc:	4313      	orrs	r3, r2
 8023bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023c00:	687b      	ldr	r3, [r7, #4]
 8023c02:	4a10      	ldr	r2, [pc, #64]	; (8023c44 <TIM_OC4_SetConfig+0x9c>)
 8023c04:	4293      	cmp	r3, r2
 8023c06:	d109      	bne.n	8023c1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8023c08:	697b      	ldr	r3, [r7, #20]
 8023c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8023c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8023c10:	683b      	ldr	r3, [r7, #0]
 8023c12:	695b      	ldr	r3, [r3, #20]
 8023c14:	019b      	lsls	r3, r3, #6
 8023c16:	697a      	ldr	r2, [r7, #20]
 8023c18:	4313      	orrs	r3, r2
 8023c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023c1c:	687b      	ldr	r3, [r7, #4]
 8023c1e:	697a      	ldr	r2, [r7, #20]
 8023c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	68fa      	ldr	r2, [r7, #12]
 8023c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8023c28:	683b      	ldr	r3, [r7, #0]
 8023c2a:	685a      	ldr	r2, [r3, #4]
 8023c2c:	687b      	ldr	r3, [r7, #4]
 8023c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	693a      	ldr	r2, [r7, #16]
 8023c34:	621a      	str	r2, [r3, #32]
}
 8023c36:	bf00      	nop
 8023c38:	371c      	adds	r7, #28
 8023c3a:	46bd      	mov	sp, r7
 8023c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c40:	4770      	bx	lr
 8023c42:	bf00      	nop
 8023c44:	40010000 	.word	0x40010000

08023c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8023c48:	b480      	push	{r7}
 8023c4a:	b087      	sub	sp, #28
 8023c4c:	af00      	add	r7, sp, #0
 8023c4e:	60f8      	str	r0, [r7, #12]
 8023c50:	60b9      	str	r1, [r7, #8]
 8023c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8023c54:	68bb      	ldr	r3, [r7, #8]
 8023c56:	f003 031f 	and.w	r3, r3, #31
 8023c5a:	2201      	movs	r2, #1
 8023c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8023c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8023c62:	68fb      	ldr	r3, [r7, #12]
 8023c64:	6a1a      	ldr	r2, [r3, #32]
 8023c66:	697b      	ldr	r3, [r7, #20]
 8023c68:	43db      	mvns	r3, r3
 8023c6a:	401a      	ands	r2, r3
 8023c6c:	68fb      	ldr	r3, [r7, #12]
 8023c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	6a1a      	ldr	r2, [r3, #32]
 8023c74:	68bb      	ldr	r3, [r7, #8]
 8023c76:	f003 031f 	and.w	r3, r3, #31
 8023c7a:	6879      	ldr	r1, [r7, #4]
 8023c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8023c80:	431a      	orrs	r2, r3
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	621a      	str	r2, [r3, #32]
}
 8023c86:	bf00      	nop
 8023c88:	371c      	adds	r7, #28
 8023c8a:	46bd      	mov	sp, r7
 8023c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c90:	4770      	bx	lr
	...

08023c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8023c94:	b480      	push	{r7}
 8023c96:	b085      	sub	sp, #20
 8023c98:	af00      	add	r7, sp, #0
 8023c9a:	6078      	str	r0, [r7, #4]
 8023c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023ca4:	2b01      	cmp	r3, #1
 8023ca6:	d101      	bne.n	8023cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8023ca8:	2302      	movs	r3, #2
 8023caa:	e050      	b.n	8023d4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	2201      	movs	r2, #1
 8023cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	2202      	movs	r2, #2
 8023cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	681b      	ldr	r3, [r3, #0]
 8023cc0:	685b      	ldr	r3, [r3, #4]
 8023cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	681b      	ldr	r3, [r3, #0]
 8023cc8:	689b      	ldr	r3, [r3, #8]
 8023cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8023ccc:	68fb      	ldr	r3, [r7, #12]
 8023cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8023cd4:	683b      	ldr	r3, [r7, #0]
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	68fa      	ldr	r2, [r7, #12]
 8023cda:	4313      	orrs	r3, r2
 8023cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	68fa      	ldr	r2, [r7, #12]
 8023ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	681b      	ldr	r3, [r3, #0]
 8023cea:	4a1c      	ldr	r2, [pc, #112]	; (8023d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8023cec:	4293      	cmp	r3, r2
 8023cee:	d018      	beq.n	8023d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023cf8:	d013      	beq.n	8023d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	681b      	ldr	r3, [r3, #0]
 8023cfe:	4a18      	ldr	r2, [pc, #96]	; (8023d60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8023d00:	4293      	cmp	r3, r2
 8023d02:	d00e      	beq.n	8023d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	681b      	ldr	r3, [r3, #0]
 8023d08:	4a16      	ldr	r2, [pc, #88]	; (8023d64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8023d0a:	4293      	cmp	r3, r2
 8023d0c:	d009      	beq.n	8023d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	4a15      	ldr	r2, [pc, #84]	; (8023d68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8023d14:	4293      	cmp	r3, r2
 8023d16:	d004      	beq.n	8023d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	4a13      	ldr	r2, [pc, #76]	; (8023d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8023d1e:	4293      	cmp	r3, r2
 8023d20:	d10c      	bne.n	8023d3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8023d22:	68bb      	ldr	r3, [r7, #8]
 8023d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8023d2a:	683b      	ldr	r3, [r7, #0]
 8023d2c:	685b      	ldr	r3, [r3, #4]
 8023d2e:	68ba      	ldr	r2, [r7, #8]
 8023d30:	4313      	orrs	r3, r2
 8023d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	68ba      	ldr	r2, [r7, #8]
 8023d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	2201      	movs	r2, #1
 8023d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	2200      	movs	r2, #0
 8023d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8023d4c:	2300      	movs	r3, #0
}
 8023d4e:	4618      	mov	r0, r3
 8023d50:	3714      	adds	r7, #20
 8023d52:	46bd      	mov	sp, r7
 8023d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d58:	4770      	bx	lr
 8023d5a:	bf00      	nop
 8023d5c:	40010000 	.word	0x40010000
 8023d60:	40000400 	.word	0x40000400
 8023d64:	40000800 	.word	0x40000800
 8023d68:	40000c00 	.word	0x40000c00
 8023d6c:	40014000 	.word	0x40014000

08023d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8023d70:	b480      	push	{r7}
 8023d72:	b083      	sub	sp, #12
 8023d74:	af00      	add	r7, sp, #0
 8023d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8023d78:	bf00      	nop
 8023d7a:	370c      	adds	r7, #12
 8023d7c:	46bd      	mov	sp, r7
 8023d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d82:	4770      	bx	lr

08023d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8023d84:	b480      	push	{r7}
 8023d86:	b083      	sub	sp, #12
 8023d88:	af00      	add	r7, sp, #0
 8023d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8023d8c:	bf00      	nop
 8023d8e:	370c      	adds	r7, #12
 8023d90:	46bd      	mov	sp, r7
 8023d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d96:	4770      	bx	lr

08023d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023d98:	b580      	push	{r7, lr}
 8023d9a:	b082      	sub	sp, #8
 8023d9c:	af00      	add	r7, sp, #0
 8023d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d101      	bne.n	8023daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023da6:	2301      	movs	r3, #1
 8023da8:	e042      	b.n	8023e30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023db0:	b2db      	uxtb	r3, r3
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	d106      	bne.n	8023dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	2200      	movs	r2, #0
 8023dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8023dbe:	6878      	ldr	r0, [r7, #4]
 8023dc0:	f7fd fe98 	bl	8021af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	2224      	movs	r2, #36	; 0x24
 8023dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	68da      	ldr	r2, [r3, #12]
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	681b      	ldr	r3, [r3, #0]
 8023dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8023ddc:	6878      	ldr	r0, [r7, #4]
 8023dde:	f000 fdff 	bl	80249e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	681b      	ldr	r3, [r3, #0]
 8023de6:	691a      	ldr	r2, [r3, #16]
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	681b      	ldr	r3, [r3, #0]
 8023dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8023df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8023df2:	687b      	ldr	r3, [r7, #4]
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	695a      	ldr	r2, [r3, #20]
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8023e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	68da      	ldr	r2, [r3, #12]
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	2200      	movs	r2, #0
 8023e16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	2220      	movs	r2, #32
 8023e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	2220      	movs	r2, #32
 8023e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023e2e:	2300      	movs	r3, #0
}
 8023e30:	4618      	mov	r0, r3
 8023e32:	3708      	adds	r7, #8
 8023e34:	46bd      	mov	sp, r7
 8023e36:	bd80      	pop	{r7, pc}

08023e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023e38:	b580      	push	{r7, lr}
 8023e3a:	b08a      	sub	sp, #40	; 0x28
 8023e3c:	af02      	add	r7, sp, #8
 8023e3e:	60f8      	str	r0, [r7, #12]
 8023e40:	60b9      	str	r1, [r7, #8]
 8023e42:	603b      	str	r3, [r7, #0]
 8023e44:	4613      	mov	r3, r2
 8023e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8023e48:	2300      	movs	r3, #0
 8023e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8023e4c:	68fb      	ldr	r3, [r7, #12]
 8023e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023e52:	b2db      	uxtb	r3, r3
 8023e54:	2b20      	cmp	r3, #32
 8023e56:	d175      	bne.n	8023f44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8023e58:	68bb      	ldr	r3, [r7, #8]
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	d002      	beq.n	8023e64 <HAL_UART_Transmit+0x2c>
 8023e5e:	88fb      	ldrh	r3, [r7, #6]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d101      	bne.n	8023e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8023e64:	2301      	movs	r3, #1
 8023e66:	e06e      	b.n	8023f46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023e68:	68fb      	ldr	r3, [r7, #12]
 8023e6a:	2200      	movs	r2, #0
 8023e6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8023e6e:	68fb      	ldr	r3, [r7, #12]
 8023e70:	2221      	movs	r2, #33	; 0x21
 8023e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8023e76:	f7fd ff1d 	bl	8021cb4 <HAL_GetTick>
 8023e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8023e7c:	68fb      	ldr	r3, [r7, #12]
 8023e7e:	88fa      	ldrh	r2, [r7, #6]
 8023e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8023e82:	68fb      	ldr	r3, [r7, #12]
 8023e84:	88fa      	ldrh	r2, [r7, #6]
 8023e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023e88:	68fb      	ldr	r3, [r7, #12]
 8023e8a:	689b      	ldr	r3, [r3, #8]
 8023e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023e90:	d108      	bne.n	8023ea4 <HAL_UART_Transmit+0x6c>
 8023e92:	68fb      	ldr	r3, [r7, #12]
 8023e94:	691b      	ldr	r3, [r3, #16]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d104      	bne.n	8023ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8023e9a:	2300      	movs	r3, #0
 8023e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8023e9e:	68bb      	ldr	r3, [r7, #8]
 8023ea0:	61bb      	str	r3, [r7, #24]
 8023ea2:	e003      	b.n	8023eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8023ea4:	68bb      	ldr	r3, [r7, #8]
 8023ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023ea8:	2300      	movs	r3, #0
 8023eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8023eac:	e02e      	b.n	8023f0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8023eae:	683b      	ldr	r3, [r7, #0]
 8023eb0:	9300      	str	r3, [sp, #0]
 8023eb2:	697b      	ldr	r3, [r7, #20]
 8023eb4:	2200      	movs	r2, #0
 8023eb6:	2180      	movs	r1, #128	; 0x80
 8023eb8:	68f8      	ldr	r0, [r7, #12]
 8023eba:	f000 fb9b 	bl	80245f4 <UART_WaitOnFlagUntilTimeout>
 8023ebe:	4603      	mov	r3, r0
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d005      	beq.n	8023ed0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8023ec4:	68fb      	ldr	r3, [r7, #12]
 8023ec6:	2220      	movs	r2, #32
 8023ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8023ecc:	2303      	movs	r3, #3
 8023ece:	e03a      	b.n	8023f46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8023ed0:	69fb      	ldr	r3, [r7, #28]
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	d10b      	bne.n	8023eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8023ed6:	69bb      	ldr	r3, [r7, #24]
 8023ed8:	881b      	ldrh	r3, [r3, #0]
 8023eda:	461a      	mov	r2, r3
 8023edc:	68fb      	ldr	r3, [r7, #12]
 8023ede:	681b      	ldr	r3, [r3, #0]
 8023ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8023ee6:	69bb      	ldr	r3, [r7, #24]
 8023ee8:	3302      	adds	r3, #2
 8023eea:	61bb      	str	r3, [r7, #24]
 8023eec:	e007      	b.n	8023efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8023eee:	69fb      	ldr	r3, [r7, #28]
 8023ef0:	781a      	ldrb	r2, [r3, #0]
 8023ef2:	68fb      	ldr	r3, [r7, #12]
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8023ef8:	69fb      	ldr	r3, [r7, #28]
 8023efa:	3301      	adds	r3, #1
 8023efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8023efe:	68fb      	ldr	r3, [r7, #12]
 8023f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023f02:	b29b      	uxth	r3, r3
 8023f04:	3b01      	subs	r3, #1
 8023f06:	b29a      	uxth	r2, r3
 8023f08:	68fb      	ldr	r3, [r7, #12]
 8023f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8023f0c:	68fb      	ldr	r3, [r7, #12]
 8023f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023f10:	b29b      	uxth	r3, r3
 8023f12:	2b00      	cmp	r3, #0
 8023f14:	d1cb      	bne.n	8023eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8023f16:	683b      	ldr	r3, [r7, #0]
 8023f18:	9300      	str	r3, [sp, #0]
 8023f1a:	697b      	ldr	r3, [r7, #20]
 8023f1c:	2200      	movs	r2, #0
 8023f1e:	2140      	movs	r1, #64	; 0x40
 8023f20:	68f8      	ldr	r0, [r7, #12]
 8023f22:	f000 fb67 	bl	80245f4 <UART_WaitOnFlagUntilTimeout>
 8023f26:	4603      	mov	r3, r0
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	d005      	beq.n	8023f38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8023f2c:	68fb      	ldr	r3, [r7, #12]
 8023f2e:	2220      	movs	r2, #32
 8023f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8023f34:	2303      	movs	r3, #3
 8023f36:	e006      	b.n	8023f46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8023f38:	68fb      	ldr	r3, [r7, #12]
 8023f3a:	2220      	movs	r2, #32
 8023f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8023f40:	2300      	movs	r3, #0
 8023f42:	e000      	b.n	8023f46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8023f44:	2302      	movs	r3, #2
  }
}
 8023f46:	4618      	mov	r0, r3
 8023f48:	3720      	adds	r7, #32
 8023f4a:	46bd      	mov	sp, r7
 8023f4c:	bd80      	pop	{r7, pc}

08023f4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023f4e:	b580      	push	{r7, lr}
 8023f50:	b08a      	sub	sp, #40	; 0x28
 8023f52:	af02      	add	r7, sp, #8
 8023f54:	60f8      	str	r0, [r7, #12]
 8023f56:	60b9      	str	r1, [r7, #8]
 8023f58:	603b      	str	r3, [r7, #0]
 8023f5a:	4613      	mov	r3, r2
 8023f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8023f5e:	2300      	movs	r3, #0
 8023f60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8023f68:	b2db      	uxtb	r3, r3
 8023f6a:	2b20      	cmp	r3, #32
 8023f6c:	f040 8081 	bne.w	8024072 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8023f70:	68bb      	ldr	r3, [r7, #8]
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d002      	beq.n	8023f7c <HAL_UART_Receive+0x2e>
 8023f76:	88fb      	ldrh	r3, [r7, #6]
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d101      	bne.n	8023f80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8023f7c:	2301      	movs	r3, #1
 8023f7e:	e079      	b.n	8024074 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023f80:	68fb      	ldr	r3, [r7, #12]
 8023f82:	2200      	movs	r2, #0
 8023f84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	2222      	movs	r2, #34	; 0x22
 8023f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023f8e:	68fb      	ldr	r3, [r7, #12]
 8023f90:	2200      	movs	r2, #0
 8023f92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8023f94:	f7fd fe8e 	bl	8021cb4 <HAL_GetTick>
 8023f98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8023f9a:	68fb      	ldr	r3, [r7, #12]
 8023f9c:	88fa      	ldrh	r2, [r7, #6]
 8023f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	88fa      	ldrh	r2, [r7, #6]
 8023fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023fa6:	68fb      	ldr	r3, [r7, #12]
 8023fa8:	689b      	ldr	r3, [r3, #8]
 8023faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023fae:	d108      	bne.n	8023fc2 <HAL_UART_Receive+0x74>
 8023fb0:	68fb      	ldr	r3, [r7, #12]
 8023fb2:	691b      	ldr	r3, [r3, #16]
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d104      	bne.n	8023fc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8023fb8:	2300      	movs	r3, #0
 8023fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8023fbc:	68bb      	ldr	r3, [r7, #8]
 8023fbe:	61bb      	str	r3, [r7, #24]
 8023fc0:	e003      	b.n	8023fca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8023fc2:	68bb      	ldr	r3, [r7, #8]
 8023fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023fc6:	2300      	movs	r3, #0
 8023fc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8023fca:	e047      	b.n	802405c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8023fcc:	683b      	ldr	r3, [r7, #0]
 8023fce:	9300      	str	r3, [sp, #0]
 8023fd0:	697b      	ldr	r3, [r7, #20]
 8023fd2:	2200      	movs	r2, #0
 8023fd4:	2120      	movs	r1, #32
 8023fd6:	68f8      	ldr	r0, [r7, #12]
 8023fd8:	f000 fb0c 	bl	80245f4 <UART_WaitOnFlagUntilTimeout>
 8023fdc:	4603      	mov	r3, r0
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	d005      	beq.n	8023fee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8023fe2:	68fb      	ldr	r3, [r7, #12]
 8023fe4:	2220      	movs	r2, #32
 8023fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8023fea:	2303      	movs	r3, #3
 8023fec:	e042      	b.n	8024074 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8023fee:	69fb      	ldr	r3, [r7, #28]
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d10c      	bne.n	802400e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8023ff4:	68fb      	ldr	r3, [r7, #12]
 8023ff6:	681b      	ldr	r3, [r3, #0]
 8023ff8:	685b      	ldr	r3, [r3, #4]
 8023ffa:	b29b      	uxth	r3, r3
 8023ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024000:	b29a      	uxth	r2, r3
 8024002:	69bb      	ldr	r3, [r7, #24]
 8024004:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8024006:	69bb      	ldr	r3, [r7, #24]
 8024008:	3302      	adds	r3, #2
 802400a:	61bb      	str	r3, [r7, #24]
 802400c:	e01f      	b.n	802404e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802400e:	68fb      	ldr	r3, [r7, #12]
 8024010:	689b      	ldr	r3, [r3, #8]
 8024012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024016:	d007      	beq.n	8024028 <HAL_UART_Receive+0xda>
 8024018:	68fb      	ldr	r3, [r7, #12]
 802401a:	689b      	ldr	r3, [r3, #8]
 802401c:	2b00      	cmp	r3, #0
 802401e:	d10a      	bne.n	8024036 <HAL_UART_Receive+0xe8>
 8024020:	68fb      	ldr	r3, [r7, #12]
 8024022:	691b      	ldr	r3, [r3, #16]
 8024024:	2b00      	cmp	r3, #0
 8024026:	d106      	bne.n	8024036 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8024028:	68fb      	ldr	r3, [r7, #12]
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	685b      	ldr	r3, [r3, #4]
 802402e:	b2da      	uxtb	r2, r3
 8024030:	69fb      	ldr	r3, [r7, #28]
 8024032:	701a      	strb	r2, [r3, #0]
 8024034:	e008      	b.n	8024048 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8024036:	68fb      	ldr	r3, [r7, #12]
 8024038:	681b      	ldr	r3, [r3, #0]
 802403a:	685b      	ldr	r3, [r3, #4]
 802403c:	b2db      	uxtb	r3, r3
 802403e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024042:	b2da      	uxtb	r2, r3
 8024044:	69fb      	ldr	r3, [r7, #28]
 8024046:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8024048:	69fb      	ldr	r3, [r7, #28]
 802404a:	3301      	adds	r3, #1
 802404c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 802404e:	68fb      	ldr	r3, [r7, #12]
 8024050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024052:	b29b      	uxth	r3, r3
 8024054:	3b01      	subs	r3, #1
 8024056:	b29a      	uxth	r2, r3
 8024058:	68fb      	ldr	r3, [r7, #12]
 802405a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 802405c:	68fb      	ldr	r3, [r7, #12]
 802405e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024060:	b29b      	uxth	r3, r3
 8024062:	2b00      	cmp	r3, #0
 8024064:	d1b2      	bne.n	8023fcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8024066:	68fb      	ldr	r3, [r7, #12]
 8024068:	2220      	movs	r2, #32
 802406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 802406e:	2300      	movs	r3, #0
 8024070:	e000      	b.n	8024074 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8024072:	2302      	movs	r3, #2
  }
}
 8024074:	4618      	mov	r0, r3
 8024076:	3720      	adds	r7, #32
 8024078:	46bd      	mov	sp, r7
 802407a:	bd80      	pop	{r7, pc}

0802407c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802407c:	b580      	push	{r7, lr}
 802407e:	b0ba      	sub	sp, #232	; 0xe8
 8024080:	af00      	add	r7, sp, #0
 8024082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8024084:	687b      	ldr	r3, [r7, #4]
 8024086:	681b      	ldr	r3, [r3, #0]
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	68db      	ldr	r3, [r3, #12]
 8024094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	695b      	ldr	r3, [r3, #20]
 802409e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80240a2:	2300      	movs	r3, #0
 80240a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80240a8:	2300      	movs	r3, #0
 80240aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80240ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80240b2:	f003 030f 	and.w	r3, r3, #15
 80240b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80240ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80240be:	2b00      	cmp	r3, #0
 80240c0:	d10f      	bne.n	80240e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80240c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80240c6:	f003 0320 	and.w	r3, r3, #32
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d009      	beq.n	80240e2 <HAL_UART_IRQHandler+0x66>
 80240ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80240d2:	f003 0320 	and.w	r3, r3, #32
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d003      	beq.n	80240e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80240da:	6878      	ldr	r0, [r7, #4]
 80240dc:	f000 fbc2 	bl	8024864 <UART_Receive_IT>
      return;
 80240e0:	e25b      	b.n	802459a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80240e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	f000 80de 	beq.w	80242a8 <HAL_UART_IRQHandler+0x22c>
 80240ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80240f0:	f003 0301 	and.w	r3, r3, #1
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d106      	bne.n	8024106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80240f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80240fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8024100:	2b00      	cmp	r3, #0
 8024102:	f000 80d1 	beq.w	80242a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8024106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802410a:	f003 0301 	and.w	r3, r3, #1
 802410e:	2b00      	cmp	r3, #0
 8024110:	d00b      	beq.n	802412a <HAL_UART_IRQHandler+0xae>
 8024112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802411a:	2b00      	cmp	r3, #0
 802411c:	d005      	beq.n	802412a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024122:	f043 0201 	orr.w	r2, r3, #1
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802412e:	f003 0304 	and.w	r3, r3, #4
 8024132:	2b00      	cmp	r3, #0
 8024134:	d00b      	beq.n	802414e <HAL_UART_IRQHandler+0xd2>
 8024136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802413a:	f003 0301 	and.w	r3, r3, #1
 802413e:	2b00      	cmp	r3, #0
 8024140:	d005      	beq.n	802414e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024146:	f043 0202 	orr.w	r2, r3, #2
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024152:	f003 0302 	and.w	r3, r3, #2
 8024156:	2b00      	cmp	r3, #0
 8024158:	d00b      	beq.n	8024172 <HAL_UART_IRQHandler+0xf6>
 802415a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802415e:	f003 0301 	and.w	r3, r3, #1
 8024162:	2b00      	cmp	r3, #0
 8024164:	d005      	beq.n	8024172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802416a:	f043 0204 	orr.w	r2, r3, #4
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8024172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024176:	f003 0308 	and.w	r3, r3, #8
 802417a:	2b00      	cmp	r3, #0
 802417c:	d011      	beq.n	80241a2 <HAL_UART_IRQHandler+0x126>
 802417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024182:	f003 0320 	and.w	r3, r3, #32
 8024186:	2b00      	cmp	r3, #0
 8024188:	d105      	bne.n	8024196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802418e:	f003 0301 	and.w	r3, r3, #1
 8024192:	2b00      	cmp	r3, #0
 8024194:	d005      	beq.n	80241a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802419a:	f043 0208 	orr.w	r2, r3, #8
 802419e:	687b      	ldr	r3, [r7, #4]
 80241a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	f000 81f2 	beq.w	8024590 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80241ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80241b0:	f003 0320 	and.w	r3, r3, #32
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d008      	beq.n	80241ca <HAL_UART_IRQHandler+0x14e>
 80241b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80241bc:	f003 0320 	and.w	r3, r3, #32
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	d002      	beq.n	80241ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80241c4:	6878      	ldr	r0, [r7, #4]
 80241c6:	f000 fb4d 	bl	8024864 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	681b      	ldr	r3, [r3, #0]
 80241ce:	695b      	ldr	r3, [r3, #20]
 80241d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80241d4:	2b40      	cmp	r3, #64	; 0x40
 80241d6:	bf0c      	ite	eq
 80241d8:	2301      	moveq	r3, #1
 80241da:	2300      	movne	r3, #0
 80241dc:	b2db      	uxtb	r3, r3
 80241de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80241e6:	f003 0308 	and.w	r3, r3, #8
 80241ea:	2b00      	cmp	r3, #0
 80241ec:	d103      	bne.n	80241f6 <HAL_UART_IRQHandler+0x17a>
 80241ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	d04f      	beq.n	8024296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80241f6:	6878      	ldr	r0, [r7, #4]
 80241f8:	f000 fa55 	bl	80246a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	681b      	ldr	r3, [r3, #0]
 8024200:	695b      	ldr	r3, [r3, #20]
 8024202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024206:	2b40      	cmp	r3, #64	; 0x40
 8024208:	d141      	bne.n	802428e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802420a:	687b      	ldr	r3, [r7, #4]
 802420c:	681b      	ldr	r3, [r3, #0]
 802420e:	3314      	adds	r3, #20
 8024210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024218:	e853 3f00 	ldrex	r3, [r3]
 802421c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8024220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	3314      	adds	r3, #20
 8024232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8024236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802423a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802423e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8024242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8024246:	e841 2300 	strex	r3, r2, [r1]
 802424a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802424e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8024252:	2b00      	cmp	r3, #0
 8024254:	d1d9      	bne.n	802420a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802425a:	2b00      	cmp	r3, #0
 802425c:	d013      	beq.n	8024286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024262:	4a7e      	ldr	r2, [pc, #504]	; (802445c <HAL_UART_IRQHandler+0x3e0>)
 8024264:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802426a:	4618      	mov	r0, r3
 802426c:	f7fd feaf 	bl	8021fce <HAL_DMA_Abort_IT>
 8024270:	4603      	mov	r3, r0
 8024272:	2b00      	cmp	r3, #0
 8024274:	d016      	beq.n	80242a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802427c:	687a      	ldr	r2, [r7, #4]
 802427e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8024280:	4610      	mov	r0, r2
 8024282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024284:	e00e      	b.n	80242a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8024286:	6878      	ldr	r0, [r7, #4]
 8024288:	f000 f99e 	bl	80245c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802428c:	e00a      	b.n	80242a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802428e:	6878      	ldr	r0, [r7, #4]
 8024290:	f000 f99a 	bl	80245c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024294:	e006      	b.n	80242a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8024296:	6878      	ldr	r0, [r7, #4]
 8024298:	f000 f996 	bl	80245c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	2200      	movs	r2, #0
 80242a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80242a2:	e175      	b.n	8024590 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80242a4:	bf00      	nop
    return;
 80242a6:	e173      	b.n	8024590 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242ac:	2b01      	cmp	r3, #1
 80242ae:	f040 814f 	bne.w	8024550 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80242b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80242b6:	f003 0310 	and.w	r3, r3, #16
 80242ba:	2b00      	cmp	r3, #0
 80242bc:	f000 8148 	beq.w	8024550 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80242c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80242c4:	f003 0310 	and.w	r3, r3, #16
 80242c8:	2b00      	cmp	r3, #0
 80242ca:	f000 8141 	beq.w	8024550 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80242ce:	2300      	movs	r3, #0
 80242d0:	60bb      	str	r3, [r7, #8]
 80242d2:	687b      	ldr	r3, [r7, #4]
 80242d4:	681b      	ldr	r3, [r3, #0]
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	60bb      	str	r3, [r7, #8]
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	685b      	ldr	r3, [r3, #4]
 80242e0:	60bb      	str	r3, [r7, #8]
 80242e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	695b      	ldr	r3, [r3, #20]
 80242ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80242ee:	2b40      	cmp	r3, #64	; 0x40
 80242f0:	f040 80b6 	bne.w	8024460 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	685b      	ldr	r3, [r3, #4]
 80242fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8024300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8024304:	2b00      	cmp	r3, #0
 8024306:	f000 8145 	beq.w	8024594 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802430a:	687b      	ldr	r3, [r7, #4]
 802430c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802430e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8024312:	429a      	cmp	r2, r3
 8024314:	f080 813e 	bcs.w	8024594 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802431e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8024320:	687b      	ldr	r3, [r7, #4]
 8024322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024324:	69db      	ldr	r3, [r3, #28]
 8024326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802432a:	f000 8088 	beq.w	802443e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	681b      	ldr	r3, [r3, #0]
 8024332:	330c      	adds	r3, #12
 8024334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802433c:	e853 3f00 	ldrex	r3, [r3]
 8024340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8024344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802434c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	330c      	adds	r3, #12
 8024356:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802435a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802435e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8024366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802436a:	e841 2300 	strex	r3, r2, [r1]
 802436e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8024372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024376:	2b00      	cmp	r3, #0
 8024378:	d1d9      	bne.n	802432e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	681b      	ldr	r3, [r3, #0]
 802437e:	3314      	adds	r3, #20
 8024380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024384:	e853 3f00 	ldrex	r3, [r3]
 8024388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802438a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802438c:	f023 0301 	bic.w	r3, r3, #1
 8024390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	3314      	adds	r3, #20
 802439a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802439e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80243a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80243a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80243a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80243aa:	e841 2300 	strex	r3, r2, [r1]
 80243ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80243b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d1e1      	bne.n	802437a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	681b      	ldr	r3, [r3, #0]
 80243ba:	3314      	adds	r3, #20
 80243bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80243be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80243c0:	e853 3f00 	ldrex	r3, [r3]
 80243c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80243c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80243c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80243cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	3314      	adds	r3, #20
 80243d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80243da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80243dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80243de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80243e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80243e2:	e841 2300 	strex	r3, r2, [r1]
 80243e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80243e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d1e3      	bne.n	80243b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80243ee:	687b      	ldr	r3, [r7, #4]
 80243f0:	2220      	movs	r2, #32
 80243f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	2200      	movs	r2, #0
 80243fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	330c      	adds	r3, #12
 8024402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024406:	e853 3f00 	ldrex	r3, [r3]
 802440a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802440e:	f023 0310 	bic.w	r3, r3, #16
 8024412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	681b      	ldr	r3, [r3, #0]
 802441a:	330c      	adds	r3, #12
 802441c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8024420:	65ba      	str	r2, [r7, #88]	; 0x58
 8024422:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8024428:	e841 2300 	strex	r3, r2, [r1]
 802442c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024430:	2b00      	cmp	r3, #0
 8024432:	d1e3      	bne.n	80243fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024438:	4618      	mov	r0, r3
 802443a:	f7fd fd58 	bl	8021eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802443e:	687b      	ldr	r3, [r7, #4]
 8024440:	2202      	movs	r2, #2
 8024442:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8024448:	687b      	ldr	r3, [r7, #4]
 802444a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802444c:	b29b      	uxth	r3, r3
 802444e:	1ad3      	subs	r3, r2, r3
 8024450:	b29b      	uxth	r3, r3
 8024452:	4619      	mov	r1, r3
 8024454:	6878      	ldr	r0, [r7, #4]
 8024456:	f000 f8c1 	bl	80245dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802445a:	e09b      	b.n	8024594 <HAL_UART_IRQHandler+0x518>
 802445c:	0802476d 	.word	0x0802476d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024468:	b29b      	uxth	r3, r3
 802446a:	1ad3      	subs	r3, r2, r3
 802446c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024474:	b29b      	uxth	r3, r3
 8024476:	2b00      	cmp	r3, #0
 8024478:	f000 808e 	beq.w	8024598 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 802447c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8024480:	2b00      	cmp	r3, #0
 8024482:	f000 8089 	beq.w	8024598 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	330c      	adds	r3, #12
 802448c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024490:	e853 3f00 	ldrex	r3, [r3]
 8024494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8024496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802449c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	681b      	ldr	r3, [r3, #0]
 80244a4:	330c      	adds	r3, #12
 80244a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80244aa:	647a      	str	r2, [r7, #68]	; 0x44
 80244ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80244ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80244b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80244b2:	e841 2300 	strex	r3, r2, [r1]
 80244b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80244b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d1e3      	bne.n	8024486 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	681b      	ldr	r3, [r3, #0]
 80244c2:	3314      	adds	r3, #20
 80244c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80244c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244c8:	e853 3f00 	ldrex	r3, [r3]
 80244cc:	623b      	str	r3, [r7, #32]
   return(result);
 80244ce:	6a3b      	ldr	r3, [r7, #32]
 80244d0:	f023 0301 	bic.w	r3, r3, #1
 80244d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	681b      	ldr	r3, [r3, #0]
 80244dc:	3314      	adds	r3, #20
 80244de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80244e2:	633a      	str	r2, [r7, #48]	; 0x30
 80244e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80244e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80244e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80244ea:	e841 2300 	strex	r3, r2, [r1]
 80244ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80244f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	d1e3      	bne.n	80244be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	2220      	movs	r2, #32
 80244fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80244fe:	687b      	ldr	r3, [r7, #4]
 8024500:	2200      	movs	r2, #0
 8024502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	330c      	adds	r3, #12
 802450a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802450c:	693b      	ldr	r3, [r7, #16]
 802450e:	e853 3f00 	ldrex	r3, [r3]
 8024512:	60fb      	str	r3, [r7, #12]
   return(result);
 8024514:	68fb      	ldr	r3, [r7, #12]
 8024516:	f023 0310 	bic.w	r3, r3, #16
 802451a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	681b      	ldr	r3, [r3, #0]
 8024522:	330c      	adds	r3, #12
 8024524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8024528:	61fa      	str	r2, [r7, #28]
 802452a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802452c:	69b9      	ldr	r1, [r7, #24]
 802452e:	69fa      	ldr	r2, [r7, #28]
 8024530:	e841 2300 	strex	r3, r2, [r1]
 8024534:	617b      	str	r3, [r7, #20]
   return(result);
 8024536:	697b      	ldr	r3, [r7, #20]
 8024538:	2b00      	cmp	r3, #0
 802453a:	d1e3      	bne.n	8024504 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802453c:	687b      	ldr	r3, [r7, #4]
 802453e:	2202      	movs	r2, #2
 8024540:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8024542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8024546:	4619      	mov	r1, r3
 8024548:	6878      	ldr	r0, [r7, #4]
 802454a:	f000 f847 	bl	80245dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802454e:	e023      	b.n	8024598 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8024550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024558:	2b00      	cmp	r3, #0
 802455a:	d009      	beq.n	8024570 <HAL_UART_IRQHandler+0x4f4>
 802455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024564:	2b00      	cmp	r3, #0
 8024566:	d003      	beq.n	8024570 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8024568:	6878      	ldr	r0, [r7, #4]
 802456a:	f000 f913 	bl	8024794 <UART_Transmit_IT>
    return;
 802456e:	e014      	b.n	802459a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8024570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024578:	2b00      	cmp	r3, #0
 802457a:	d00e      	beq.n	802459a <HAL_UART_IRQHandler+0x51e>
 802457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024584:	2b00      	cmp	r3, #0
 8024586:	d008      	beq.n	802459a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8024588:	6878      	ldr	r0, [r7, #4]
 802458a:	f000 f953 	bl	8024834 <UART_EndTransmit_IT>
    return;
 802458e:	e004      	b.n	802459a <HAL_UART_IRQHandler+0x51e>
    return;
 8024590:	bf00      	nop
 8024592:	e002      	b.n	802459a <HAL_UART_IRQHandler+0x51e>
      return;
 8024594:	bf00      	nop
 8024596:	e000      	b.n	802459a <HAL_UART_IRQHandler+0x51e>
      return;
 8024598:	bf00      	nop
  }
}
 802459a:	37e8      	adds	r7, #232	; 0xe8
 802459c:	46bd      	mov	sp, r7
 802459e:	bd80      	pop	{r7, pc}

080245a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80245a0:	b480      	push	{r7}
 80245a2:	b083      	sub	sp, #12
 80245a4:	af00      	add	r7, sp, #0
 80245a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80245a8:	bf00      	nop
 80245aa:	370c      	adds	r7, #12
 80245ac:	46bd      	mov	sp, r7
 80245ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245b2:	4770      	bx	lr

080245b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80245b4:	b480      	push	{r7}
 80245b6:	b083      	sub	sp, #12
 80245b8:	af00      	add	r7, sp, #0
 80245ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80245bc:	bf00      	nop
 80245be:	370c      	adds	r7, #12
 80245c0:	46bd      	mov	sp, r7
 80245c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245c6:	4770      	bx	lr

080245c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80245c8:	b480      	push	{r7}
 80245ca:	b083      	sub	sp, #12
 80245cc:	af00      	add	r7, sp, #0
 80245ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80245d0:	bf00      	nop
 80245d2:	370c      	adds	r7, #12
 80245d4:	46bd      	mov	sp, r7
 80245d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245da:	4770      	bx	lr

080245dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80245dc:	b480      	push	{r7}
 80245de:	b083      	sub	sp, #12
 80245e0:	af00      	add	r7, sp, #0
 80245e2:	6078      	str	r0, [r7, #4]
 80245e4:	460b      	mov	r3, r1
 80245e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80245e8:	bf00      	nop
 80245ea:	370c      	adds	r7, #12
 80245ec:	46bd      	mov	sp, r7
 80245ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245f2:	4770      	bx	lr

080245f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80245f4:	b580      	push	{r7, lr}
 80245f6:	b086      	sub	sp, #24
 80245f8:	af00      	add	r7, sp, #0
 80245fa:	60f8      	str	r0, [r7, #12]
 80245fc:	60b9      	str	r1, [r7, #8]
 80245fe:	603b      	str	r3, [r7, #0]
 8024600:	4613      	mov	r3, r2
 8024602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024604:	e03b      	b.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024606:	6a3b      	ldr	r3, [r7, #32]
 8024608:	f1b3 3fff 	cmp.w	r3, #4294967295
 802460c:	d037      	beq.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802460e:	f7fd fb51 	bl	8021cb4 <HAL_GetTick>
 8024612:	4602      	mov	r2, r0
 8024614:	683b      	ldr	r3, [r7, #0]
 8024616:	1ad3      	subs	r3, r2, r3
 8024618:	6a3a      	ldr	r2, [r7, #32]
 802461a:	429a      	cmp	r2, r3
 802461c:	d302      	bcc.n	8024624 <UART_WaitOnFlagUntilTimeout+0x30>
 802461e:	6a3b      	ldr	r3, [r7, #32]
 8024620:	2b00      	cmp	r3, #0
 8024622:	d101      	bne.n	8024628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8024624:	2303      	movs	r3, #3
 8024626:	e03a      	b.n	802469e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8024628:	68fb      	ldr	r3, [r7, #12]
 802462a:	681b      	ldr	r3, [r3, #0]
 802462c:	68db      	ldr	r3, [r3, #12]
 802462e:	f003 0304 	and.w	r3, r3, #4
 8024632:	2b00      	cmp	r3, #0
 8024634:	d023      	beq.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
 8024636:	68bb      	ldr	r3, [r7, #8]
 8024638:	2b80      	cmp	r3, #128	; 0x80
 802463a:	d020      	beq.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
 802463c:	68bb      	ldr	r3, [r7, #8]
 802463e:	2b40      	cmp	r3, #64	; 0x40
 8024640:	d01d      	beq.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8024642:	68fb      	ldr	r3, [r7, #12]
 8024644:	681b      	ldr	r3, [r3, #0]
 8024646:	681b      	ldr	r3, [r3, #0]
 8024648:	f003 0308 	and.w	r3, r3, #8
 802464c:	2b08      	cmp	r3, #8
 802464e:	d116      	bne.n	802467e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8024650:	2300      	movs	r3, #0
 8024652:	617b      	str	r3, [r7, #20]
 8024654:	68fb      	ldr	r3, [r7, #12]
 8024656:	681b      	ldr	r3, [r3, #0]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	617b      	str	r3, [r7, #20]
 802465c:	68fb      	ldr	r3, [r7, #12]
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	685b      	ldr	r3, [r3, #4]
 8024662:	617b      	str	r3, [r7, #20]
 8024664:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024666:	68f8      	ldr	r0, [r7, #12]
 8024668:	f000 f81d 	bl	80246a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802466c:	68fb      	ldr	r3, [r7, #12]
 802466e:	2208      	movs	r2, #8
 8024670:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024672:	68fb      	ldr	r3, [r7, #12]
 8024674:	2200      	movs	r2, #0
 8024676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 802467a:	2301      	movs	r3, #1
 802467c:	e00f      	b.n	802469e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802467e:	68fb      	ldr	r3, [r7, #12]
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	681a      	ldr	r2, [r3, #0]
 8024684:	68bb      	ldr	r3, [r7, #8]
 8024686:	4013      	ands	r3, r2
 8024688:	68ba      	ldr	r2, [r7, #8]
 802468a:	429a      	cmp	r2, r3
 802468c:	bf0c      	ite	eq
 802468e:	2301      	moveq	r3, #1
 8024690:	2300      	movne	r3, #0
 8024692:	b2db      	uxtb	r3, r3
 8024694:	461a      	mov	r2, r3
 8024696:	79fb      	ldrb	r3, [r7, #7]
 8024698:	429a      	cmp	r2, r3
 802469a:	d0b4      	beq.n	8024606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802469c:	2300      	movs	r3, #0
}
 802469e:	4618      	mov	r0, r3
 80246a0:	3718      	adds	r7, #24
 80246a2:	46bd      	mov	sp, r7
 80246a4:	bd80      	pop	{r7, pc}

080246a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80246a6:	b480      	push	{r7}
 80246a8:	b095      	sub	sp, #84	; 0x54
 80246aa:	af00      	add	r7, sp, #0
 80246ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80246ae:	687b      	ldr	r3, [r7, #4]
 80246b0:	681b      	ldr	r3, [r3, #0]
 80246b2:	330c      	adds	r3, #12
 80246b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80246b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246b8:	e853 3f00 	ldrex	r3, [r3]
 80246bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80246be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80246c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80246c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	681b      	ldr	r3, [r3, #0]
 80246ca:	330c      	adds	r3, #12
 80246cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80246ce:	643a      	str	r2, [r7, #64]	; 0x40
 80246d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80246d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80246d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80246d6:	e841 2300 	strex	r3, r2, [r1]
 80246da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80246dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80246de:	2b00      	cmp	r3, #0
 80246e0:	d1e5      	bne.n	80246ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	681b      	ldr	r3, [r3, #0]
 80246e6:	3314      	adds	r3, #20
 80246e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80246ea:	6a3b      	ldr	r3, [r7, #32]
 80246ec:	e853 3f00 	ldrex	r3, [r3]
 80246f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80246f2:	69fb      	ldr	r3, [r7, #28]
 80246f4:	f023 0301 	bic.w	r3, r3, #1
 80246f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	681b      	ldr	r3, [r3, #0]
 80246fe:	3314      	adds	r3, #20
 8024700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802470a:	e841 2300 	strex	r3, r2, [r1]
 802470e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8024710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024712:	2b00      	cmp	r3, #0
 8024714:	d1e5      	bne.n	80246e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024716:	687b      	ldr	r3, [r7, #4]
 8024718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802471a:	2b01      	cmp	r3, #1
 802471c:	d119      	bne.n	8024752 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	330c      	adds	r3, #12
 8024724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024726:	68fb      	ldr	r3, [r7, #12]
 8024728:	e853 3f00 	ldrex	r3, [r3]
 802472c:	60bb      	str	r3, [r7, #8]
   return(result);
 802472e:	68bb      	ldr	r3, [r7, #8]
 8024730:	f023 0310 	bic.w	r3, r3, #16
 8024734:	647b      	str	r3, [r7, #68]	; 0x44
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	681b      	ldr	r3, [r3, #0]
 802473a:	330c      	adds	r3, #12
 802473c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802473e:	61ba      	str	r2, [r7, #24]
 8024740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024742:	6979      	ldr	r1, [r7, #20]
 8024744:	69ba      	ldr	r2, [r7, #24]
 8024746:	e841 2300 	strex	r3, r2, [r1]
 802474a:	613b      	str	r3, [r7, #16]
   return(result);
 802474c:	693b      	ldr	r3, [r7, #16]
 802474e:	2b00      	cmp	r3, #0
 8024750:	d1e5      	bne.n	802471e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8024752:	687b      	ldr	r3, [r7, #4]
 8024754:	2220      	movs	r2, #32
 8024756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	2200      	movs	r2, #0
 802475e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8024760:	bf00      	nop
 8024762:	3754      	adds	r7, #84	; 0x54
 8024764:	46bd      	mov	sp, r7
 8024766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802476a:	4770      	bx	lr

0802476c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802476c:	b580      	push	{r7, lr}
 802476e:	b084      	sub	sp, #16
 8024770:	af00      	add	r7, sp, #0
 8024772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024774:	687b      	ldr	r3, [r7, #4]
 8024776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802477a:	68fb      	ldr	r3, [r7, #12]
 802477c:	2200      	movs	r2, #0
 802477e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8024780:	68fb      	ldr	r3, [r7, #12]
 8024782:	2200      	movs	r2, #0
 8024784:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8024786:	68f8      	ldr	r0, [r7, #12]
 8024788:	f7ff ff1e 	bl	80245c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802478c:	bf00      	nop
 802478e:	3710      	adds	r7, #16
 8024790:	46bd      	mov	sp, r7
 8024792:	bd80      	pop	{r7, pc}

08024794 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8024794:	b480      	push	{r7}
 8024796:	b085      	sub	sp, #20
 8024798:	af00      	add	r7, sp, #0
 802479a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80247a2:	b2db      	uxtb	r3, r3
 80247a4:	2b21      	cmp	r3, #33	; 0x21
 80247a6:	d13e      	bne.n	8024826 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	689b      	ldr	r3, [r3, #8]
 80247ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80247b0:	d114      	bne.n	80247dc <UART_Transmit_IT+0x48>
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	691b      	ldr	r3, [r3, #16]
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	d110      	bne.n	80247dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80247ba:	687b      	ldr	r3, [r7, #4]
 80247bc:	6a1b      	ldr	r3, [r3, #32]
 80247be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80247c0:	68fb      	ldr	r3, [r7, #12]
 80247c2:	881b      	ldrh	r3, [r3, #0]
 80247c4:	461a      	mov	r2, r3
 80247c6:	687b      	ldr	r3, [r7, #4]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80247ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80247d0:	687b      	ldr	r3, [r7, #4]
 80247d2:	6a1b      	ldr	r3, [r3, #32]
 80247d4:	1c9a      	adds	r2, r3, #2
 80247d6:	687b      	ldr	r3, [r7, #4]
 80247d8:	621a      	str	r2, [r3, #32]
 80247da:	e008      	b.n	80247ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	6a1b      	ldr	r3, [r3, #32]
 80247e0:	1c59      	adds	r1, r3, #1
 80247e2:	687a      	ldr	r2, [r7, #4]
 80247e4:	6211      	str	r1, [r2, #32]
 80247e6:	781a      	ldrb	r2, [r3, #0]
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80247f2:	b29b      	uxth	r3, r3
 80247f4:	3b01      	subs	r3, #1
 80247f6:	b29b      	uxth	r3, r3
 80247f8:	687a      	ldr	r2, [r7, #4]
 80247fa:	4619      	mov	r1, r3
 80247fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80247fe:	2b00      	cmp	r3, #0
 8024800:	d10f      	bne.n	8024822 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	681b      	ldr	r3, [r3, #0]
 8024806:	68da      	ldr	r2, [r3, #12]
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024810:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	681b      	ldr	r3, [r3, #0]
 8024816:	68da      	ldr	r2, [r3, #12]
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	681b      	ldr	r3, [r3, #0]
 802481c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8024820:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8024822:	2300      	movs	r3, #0
 8024824:	e000      	b.n	8024828 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8024826:	2302      	movs	r3, #2
  }
}
 8024828:	4618      	mov	r0, r3
 802482a:	3714      	adds	r7, #20
 802482c:	46bd      	mov	sp, r7
 802482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024832:	4770      	bx	lr

08024834 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8024834:	b580      	push	{r7, lr}
 8024836:	b082      	sub	sp, #8
 8024838:	af00      	add	r7, sp, #0
 802483a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	68da      	ldr	r2, [r3, #12]
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802484a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802484c:	687b      	ldr	r3, [r7, #4]
 802484e:	2220      	movs	r2, #32
 8024850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f7ff fea3 	bl	80245a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802485a:	2300      	movs	r3, #0
}
 802485c:	4618      	mov	r0, r3
 802485e:	3708      	adds	r7, #8
 8024860:	46bd      	mov	sp, r7
 8024862:	bd80      	pop	{r7, pc}

08024864 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8024864:	b580      	push	{r7, lr}
 8024866:	b08c      	sub	sp, #48	; 0x30
 8024868:	af00      	add	r7, sp, #0
 802486a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8024872:	b2db      	uxtb	r3, r3
 8024874:	2b22      	cmp	r3, #34	; 0x22
 8024876:	f040 80ae 	bne.w	80249d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	689b      	ldr	r3, [r3, #8]
 802487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024882:	d117      	bne.n	80248b4 <UART_Receive_IT+0x50>
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	691b      	ldr	r3, [r3, #16]
 8024888:	2b00      	cmp	r3, #0
 802488a:	d113      	bne.n	80248b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802488c:	2300      	movs	r3, #0
 802488e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8024890:	687b      	ldr	r3, [r7, #4]
 8024892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024894:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	681b      	ldr	r3, [r3, #0]
 802489a:	685b      	ldr	r3, [r3, #4]
 802489c:	b29b      	uxth	r3, r3
 802489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80248a2:	b29a      	uxth	r2, r3
 80248a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248ac:	1c9a      	adds	r2, r3, #2
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	629a      	str	r2, [r3, #40]	; 0x28
 80248b2:	e026      	b.n	8024902 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80248ba:	2300      	movs	r3, #0
 80248bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	689b      	ldr	r3, [r3, #8]
 80248c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80248c6:	d007      	beq.n	80248d8 <UART_Receive_IT+0x74>
 80248c8:	687b      	ldr	r3, [r7, #4]
 80248ca:	689b      	ldr	r3, [r3, #8]
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d10a      	bne.n	80248e6 <UART_Receive_IT+0x82>
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	691b      	ldr	r3, [r3, #16]
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	d106      	bne.n	80248e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	685b      	ldr	r3, [r3, #4]
 80248de:	b2da      	uxtb	r2, r3
 80248e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248e2:	701a      	strb	r2, [r3, #0]
 80248e4:	e008      	b.n	80248f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	681b      	ldr	r3, [r3, #0]
 80248ea:	685b      	ldr	r3, [r3, #4]
 80248ec:	b2db      	uxtb	r3, r3
 80248ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80248f2:	b2da      	uxtb	r2, r3
 80248f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248fc:	1c5a      	adds	r2, r3, #1
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024906:	b29b      	uxth	r3, r3
 8024908:	3b01      	subs	r3, #1
 802490a:	b29b      	uxth	r3, r3
 802490c:	687a      	ldr	r2, [r7, #4]
 802490e:	4619      	mov	r1, r3
 8024910:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8024912:	2b00      	cmp	r3, #0
 8024914:	d15d      	bne.n	80249d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	68da      	ldr	r2, [r3, #12]
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	681b      	ldr	r3, [r3, #0]
 8024920:	f022 0220 	bic.w	r2, r2, #32
 8024924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	681b      	ldr	r3, [r3, #0]
 802492a:	68da      	ldr	r2, [r3, #12]
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	681b      	ldr	r3, [r3, #0]
 8024930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	695a      	ldr	r2, [r3, #20]
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	681b      	ldr	r3, [r3, #0]
 8024940:	f022 0201 	bic.w	r2, r2, #1
 8024944:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	2220      	movs	r2, #32
 802494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	2200      	movs	r2, #0
 8024952:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024958:	2b01      	cmp	r3, #1
 802495a:	d135      	bne.n	80249c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	2200      	movs	r2, #0
 8024960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	681b      	ldr	r3, [r3, #0]
 8024966:	330c      	adds	r3, #12
 8024968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802496a:	697b      	ldr	r3, [r7, #20]
 802496c:	e853 3f00 	ldrex	r3, [r3]
 8024970:	613b      	str	r3, [r7, #16]
   return(result);
 8024972:	693b      	ldr	r3, [r7, #16]
 8024974:	f023 0310 	bic.w	r3, r3, #16
 8024978:	627b      	str	r3, [r7, #36]	; 0x24
 802497a:	687b      	ldr	r3, [r7, #4]
 802497c:	681b      	ldr	r3, [r3, #0]
 802497e:	330c      	adds	r3, #12
 8024980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024982:	623a      	str	r2, [r7, #32]
 8024984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024986:	69f9      	ldr	r1, [r7, #28]
 8024988:	6a3a      	ldr	r2, [r7, #32]
 802498a:	e841 2300 	strex	r3, r2, [r1]
 802498e:	61bb      	str	r3, [r7, #24]
   return(result);
 8024990:	69bb      	ldr	r3, [r7, #24]
 8024992:	2b00      	cmp	r3, #0
 8024994:	d1e5      	bne.n	8024962 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8024996:	687b      	ldr	r3, [r7, #4]
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	f003 0310 	and.w	r3, r3, #16
 80249a0:	2b10      	cmp	r3, #16
 80249a2:	d10a      	bne.n	80249ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80249a4:	2300      	movs	r3, #0
 80249a6:	60fb      	str	r3, [r7, #12]
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	681b      	ldr	r3, [r3, #0]
 80249ac:	681b      	ldr	r3, [r3, #0]
 80249ae:	60fb      	str	r3, [r7, #12]
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	681b      	ldr	r3, [r3, #0]
 80249b4:	685b      	ldr	r3, [r3, #4]
 80249b6:	60fb      	str	r3, [r7, #12]
 80249b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80249ba:	687b      	ldr	r3, [r7, #4]
 80249bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80249be:	4619      	mov	r1, r3
 80249c0:	6878      	ldr	r0, [r7, #4]
 80249c2:	f7ff fe0b 	bl	80245dc <HAL_UARTEx_RxEventCallback>
 80249c6:	e002      	b.n	80249ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80249c8:	6878      	ldr	r0, [r7, #4]
 80249ca:	f7ff fdf3 	bl	80245b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80249ce:	2300      	movs	r3, #0
 80249d0:	e002      	b.n	80249d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80249d2:	2300      	movs	r3, #0
 80249d4:	e000      	b.n	80249d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80249d6:	2302      	movs	r3, #2
  }
}
 80249d8:	4618      	mov	r0, r3
 80249da:	3730      	adds	r7, #48	; 0x30
 80249dc:	46bd      	mov	sp, r7
 80249de:	bd80      	pop	{r7, pc}

080249e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80249e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80249e4:	b0c0      	sub	sp, #256	; 0x100
 80249e6:	af00      	add	r7, sp, #0
 80249e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80249ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80249f0:	681b      	ldr	r3, [r3, #0]
 80249f2:	691b      	ldr	r3, [r3, #16]
 80249f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80249f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80249fc:	68d9      	ldr	r1, [r3, #12]
 80249fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a02:	681a      	ldr	r2, [r3, #0]
 8024a04:	ea40 0301 	orr.w	r3, r0, r1
 8024a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8024a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a0e:	689a      	ldr	r2, [r3, #8]
 8024a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a14:	691b      	ldr	r3, [r3, #16]
 8024a16:	431a      	orrs	r2, r3
 8024a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a1c:	695b      	ldr	r3, [r3, #20]
 8024a1e:	431a      	orrs	r2, r3
 8024a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a24:	69db      	ldr	r3, [r3, #28]
 8024a26:	4313      	orrs	r3, r2
 8024a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8024a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	68db      	ldr	r3, [r3, #12]
 8024a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8024a38:	f021 010c 	bic.w	r1, r1, #12
 8024a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a40:	681a      	ldr	r2, [r3, #0]
 8024a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8024a46:	430b      	orrs	r3, r1
 8024a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8024a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	695b      	ldr	r3, [r3, #20]
 8024a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8024a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a5a:	6999      	ldr	r1, [r3, #24]
 8024a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a60:	681a      	ldr	r2, [r3, #0]
 8024a62:	ea40 0301 	orr.w	r3, r0, r1
 8024a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8024a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a6c:	681a      	ldr	r2, [r3, #0]
 8024a6e:	4b8f      	ldr	r3, [pc, #572]	; (8024cac <UART_SetConfig+0x2cc>)
 8024a70:	429a      	cmp	r2, r3
 8024a72:	d005      	beq.n	8024a80 <UART_SetConfig+0xa0>
 8024a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a78:	681a      	ldr	r2, [r3, #0]
 8024a7a:	4b8d      	ldr	r3, [pc, #564]	; (8024cb0 <UART_SetConfig+0x2d0>)
 8024a7c:	429a      	cmp	r2, r3
 8024a7e:	d104      	bne.n	8024a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8024a80:	f7fe f8aa 	bl	8022bd8 <HAL_RCC_GetPCLK2Freq>
 8024a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8024a88:	e003      	b.n	8024a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8024a8a:	f7fe f891 	bl	8022bb0 <HAL_RCC_GetPCLK1Freq>
 8024a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024a96:	69db      	ldr	r3, [r3, #28]
 8024a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024a9c:	f040 810c 	bne.w	8024cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8024aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024aa4:	2200      	movs	r2, #0
 8024aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8024aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8024aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8024ab2:	4622      	mov	r2, r4
 8024ab4:	462b      	mov	r3, r5
 8024ab6:	1891      	adds	r1, r2, r2
 8024ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8024aba:	415b      	adcs	r3, r3
 8024abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8024ac2:	4621      	mov	r1, r4
 8024ac4:	eb12 0801 	adds.w	r8, r2, r1
 8024ac8:	4629      	mov	r1, r5
 8024aca:	eb43 0901 	adc.w	r9, r3, r1
 8024ace:	f04f 0200 	mov.w	r2, #0
 8024ad2:	f04f 0300 	mov.w	r3, #0
 8024ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8024ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8024ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8024ae2:	4690      	mov	r8, r2
 8024ae4:	4699      	mov	r9, r3
 8024ae6:	4623      	mov	r3, r4
 8024ae8:	eb18 0303 	adds.w	r3, r8, r3
 8024aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024af0:	462b      	mov	r3, r5
 8024af2:	eb49 0303 	adc.w	r3, r9, r3
 8024af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8024afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024afe:	685b      	ldr	r3, [r3, #4]
 8024b00:	2200      	movs	r2, #0
 8024b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8024b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8024b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8024b0e:	460b      	mov	r3, r1
 8024b10:	18db      	adds	r3, r3, r3
 8024b12:	653b      	str	r3, [r7, #80]	; 0x50
 8024b14:	4613      	mov	r3, r2
 8024b16:	eb42 0303 	adc.w	r3, r2, r3
 8024b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8024b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8024b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8024b24:	f7fc f8b8 	bl	8020c98 <__aeabi_uldivmod>
 8024b28:	4602      	mov	r2, r0
 8024b2a:	460b      	mov	r3, r1
 8024b2c:	4b61      	ldr	r3, [pc, #388]	; (8024cb4 <UART_SetConfig+0x2d4>)
 8024b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8024b32:	095b      	lsrs	r3, r3, #5
 8024b34:	011c      	lsls	r4, r3, #4
 8024b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024b3a:	2200      	movs	r2, #0
 8024b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8024b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8024b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8024b48:	4642      	mov	r2, r8
 8024b4a:	464b      	mov	r3, r9
 8024b4c:	1891      	adds	r1, r2, r2
 8024b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8024b50:	415b      	adcs	r3, r3
 8024b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8024b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024b58:	4641      	mov	r1, r8
 8024b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8024b5e:	4649      	mov	r1, r9
 8024b60:	eb43 0b01 	adc.w	fp, r3, r1
 8024b64:	f04f 0200 	mov.w	r2, #0
 8024b68:	f04f 0300 	mov.w	r3, #0
 8024b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8024b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8024b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8024b78:	4692      	mov	sl, r2
 8024b7a:	469b      	mov	fp, r3
 8024b7c:	4643      	mov	r3, r8
 8024b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8024b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8024b86:	464b      	mov	r3, r9
 8024b88:	eb4b 0303 	adc.w	r3, fp, r3
 8024b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8024b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024b94:	685b      	ldr	r3, [r3, #4]
 8024b96:	2200      	movs	r2, #0
 8024b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8024b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8024ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8024ba4:	460b      	mov	r3, r1
 8024ba6:	18db      	adds	r3, r3, r3
 8024ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8024baa:	4613      	mov	r3, r2
 8024bac:	eb42 0303 	adc.w	r3, r2, r3
 8024bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8024bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8024bba:	f7fc f86d 	bl	8020c98 <__aeabi_uldivmod>
 8024bbe:	4602      	mov	r2, r0
 8024bc0:	460b      	mov	r3, r1
 8024bc2:	4611      	mov	r1, r2
 8024bc4:	4b3b      	ldr	r3, [pc, #236]	; (8024cb4 <UART_SetConfig+0x2d4>)
 8024bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8024bca:	095b      	lsrs	r3, r3, #5
 8024bcc:	2264      	movs	r2, #100	; 0x64
 8024bce:	fb02 f303 	mul.w	r3, r2, r3
 8024bd2:	1acb      	subs	r3, r1, r3
 8024bd4:	00db      	lsls	r3, r3, #3
 8024bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8024bda:	4b36      	ldr	r3, [pc, #216]	; (8024cb4 <UART_SetConfig+0x2d4>)
 8024bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8024be0:	095b      	lsrs	r3, r3, #5
 8024be2:	005b      	lsls	r3, r3, #1
 8024be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8024be8:	441c      	add	r4, r3
 8024bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024bee:	2200      	movs	r2, #0
 8024bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8024bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8024bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8024bfc:	4642      	mov	r2, r8
 8024bfe:	464b      	mov	r3, r9
 8024c00:	1891      	adds	r1, r2, r2
 8024c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8024c04:	415b      	adcs	r3, r3
 8024c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024c0c:	4641      	mov	r1, r8
 8024c0e:	1851      	adds	r1, r2, r1
 8024c10:	6339      	str	r1, [r7, #48]	; 0x30
 8024c12:	4649      	mov	r1, r9
 8024c14:	414b      	adcs	r3, r1
 8024c16:	637b      	str	r3, [r7, #52]	; 0x34
 8024c18:	f04f 0200 	mov.w	r2, #0
 8024c1c:	f04f 0300 	mov.w	r3, #0
 8024c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8024c24:	4659      	mov	r1, fp
 8024c26:	00cb      	lsls	r3, r1, #3
 8024c28:	4651      	mov	r1, sl
 8024c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024c2e:	4651      	mov	r1, sl
 8024c30:	00ca      	lsls	r2, r1, #3
 8024c32:	4610      	mov	r0, r2
 8024c34:	4619      	mov	r1, r3
 8024c36:	4603      	mov	r3, r0
 8024c38:	4642      	mov	r2, r8
 8024c3a:	189b      	adds	r3, r3, r2
 8024c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8024c40:	464b      	mov	r3, r9
 8024c42:	460a      	mov	r2, r1
 8024c44:	eb42 0303 	adc.w	r3, r2, r3
 8024c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8024c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024c50:	685b      	ldr	r3, [r3, #4]
 8024c52:	2200      	movs	r2, #0
 8024c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8024c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8024c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8024c60:	460b      	mov	r3, r1
 8024c62:	18db      	adds	r3, r3, r3
 8024c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8024c66:	4613      	mov	r3, r2
 8024c68:	eb42 0303 	adc.w	r3, r2, r3
 8024c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8024c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8024c76:	f7fc f80f 	bl	8020c98 <__aeabi_uldivmod>
 8024c7a:	4602      	mov	r2, r0
 8024c7c:	460b      	mov	r3, r1
 8024c7e:	4b0d      	ldr	r3, [pc, #52]	; (8024cb4 <UART_SetConfig+0x2d4>)
 8024c80:	fba3 1302 	umull	r1, r3, r3, r2
 8024c84:	095b      	lsrs	r3, r3, #5
 8024c86:	2164      	movs	r1, #100	; 0x64
 8024c88:	fb01 f303 	mul.w	r3, r1, r3
 8024c8c:	1ad3      	subs	r3, r2, r3
 8024c8e:	00db      	lsls	r3, r3, #3
 8024c90:	3332      	adds	r3, #50	; 0x32
 8024c92:	4a08      	ldr	r2, [pc, #32]	; (8024cb4 <UART_SetConfig+0x2d4>)
 8024c94:	fba2 2303 	umull	r2, r3, r2, r3
 8024c98:	095b      	lsrs	r3, r3, #5
 8024c9a:	f003 0207 	and.w	r2, r3, #7
 8024c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024ca2:	681b      	ldr	r3, [r3, #0]
 8024ca4:	4422      	add	r2, r4
 8024ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8024ca8:	e106      	b.n	8024eb8 <UART_SetConfig+0x4d8>
 8024caa:	bf00      	nop
 8024cac:	40011000 	.word	0x40011000
 8024cb0:	40011400 	.word	0x40011400
 8024cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8024cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024cbc:	2200      	movs	r2, #0
 8024cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8024cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8024cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8024cca:	4642      	mov	r2, r8
 8024ccc:	464b      	mov	r3, r9
 8024cce:	1891      	adds	r1, r2, r2
 8024cd0:	6239      	str	r1, [r7, #32]
 8024cd2:	415b      	adcs	r3, r3
 8024cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8024cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024cda:	4641      	mov	r1, r8
 8024cdc:	1854      	adds	r4, r2, r1
 8024cde:	4649      	mov	r1, r9
 8024ce0:	eb43 0501 	adc.w	r5, r3, r1
 8024ce4:	f04f 0200 	mov.w	r2, #0
 8024ce8:	f04f 0300 	mov.w	r3, #0
 8024cec:	00eb      	lsls	r3, r5, #3
 8024cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8024cf2:	00e2      	lsls	r2, r4, #3
 8024cf4:	4614      	mov	r4, r2
 8024cf6:	461d      	mov	r5, r3
 8024cf8:	4643      	mov	r3, r8
 8024cfa:	18e3      	adds	r3, r4, r3
 8024cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8024d00:	464b      	mov	r3, r9
 8024d02:	eb45 0303 	adc.w	r3, r5, r3
 8024d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8024d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024d0e:	685b      	ldr	r3, [r3, #4]
 8024d10:	2200      	movs	r2, #0
 8024d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8024d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8024d1a:	f04f 0200 	mov.w	r2, #0
 8024d1e:	f04f 0300 	mov.w	r3, #0
 8024d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8024d26:	4629      	mov	r1, r5
 8024d28:	008b      	lsls	r3, r1, #2
 8024d2a:	4621      	mov	r1, r4
 8024d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024d30:	4621      	mov	r1, r4
 8024d32:	008a      	lsls	r2, r1, #2
 8024d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024d38:	f7fb ffae 	bl	8020c98 <__aeabi_uldivmod>
 8024d3c:	4602      	mov	r2, r0
 8024d3e:	460b      	mov	r3, r1
 8024d40:	4b60      	ldr	r3, [pc, #384]	; (8024ec4 <UART_SetConfig+0x4e4>)
 8024d42:	fba3 2302 	umull	r2, r3, r3, r2
 8024d46:	095b      	lsrs	r3, r3, #5
 8024d48:	011c      	lsls	r4, r3, #4
 8024d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024d4e:	2200      	movs	r2, #0
 8024d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8024d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8024d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8024d5c:	4642      	mov	r2, r8
 8024d5e:	464b      	mov	r3, r9
 8024d60:	1891      	adds	r1, r2, r2
 8024d62:	61b9      	str	r1, [r7, #24]
 8024d64:	415b      	adcs	r3, r3
 8024d66:	61fb      	str	r3, [r7, #28]
 8024d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024d6c:	4641      	mov	r1, r8
 8024d6e:	1851      	adds	r1, r2, r1
 8024d70:	6139      	str	r1, [r7, #16]
 8024d72:	4649      	mov	r1, r9
 8024d74:	414b      	adcs	r3, r1
 8024d76:	617b      	str	r3, [r7, #20]
 8024d78:	f04f 0200 	mov.w	r2, #0
 8024d7c:	f04f 0300 	mov.w	r3, #0
 8024d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8024d84:	4659      	mov	r1, fp
 8024d86:	00cb      	lsls	r3, r1, #3
 8024d88:	4651      	mov	r1, sl
 8024d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024d8e:	4651      	mov	r1, sl
 8024d90:	00ca      	lsls	r2, r1, #3
 8024d92:	4610      	mov	r0, r2
 8024d94:	4619      	mov	r1, r3
 8024d96:	4603      	mov	r3, r0
 8024d98:	4642      	mov	r2, r8
 8024d9a:	189b      	adds	r3, r3, r2
 8024d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8024da0:	464b      	mov	r3, r9
 8024da2:	460a      	mov	r2, r1
 8024da4:	eb42 0303 	adc.w	r3, r2, r3
 8024da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8024dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024db0:	685b      	ldr	r3, [r3, #4]
 8024db2:	2200      	movs	r2, #0
 8024db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8024db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8024db8:	f04f 0200 	mov.w	r2, #0
 8024dbc:	f04f 0300 	mov.w	r3, #0
 8024dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8024dc4:	4649      	mov	r1, r9
 8024dc6:	008b      	lsls	r3, r1, #2
 8024dc8:	4641      	mov	r1, r8
 8024dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024dce:	4641      	mov	r1, r8
 8024dd0:	008a      	lsls	r2, r1, #2
 8024dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8024dd6:	f7fb ff5f 	bl	8020c98 <__aeabi_uldivmod>
 8024dda:	4602      	mov	r2, r0
 8024ddc:	460b      	mov	r3, r1
 8024dde:	4611      	mov	r1, r2
 8024de0:	4b38      	ldr	r3, [pc, #224]	; (8024ec4 <UART_SetConfig+0x4e4>)
 8024de2:	fba3 2301 	umull	r2, r3, r3, r1
 8024de6:	095b      	lsrs	r3, r3, #5
 8024de8:	2264      	movs	r2, #100	; 0x64
 8024dea:	fb02 f303 	mul.w	r3, r2, r3
 8024dee:	1acb      	subs	r3, r1, r3
 8024df0:	011b      	lsls	r3, r3, #4
 8024df2:	3332      	adds	r3, #50	; 0x32
 8024df4:	4a33      	ldr	r2, [pc, #204]	; (8024ec4 <UART_SetConfig+0x4e4>)
 8024df6:	fba2 2303 	umull	r2, r3, r2, r3
 8024dfa:	095b      	lsrs	r3, r3, #5
 8024dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024e00:	441c      	add	r4, r3
 8024e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024e06:	2200      	movs	r2, #0
 8024e08:	673b      	str	r3, [r7, #112]	; 0x70
 8024e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8024e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8024e10:	4642      	mov	r2, r8
 8024e12:	464b      	mov	r3, r9
 8024e14:	1891      	adds	r1, r2, r2
 8024e16:	60b9      	str	r1, [r7, #8]
 8024e18:	415b      	adcs	r3, r3
 8024e1a:	60fb      	str	r3, [r7, #12]
 8024e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024e20:	4641      	mov	r1, r8
 8024e22:	1851      	adds	r1, r2, r1
 8024e24:	6039      	str	r1, [r7, #0]
 8024e26:	4649      	mov	r1, r9
 8024e28:	414b      	adcs	r3, r1
 8024e2a:	607b      	str	r3, [r7, #4]
 8024e2c:	f04f 0200 	mov.w	r2, #0
 8024e30:	f04f 0300 	mov.w	r3, #0
 8024e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8024e38:	4659      	mov	r1, fp
 8024e3a:	00cb      	lsls	r3, r1, #3
 8024e3c:	4651      	mov	r1, sl
 8024e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024e42:	4651      	mov	r1, sl
 8024e44:	00ca      	lsls	r2, r1, #3
 8024e46:	4610      	mov	r0, r2
 8024e48:	4619      	mov	r1, r3
 8024e4a:	4603      	mov	r3, r0
 8024e4c:	4642      	mov	r2, r8
 8024e4e:	189b      	adds	r3, r3, r2
 8024e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8024e52:	464b      	mov	r3, r9
 8024e54:	460a      	mov	r2, r1
 8024e56:	eb42 0303 	adc.w	r3, r2, r3
 8024e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024e60:	685b      	ldr	r3, [r3, #4]
 8024e62:	2200      	movs	r2, #0
 8024e64:	663b      	str	r3, [r7, #96]	; 0x60
 8024e66:	667a      	str	r2, [r7, #100]	; 0x64
 8024e68:	f04f 0200 	mov.w	r2, #0
 8024e6c:	f04f 0300 	mov.w	r3, #0
 8024e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8024e74:	4649      	mov	r1, r9
 8024e76:	008b      	lsls	r3, r1, #2
 8024e78:	4641      	mov	r1, r8
 8024e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024e7e:	4641      	mov	r1, r8
 8024e80:	008a      	lsls	r2, r1, #2
 8024e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8024e86:	f7fb ff07 	bl	8020c98 <__aeabi_uldivmod>
 8024e8a:	4602      	mov	r2, r0
 8024e8c:	460b      	mov	r3, r1
 8024e8e:	4b0d      	ldr	r3, [pc, #52]	; (8024ec4 <UART_SetConfig+0x4e4>)
 8024e90:	fba3 1302 	umull	r1, r3, r3, r2
 8024e94:	095b      	lsrs	r3, r3, #5
 8024e96:	2164      	movs	r1, #100	; 0x64
 8024e98:	fb01 f303 	mul.w	r3, r1, r3
 8024e9c:	1ad3      	subs	r3, r2, r3
 8024e9e:	011b      	lsls	r3, r3, #4
 8024ea0:	3332      	adds	r3, #50	; 0x32
 8024ea2:	4a08      	ldr	r2, [pc, #32]	; (8024ec4 <UART_SetConfig+0x4e4>)
 8024ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8024ea8:	095b      	lsrs	r3, r3, #5
 8024eaa:	f003 020f 	and.w	r2, r3, #15
 8024eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	4422      	add	r2, r4
 8024eb6:	609a      	str	r2, [r3, #8]
}
 8024eb8:	bf00      	nop
 8024eba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8024ebe:	46bd      	mov	sp, r7
 8024ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024ec4:	51eb851f 	.word	0x51eb851f

08024ec8 <__cvt>:
 8024ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024ecc:	ec55 4b10 	vmov	r4, r5, d0
 8024ed0:	2d00      	cmp	r5, #0
 8024ed2:	460e      	mov	r6, r1
 8024ed4:	4619      	mov	r1, r3
 8024ed6:	462b      	mov	r3, r5
 8024ed8:	bfbb      	ittet	lt
 8024eda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024ede:	461d      	movlt	r5, r3
 8024ee0:	2300      	movge	r3, #0
 8024ee2:	232d      	movlt	r3, #45	; 0x2d
 8024ee4:	700b      	strb	r3, [r1, #0]
 8024ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024eec:	4691      	mov	r9, r2
 8024eee:	f023 0820 	bic.w	r8, r3, #32
 8024ef2:	bfbc      	itt	lt
 8024ef4:	4622      	movlt	r2, r4
 8024ef6:	4614      	movlt	r4, r2
 8024ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024efc:	d005      	beq.n	8024f0a <__cvt+0x42>
 8024efe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024f02:	d100      	bne.n	8024f06 <__cvt+0x3e>
 8024f04:	3601      	adds	r6, #1
 8024f06:	2102      	movs	r1, #2
 8024f08:	e000      	b.n	8024f0c <__cvt+0x44>
 8024f0a:	2103      	movs	r1, #3
 8024f0c:	ab03      	add	r3, sp, #12
 8024f0e:	9301      	str	r3, [sp, #4]
 8024f10:	ab02      	add	r3, sp, #8
 8024f12:	9300      	str	r3, [sp, #0]
 8024f14:	ec45 4b10 	vmov	d0, r4, r5
 8024f18:	4653      	mov	r3, sl
 8024f1a:	4632      	mov	r2, r6
 8024f1c:	f001 f8ac 	bl	8026078 <_dtoa_r>
 8024f20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024f24:	4607      	mov	r7, r0
 8024f26:	d102      	bne.n	8024f2e <__cvt+0x66>
 8024f28:	f019 0f01 	tst.w	r9, #1
 8024f2c:	d022      	beq.n	8024f74 <__cvt+0xac>
 8024f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024f32:	eb07 0906 	add.w	r9, r7, r6
 8024f36:	d110      	bne.n	8024f5a <__cvt+0x92>
 8024f38:	783b      	ldrb	r3, [r7, #0]
 8024f3a:	2b30      	cmp	r3, #48	; 0x30
 8024f3c:	d10a      	bne.n	8024f54 <__cvt+0x8c>
 8024f3e:	2200      	movs	r2, #0
 8024f40:	2300      	movs	r3, #0
 8024f42:	4620      	mov	r0, r4
 8024f44:	4629      	mov	r1, r5
 8024f46:	f7fb fdc7 	bl	8020ad8 <__aeabi_dcmpeq>
 8024f4a:	b918      	cbnz	r0, 8024f54 <__cvt+0x8c>
 8024f4c:	f1c6 0601 	rsb	r6, r6, #1
 8024f50:	f8ca 6000 	str.w	r6, [sl]
 8024f54:	f8da 3000 	ldr.w	r3, [sl]
 8024f58:	4499      	add	r9, r3
 8024f5a:	2200      	movs	r2, #0
 8024f5c:	2300      	movs	r3, #0
 8024f5e:	4620      	mov	r0, r4
 8024f60:	4629      	mov	r1, r5
 8024f62:	f7fb fdb9 	bl	8020ad8 <__aeabi_dcmpeq>
 8024f66:	b108      	cbz	r0, 8024f6c <__cvt+0xa4>
 8024f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8024f6c:	2230      	movs	r2, #48	; 0x30
 8024f6e:	9b03      	ldr	r3, [sp, #12]
 8024f70:	454b      	cmp	r3, r9
 8024f72:	d307      	bcc.n	8024f84 <__cvt+0xbc>
 8024f74:	9b03      	ldr	r3, [sp, #12]
 8024f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f78:	1bdb      	subs	r3, r3, r7
 8024f7a:	4638      	mov	r0, r7
 8024f7c:	6013      	str	r3, [r2, #0]
 8024f7e:	b004      	add	sp, #16
 8024f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024f84:	1c59      	adds	r1, r3, #1
 8024f86:	9103      	str	r1, [sp, #12]
 8024f88:	701a      	strb	r2, [r3, #0]
 8024f8a:	e7f0      	b.n	8024f6e <__cvt+0xa6>

08024f8c <__exponent>:
 8024f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f8e:	4603      	mov	r3, r0
 8024f90:	2900      	cmp	r1, #0
 8024f92:	bfb8      	it	lt
 8024f94:	4249      	neglt	r1, r1
 8024f96:	f803 2b02 	strb.w	r2, [r3], #2
 8024f9a:	bfb4      	ite	lt
 8024f9c:	222d      	movlt	r2, #45	; 0x2d
 8024f9e:	222b      	movge	r2, #43	; 0x2b
 8024fa0:	2909      	cmp	r1, #9
 8024fa2:	7042      	strb	r2, [r0, #1]
 8024fa4:	dd2a      	ble.n	8024ffc <__exponent+0x70>
 8024fa6:	f10d 0207 	add.w	r2, sp, #7
 8024faa:	4617      	mov	r7, r2
 8024fac:	260a      	movs	r6, #10
 8024fae:	4694      	mov	ip, r2
 8024fb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8024fb4:	fb06 1415 	mls	r4, r6, r5, r1
 8024fb8:	3430      	adds	r4, #48	; 0x30
 8024fba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8024fbe:	460c      	mov	r4, r1
 8024fc0:	2c63      	cmp	r4, #99	; 0x63
 8024fc2:	f102 32ff 	add.w	r2, r2, #4294967295
 8024fc6:	4629      	mov	r1, r5
 8024fc8:	dcf1      	bgt.n	8024fae <__exponent+0x22>
 8024fca:	3130      	adds	r1, #48	; 0x30
 8024fcc:	f1ac 0402 	sub.w	r4, ip, #2
 8024fd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024fd4:	1c41      	adds	r1, r0, #1
 8024fd6:	4622      	mov	r2, r4
 8024fd8:	42ba      	cmp	r2, r7
 8024fda:	d30a      	bcc.n	8024ff2 <__exponent+0x66>
 8024fdc:	f10d 0209 	add.w	r2, sp, #9
 8024fe0:	eba2 020c 	sub.w	r2, r2, ip
 8024fe4:	42bc      	cmp	r4, r7
 8024fe6:	bf88      	it	hi
 8024fe8:	2200      	movhi	r2, #0
 8024fea:	4413      	add	r3, r2
 8024fec:	1a18      	subs	r0, r3, r0
 8024fee:	b003      	add	sp, #12
 8024ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024ff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8024ffa:	e7ed      	b.n	8024fd8 <__exponent+0x4c>
 8024ffc:	2330      	movs	r3, #48	; 0x30
 8024ffe:	3130      	adds	r1, #48	; 0x30
 8025000:	7083      	strb	r3, [r0, #2]
 8025002:	70c1      	strb	r1, [r0, #3]
 8025004:	1d03      	adds	r3, r0, #4
 8025006:	e7f1      	b.n	8024fec <__exponent+0x60>

08025008 <_printf_float>:
 8025008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802500c:	ed2d 8b02 	vpush	{d8}
 8025010:	b08d      	sub	sp, #52	; 0x34
 8025012:	460c      	mov	r4, r1
 8025014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8025018:	4616      	mov	r6, r2
 802501a:	461f      	mov	r7, r3
 802501c:	4605      	mov	r5, r0
 802501e:	f000 ff25 	bl	8025e6c <_localeconv_r>
 8025022:	f8d0 a000 	ldr.w	sl, [r0]
 8025026:	4650      	mov	r0, sl
 8025028:	f7fb f92a 	bl	8020280 <strlen>
 802502c:	2300      	movs	r3, #0
 802502e:	930a      	str	r3, [sp, #40]	; 0x28
 8025030:	6823      	ldr	r3, [r4, #0]
 8025032:	9305      	str	r3, [sp, #20]
 8025034:	f8d8 3000 	ldr.w	r3, [r8]
 8025038:	f894 b018 	ldrb.w	fp, [r4, #24]
 802503c:	3307      	adds	r3, #7
 802503e:	f023 0307 	bic.w	r3, r3, #7
 8025042:	f103 0208 	add.w	r2, r3, #8
 8025046:	f8c8 2000 	str.w	r2, [r8]
 802504a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802504e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8025052:	9307      	str	r3, [sp, #28]
 8025054:	f8cd 8018 	str.w	r8, [sp, #24]
 8025058:	ee08 0a10 	vmov	s16, r0
 802505c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8025060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025064:	4b9e      	ldr	r3, [pc, #632]	; (80252e0 <_printf_float+0x2d8>)
 8025066:	f04f 32ff 	mov.w	r2, #4294967295
 802506a:	f7fb fd67 	bl	8020b3c <__aeabi_dcmpun>
 802506e:	bb88      	cbnz	r0, 80250d4 <_printf_float+0xcc>
 8025070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025074:	4b9a      	ldr	r3, [pc, #616]	; (80252e0 <_printf_float+0x2d8>)
 8025076:	f04f 32ff 	mov.w	r2, #4294967295
 802507a:	f7fb fd41 	bl	8020b00 <__aeabi_dcmple>
 802507e:	bb48      	cbnz	r0, 80250d4 <_printf_float+0xcc>
 8025080:	2200      	movs	r2, #0
 8025082:	2300      	movs	r3, #0
 8025084:	4640      	mov	r0, r8
 8025086:	4649      	mov	r1, r9
 8025088:	f7fb fd30 	bl	8020aec <__aeabi_dcmplt>
 802508c:	b110      	cbz	r0, 8025094 <_printf_float+0x8c>
 802508e:	232d      	movs	r3, #45	; 0x2d
 8025090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025094:	4a93      	ldr	r2, [pc, #588]	; (80252e4 <_printf_float+0x2dc>)
 8025096:	4b94      	ldr	r3, [pc, #592]	; (80252e8 <_printf_float+0x2e0>)
 8025098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802509c:	bf94      	ite	ls
 802509e:	4690      	movls	r8, r2
 80250a0:	4698      	movhi	r8, r3
 80250a2:	2303      	movs	r3, #3
 80250a4:	6123      	str	r3, [r4, #16]
 80250a6:	9b05      	ldr	r3, [sp, #20]
 80250a8:	f023 0304 	bic.w	r3, r3, #4
 80250ac:	6023      	str	r3, [r4, #0]
 80250ae:	f04f 0900 	mov.w	r9, #0
 80250b2:	9700      	str	r7, [sp, #0]
 80250b4:	4633      	mov	r3, r6
 80250b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80250b8:	4621      	mov	r1, r4
 80250ba:	4628      	mov	r0, r5
 80250bc:	f000 f9da 	bl	8025474 <_printf_common>
 80250c0:	3001      	adds	r0, #1
 80250c2:	f040 8090 	bne.w	80251e6 <_printf_float+0x1de>
 80250c6:	f04f 30ff 	mov.w	r0, #4294967295
 80250ca:	b00d      	add	sp, #52	; 0x34
 80250cc:	ecbd 8b02 	vpop	{d8}
 80250d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250d4:	4642      	mov	r2, r8
 80250d6:	464b      	mov	r3, r9
 80250d8:	4640      	mov	r0, r8
 80250da:	4649      	mov	r1, r9
 80250dc:	f7fb fd2e 	bl	8020b3c <__aeabi_dcmpun>
 80250e0:	b140      	cbz	r0, 80250f4 <_printf_float+0xec>
 80250e2:	464b      	mov	r3, r9
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	bfbc      	itt	lt
 80250e8:	232d      	movlt	r3, #45	; 0x2d
 80250ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80250ee:	4a7f      	ldr	r2, [pc, #508]	; (80252ec <_printf_float+0x2e4>)
 80250f0:	4b7f      	ldr	r3, [pc, #508]	; (80252f0 <_printf_float+0x2e8>)
 80250f2:	e7d1      	b.n	8025098 <_printf_float+0x90>
 80250f4:	6863      	ldr	r3, [r4, #4]
 80250f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80250fa:	9206      	str	r2, [sp, #24]
 80250fc:	1c5a      	adds	r2, r3, #1
 80250fe:	d13f      	bne.n	8025180 <_printf_float+0x178>
 8025100:	2306      	movs	r3, #6
 8025102:	6063      	str	r3, [r4, #4]
 8025104:	9b05      	ldr	r3, [sp, #20]
 8025106:	6861      	ldr	r1, [r4, #4]
 8025108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802510c:	2300      	movs	r3, #0
 802510e:	9303      	str	r3, [sp, #12]
 8025110:	ab0a      	add	r3, sp, #40	; 0x28
 8025112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8025116:	ab09      	add	r3, sp, #36	; 0x24
 8025118:	ec49 8b10 	vmov	d0, r8, r9
 802511c:	9300      	str	r3, [sp, #0]
 802511e:	6022      	str	r2, [r4, #0]
 8025120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8025124:	4628      	mov	r0, r5
 8025126:	f7ff fecf 	bl	8024ec8 <__cvt>
 802512a:	9b06      	ldr	r3, [sp, #24]
 802512c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802512e:	2b47      	cmp	r3, #71	; 0x47
 8025130:	4680      	mov	r8, r0
 8025132:	d108      	bne.n	8025146 <_printf_float+0x13e>
 8025134:	1cc8      	adds	r0, r1, #3
 8025136:	db02      	blt.n	802513e <_printf_float+0x136>
 8025138:	6863      	ldr	r3, [r4, #4]
 802513a:	4299      	cmp	r1, r3
 802513c:	dd41      	ble.n	80251c2 <_printf_float+0x1ba>
 802513e:	f1ab 0302 	sub.w	r3, fp, #2
 8025142:	fa5f fb83 	uxtb.w	fp, r3
 8025146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802514a:	d820      	bhi.n	802518e <_printf_float+0x186>
 802514c:	3901      	subs	r1, #1
 802514e:	465a      	mov	r2, fp
 8025150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025154:	9109      	str	r1, [sp, #36]	; 0x24
 8025156:	f7ff ff19 	bl	8024f8c <__exponent>
 802515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802515c:	1813      	adds	r3, r2, r0
 802515e:	2a01      	cmp	r2, #1
 8025160:	4681      	mov	r9, r0
 8025162:	6123      	str	r3, [r4, #16]
 8025164:	dc02      	bgt.n	802516c <_printf_float+0x164>
 8025166:	6822      	ldr	r2, [r4, #0]
 8025168:	07d2      	lsls	r2, r2, #31
 802516a:	d501      	bpl.n	8025170 <_printf_float+0x168>
 802516c:	3301      	adds	r3, #1
 802516e:	6123      	str	r3, [r4, #16]
 8025170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8025174:	2b00      	cmp	r3, #0
 8025176:	d09c      	beq.n	80250b2 <_printf_float+0xaa>
 8025178:	232d      	movs	r3, #45	; 0x2d
 802517a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802517e:	e798      	b.n	80250b2 <_printf_float+0xaa>
 8025180:	9a06      	ldr	r2, [sp, #24]
 8025182:	2a47      	cmp	r2, #71	; 0x47
 8025184:	d1be      	bne.n	8025104 <_printf_float+0xfc>
 8025186:	2b00      	cmp	r3, #0
 8025188:	d1bc      	bne.n	8025104 <_printf_float+0xfc>
 802518a:	2301      	movs	r3, #1
 802518c:	e7b9      	b.n	8025102 <_printf_float+0xfa>
 802518e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8025192:	d118      	bne.n	80251c6 <_printf_float+0x1be>
 8025194:	2900      	cmp	r1, #0
 8025196:	6863      	ldr	r3, [r4, #4]
 8025198:	dd0b      	ble.n	80251b2 <_printf_float+0x1aa>
 802519a:	6121      	str	r1, [r4, #16]
 802519c:	b913      	cbnz	r3, 80251a4 <_printf_float+0x19c>
 802519e:	6822      	ldr	r2, [r4, #0]
 80251a0:	07d0      	lsls	r0, r2, #31
 80251a2:	d502      	bpl.n	80251aa <_printf_float+0x1a2>
 80251a4:	3301      	adds	r3, #1
 80251a6:	440b      	add	r3, r1
 80251a8:	6123      	str	r3, [r4, #16]
 80251aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80251ac:	f04f 0900 	mov.w	r9, #0
 80251b0:	e7de      	b.n	8025170 <_printf_float+0x168>
 80251b2:	b913      	cbnz	r3, 80251ba <_printf_float+0x1b2>
 80251b4:	6822      	ldr	r2, [r4, #0]
 80251b6:	07d2      	lsls	r2, r2, #31
 80251b8:	d501      	bpl.n	80251be <_printf_float+0x1b6>
 80251ba:	3302      	adds	r3, #2
 80251bc:	e7f4      	b.n	80251a8 <_printf_float+0x1a0>
 80251be:	2301      	movs	r3, #1
 80251c0:	e7f2      	b.n	80251a8 <_printf_float+0x1a0>
 80251c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80251c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251c8:	4299      	cmp	r1, r3
 80251ca:	db05      	blt.n	80251d8 <_printf_float+0x1d0>
 80251cc:	6823      	ldr	r3, [r4, #0]
 80251ce:	6121      	str	r1, [r4, #16]
 80251d0:	07d8      	lsls	r0, r3, #31
 80251d2:	d5ea      	bpl.n	80251aa <_printf_float+0x1a2>
 80251d4:	1c4b      	adds	r3, r1, #1
 80251d6:	e7e7      	b.n	80251a8 <_printf_float+0x1a0>
 80251d8:	2900      	cmp	r1, #0
 80251da:	bfd4      	ite	le
 80251dc:	f1c1 0202 	rsble	r2, r1, #2
 80251e0:	2201      	movgt	r2, #1
 80251e2:	4413      	add	r3, r2
 80251e4:	e7e0      	b.n	80251a8 <_printf_float+0x1a0>
 80251e6:	6823      	ldr	r3, [r4, #0]
 80251e8:	055a      	lsls	r2, r3, #21
 80251ea:	d407      	bmi.n	80251fc <_printf_float+0x1f4>
 80251ec:	6923      	ldr	r3, [r4, #16]
 80251ee:	4642      	mov	r2, r8
 80251f0:	4631      	mov	r1, r6
 80251f2:	4628      	mov	r0, r5
 80251f4:	47b8      	blx	r7
 80251f6:	3001      	adds	r0, #1
 80251f8:	d12c      	bne.n	8025254 <_printf_float+0x24c>
 80251fa:	e764      	b.n	80250c6 <_printf_float+0xbe>
 80251fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8025200:	f240 80e0 	bls.w	80253c4 <_printf_float+0x3bc>
 8025204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025208:	2200      	movs	r2, #0
 802520a:	2300      	movs	r3, #0
 802520c:	f7fb fc64 	bl	8020ad8 <__aeabi_dcmpeq>
 8025210:	2800      	cmp	r0, #0
 8025212:	d034      	beq.n	802527e <_printf_float+0x276>
 8025214:	4a37      	ldr	r2, [pc, #220]	; (80252f4 <_printf_float+0x2ec>)
 8025216:	2301      	movs	r3, #1
 8025218:	4631      	mov	r1, r6
 802521a:	4628      	mov	r0, r5
 802521c:	47b8      	blx	r7
 802521e:	3001      	adds	r0, #1
 8025220:	f43f af51 	beq.w	80250c6 <_printf_float+0xbe>
 8025224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025228:	429a      	cmp	r2, r3
 802522a:	db02      	blt.n	8025232 <_printf_float+0x22a>
 802522c:	6823      	ldr	r3, [r4, #0]
 802522e:	07d8      	lsls	r0, r3, #31
 8025230:	d510      	bpl.n	8025254 <_printf_float+0x24c>
 8025232:	ee18 3a10 	vmov	r3, s16
 8025236:	4652      	mov	r2, sl
 8025238:	4631      	mov	r1, r6
 802523a:	4628      	mov	r0, r5
 802523c:	47b8      	blx	r7
 802523e:	3001      	adds	r0, #1
 8025240:	f43f af41 	beq.w	80250c6 <_printf_float+0xbe>
 8025244:	f04f 0800 	mov.w	r8, #0
 8025248:	f104 091a 	add.w	r9, r4, #26
 802524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802524e:	3b01      	subs	r3, #1
 8025250:	4543      	cmp	r3, r8
 8025252:	dc09      	bgt.n	8025268 <_printf_float+0x260>
 8025254:	6823      	ldr	r3, [r4, #0]
 8025256:	079b      	lsls	r3, r3, #30
 8025258:	f100 8107 	bmi.w	802546a <_printf_float+0x462>
 802525c:	68e0      	ldr	r0, [r4, #12]
 802525e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025260:	4298      	cmp	r0, r3
 8025262:	bfb8      	it	lt
 8025264:	4618      	movlt	r0, r3
 8025266:	e730      	b.n	80250ca <_printf_float+0xc2>
 8025268:	2301      	movs	r3, #1
 802526a:	464a      	mov	r2, r9
 802526c:	4631      	mov	r1, r6
 802526e:	4628      	mov	r0, r5
 8025270:	47b8      	blx	r7
 8025272:	3001      	adds	r0, #1
 8025274:	f43f af27 	beq.w	80250c6 <_printf_float+0xbe>
 8025278:	f108 0801 	add.w	r8, r8, #1
 802527c:	e7e6      	b.n	802524c <_printf_float+0x244>
 802527e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025280:	2b00      	cmp	r3, #0
 8025282:	dc39      	bgt.n	80252f8 <_printf_float+0x2f0>
 8025284:	4a1b      	ldr	r2, [pc, #108]	; (80252f4 <_printf_float+0x2ec>)
 8025286:	2301      	movs	r3, #1
 8025288:	4631      	mov	r1, r6
 802528a:	4628      	mov	r0, r5
 802528c:	47b8      	blx	r7
 802528e:	3001      	adds	r0, #1
 8025290:	f43f af19 	beq.w	80250c6 <_printf_float+0xbe>
 8025294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8025298:	4313      	orrs	r3, r2
 802529a:	d102      	bne.n	80252a2 <_printf_float+0x29a>
 802529c:	6823      	ldr	r3, [r4, #0]
 802529e:	07d9      	lsls	r1, r3, #31
 80252a0:	d5d8      	bpl.n	8025254 <_printf_float+0x24c>
 80252a2:	ee18 3a10 	vmov	r3, s16
 80252a6:	4652      	mov	r2, sl
 80252a8:	4631      	mov	r1, r6
 80252aa:	4628      	mov	r0, r5
 80252ac:	47b8      	blx	r7
 80252ae:	3001      	adds	r0, #1
 80252b0:	f43f af09 	beq.w	80250c6 <_printf_float+0xbe>
 80252b4:	f04f 0900 	mov.w	r9, #0
 80252b8:	f104 0a1a 	add.w	sl, r4, #26
 80252bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252be:	425b      	negs	r3, r3
 80252c0:	454b      	cmp	r3, r9
 80252c2:	dc01      	bgt.n	80252c8 <_printf_float+0x2c0>
 80252c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252c6:	e792      	b.n	80251ee <_printf_float+0x1e6>
 80252c8:	2301      	movs	r3, #1
 80252ca:	4652      	mov	r2, sl
 80252cc:	4631      	mov	r1, r6
 80252ce:	4628      	mov	r0, r5
 80252d0:	47b8      	blx	r7
 80252d2:	3001      	adds	r0, #1
 80252d4:	f43f aef7 	beq.w	80250c6 <_printf_float+0xbe>
 80252d8:	f109 0901 	add.w	r9, r9, #1
 80252dc:	e7ee      	b.n	80252bc <_printf_float+0x2b4>
 80252de:	bf00      	nop
 80252e0:	7fefffff 	.word	0x7fefffff
 80252e4:	08029f54 	.word	0x08029f54
 80252e8:	08029f58 	.word	0x08029f58
 80252ec:	08029f5c 	.word	0x08029f5c
 80252f0:	08029f60 	.word	0x08029f60
 80252f4:	0802a2f0 	.word	0x0802a2f0
 80252f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80252fc:	429a      	cmp	r2, r3
 80252fe:	bfa8      	it	ge
 8025300:	461a      	movge	r2, r3
 8025302:	2a00      	cmp	r2, #0
 8025304:	4691      	mov	r9, r2
 8025306:	dc37      	bgt.n	8025378 <_printf_float+0x370>
 8025308:	f04f 0b00 	mov.w	fp, #0
 802530c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025310:	f104 021a 	add.w	r2, r4, #26
 8025314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025316:	9305      	str	r3, [sp, #20]
 8025318:	eba3 0309 	sub.w	r3, r3, r9
 802531c:	455b      	cmp	r3, fp
 802531e:	dc33      	bgt.n	8025388 <_printf_float+0x380>
 8025320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025324:	429a      	cmp	r2, r3
 8025326:	db3b      	blt.n	80253a0 <_printf_float+0x398>
 8025328:	6823      	ldr	r3, [r4, #0]
 802532a:	07da      	lsls	r2, r3, #31
 802532c:	d438      	bmi.n	80253a0 <_printf_float+0x398>
 802532e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8025332:	eba2 0903 	sub.w	r9, r2, r3
 8025336:	9b05      	ldr	r3, [sp, #20]
 8025338:	1ad2      	subs	r2, r2, r3
 802533a:	4591      	cmp	r9, r2
 802533c:	bfa8      	it	ge
 802533e:	4691      	movge	r9, r2
 8025340:	f1b9 0f00 	cmp.w	r9, #0
 8025344:	dc35      	bgt.n	80253b2 <_printf_float+0x3aa>
 8025346:	f04f 0800 	mov.w	r8, #0
 802534a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802534e:	f104 0a1a 	add.w	sl, r4, #26
 8025352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025356:	1a9b      	subs	r3, r3, r2
 8025358:	eba3 0309 	sub.w	r3, r3, r9
 802535c:	4543      	cmp	r3, r8
 802535e:	f77f af79 	ble.w	8025254 <_printf_float+0x24c>
 8025362:	2301      	movs	r3, #1
 8025364:	4652      	mov	r2, sl
 8025366:	4631      	mov	r1, r6
 8025368:	4628      	mov	r0, r5
 802536a:	47b8      	blx	r7
 802536c:	3001      	adds	r0, #1
 802536e:	f43f aeaa 	beq.w	80250c6 <_printf_float+0xbe>
 8025372:	f108 0801 	add.w	r8, r8, #1
 8025376:	e7ec      	b.n	8025352 <_printf_float+0x34a>
 8025378:	4613      	mov	r3, r2
 802537a:	4631      	mov	r1, r6
 802537c:	4642      	mov	r2, r8
 802537e:	4628      	mov	r0, r5
 8025380:	47b8      	blx	r7
 8025382:	3001      	adds	r0, #1
 8025384:	d1c0      	bne.n	8025308 <_printf_float+0x300>
 8025386:	e69e      	b.n	80250c6 <_printf_float+0xbe>
 8025388:	2301      	movs	r3, #1
 802538a:	4631      	mov	r1, r6
 802538c:	4628      	mov	r0, r5
 802538e:	9205      	str	r2, [sp, #20]
 8025390:	47b8      	blx	r7
 8025392:	3001      	adds	r0, #1
 8025394:	f43f ae97 	beq.w	80250c6 <_printf_float+0xbe>
 8025398:	9a05      	ldr	r2, [sp, #20]
 802539a:	f10b 0b01 	add.w	fp, fp, #1
 802539e:	e7b9      	b.n	8025314 <_printf_float+0x30c>
 80253a0:	ee18 3a10 	vmov	r3, s16
 80253a4:	4652      	mov	r2, sl
 80253a6:	4631      	mov	r1, r6
 80253a8:	4628      	mov	r0, r5
 80253aa:	47b8      	blx	r7
 80253ac:	3001      	adds	r0, #1
 80253ae:	d1be      	bne.n	802532e <_printf_float+0x326>
 80253b0:	e689      	b.n	80250c6 <_printf_float+0xbe>
 80253b2:	9a05      	ldr	r2, [sp, #20]
 80253b4:	464b      	mov	r3, r9
 80253b6:	4442      	add	r2, r8
 80253b8:	4631      	mov	r1, r6
 80253ba:	4628      	mov	r0, r5
 80253bc:	47b8      	blx	r7
 80253be:	3001      	adds	r0, #1
 80253c0:	d1c1      	bne.n	8025346 <_printf_float+0x33e>
 80253c2:	e680      	b.n	80250c6 <_printf_float+0xbe>
 80253c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80253c6:	2a01      	cmp	r2, #1
 80253c8:	dc01      	bgt.n	80253ce <_printf_float+0x3c6>
 80253ca:	07db      	lsls	r3, r3, #31
 80253cc:	d53a      	bpl.n	8025444 <_printf_float+0x43c>
 80253ce:	2301      	movs	r3, #1
 80253d0:	4642      	mov	r2, r8
 80253d2:	4631      	mov	r1, r6
 80253d4:	4628      	mov	r0, r5
 80253d6:	47b8      	blx	r7
 80253d8:	3001      	adds	r0, #1
 80253da:	f43f ae74 	beq.w	80250c6 <_printf_float+0xbe>
 80253de:	ee18 3a10 	vmov	r3, s16
 80253e2:	4652      	mov	r2, sl
 80253e4:	4631      	mov	r1, r6
 80253e6:	4628      	mov	r0, r5
 80253e8:	47b8      	blx	r7
 80253ea:	3001      	adds	r0, #1
 80253ec:	f43f ae6b 	beq.w	80250c6 <_printf_float+0xbe>
 80253f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80253f4:	2200      	movs	r2, #0
 80253f6:	2300      	movs	r3, #0
 80253f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80253fc:	f7fb fb6c 	bl	8020ad8 <__aeabi_dcmpeq>
 8025400:	b9d8      	cbnz	r0, 802543a <_printf_float+0x432>
 8025402:	f10a 33ff 	add.w	r3, sl, #4294967295
 8025406:	f108 0201 	add.w	r2, r8, #1
 802540a:	4631      	mov	r1, r6
 802540c:	4628      	mov	r0, r5
 802540e:	47b8      	blx	r7
 8025410:	3001      	adds	r0, #1
 8025412:	d10e      	bne.n	8025432 <_printf_float+0x42a>
 8025414:	e657      	b.n	80250c6 <_printf_float+0xbe>
 8025416:	2301      	movs	r3, #1
 8025418:	4652      	mov	r2, sl
 802541a:	4631      	mov	r1, r6
 802541c:	4628      	mov	r0, r5
 802541e:	47b8      	blx	r7
 8025420:	3001      	adds	r0, #1
 8025422:	f43f ae50 	beq.w	80250c6 <_printf_float+0xbe>
 8025426:	f108 0801 	add.w	r8, r8, #1
 802542a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802542c:	3b01      	subs	r3, #1
 802542e:	4543      	cmp	r3, r8
 8025430:	dcf1      	bgt.n	8025416 <_printf_float+0x40e>
 8025432:	464b      	mov	r3, r9
 8025434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025438:	e6da      	b.n	80251f0 <_printf_float+0x1e8>
 802543a:	f04f 0800 	mov.w	r8, #0
 802543e:	f104 0a1a 	add.w	sl, r4, #26
 8025442:	e7f2      	b.n	802542a <_printf_float+0x422>
 8025444:	2301      	movs	r3, #1
 8025446:	4642      	mov	r2, r8
 8025448:	e7df      	b.n	802540a <_printf_float+0x402>
 802544a:	2301      	movs	r3, #1
 802544c:	464a      	mov	r2, r9
 802544e:	4631      	mov	r1, r6
 8025450:	4628      	mov	r0, r5
 8025452:	47b8      	blx	r7
 8025454:	3001      	adds	r0, #1
 8025456:	f43f ae36 	beq.w	80250c6 <_printf_float+0xbe>
 802545a:	f108 0801 	add.w	r8, r8, #1
 802545e:	68e3      	ldr	r3, [r4, #12]
 8025460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025462:	1a5b      	subs	r3, r3, r1
 8025464:	4543      	cmp	r3, r8
 8025466:	dcf0      	bgt.n	802544a <_printf_float+0x442>
 8025468:	e6f8      	b.n	802525c <_printf_float+0x254>
 802546a:	f04f 0800 	mov.w	r8, #0
 802546e:	f104 0919 	add.w	r9, r4, #25
 8025472:	e7f4      	b.n	802545e <_printf_float+0x456>

08025474 <_printf_common>:
 8025474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025478:	4616      	mov	r6, r2
 802547a:	4699      	mov	r9, r3
 802547c:	688a      	ldr	r2, [r1, #8]
 802547e:	690b      	ldr	r3, [r1, #16]
 8025480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025484:	4293      	cmp	r3, r2
 8025486:	bfb8      	it	lt
 8025488:	4613      	movlt	r3, r2
 802548a:	6033      	str	r3, [r6, #0]
 802548c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025490:	4607      	mov	r7, r0
 8025492:	460c      	mov	r4, r1
 8025494:	b10a      	cbz	r2, 802549a <_printf_common+0x26>
 8025496:	3301      	adds	r3, #1
 8025498:	6033      	str	r3, [r6, #0]
 802549a:	6823      	ldr	r3, [r4, #0]
 802549c:	0699      	lsls	r1, r3, #26
 802549e:	bf42      	ittt	mi
 80254a0:	6833      	ldrmi	r3, [r6, #0]
 80254a2:	3302      	addmi	r3, #2
 80254a4:	6033      	strmi	r3, [r6, #0]
 80254a6:	6825      	ldr	r5, [r4, #0]
 80254a8:	f015 0506 	ands.w	r5, r5, #6
 80254ac:	d106      	bne.n	80254bc <_printf_common+0x48>
 80254ae:	f104 0a19 	add.w	sl, r4, #25
 80254b2:	68e3      	ldr	r3, [r4, #12]
 80254b4:	6832      	ldr	r2, [r6, #0]
 80254b6:	1a9b      	subs	r3, r3, r2
 80254b8:	42ab      	cmp	r3, r5
 80254ba:	dc26      	bgt.n	802550a <_printf_common+0x96>
 80254bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80254c0:	1e13      	subs	r3, r2, #0
 80254c2:	6822      	ldr	r2, [r4, #0]
 80254c4:	bf18      	it	ne
 80254c6:	2301      	movne	r3, #1
 80254c8:	0692      	lsls	r2, r2, #26
 80254ca:	d42b      	bmi.n	8025524 <_printf_common+0xb0>
 80254cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80254d0:	4649      	mov	r1, r9
 80254d2:	4638      	mov	r0, r7
 80254d4:	47c0      	blx	r8
 80254d6:	3001      	adds	r0, #1
 80254d8:	d01e      	beq.n	8025518 <_printf_common+0xa4>
 80254da:	6823      	ldr	r3, [r4, #0]
 80254dc:	6922      	ldr	r2, [r4, #16]
 80254de:	f003 0306 	and.w	r3, r3, #6
 80254e2:	2b04      	cmp	r3, #4
 80254e4:	bf02      	ittt	eq
 80254e6:	68e5      	ldreq	r5, [r4, #12]
 80254e8:	6833      	ldreq	r3, [r6, #0]
 80254ea:	1aed      	subeq	r5, r5, r3
 80254ec:	68a3      	ldr	r3, [r4, #8]
 80254ee:	bf0c      	ite	eq
 80254f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80254f4:	2500      	movne	r5, #0
 80254f6:	4293      	cmp	r3, r2
 80254f8:	bfc4      	itt	gt
 80254fa:	1a9b      	subgt	r3, r3, r2
 80254fc:	18ed      	addgt	r5, r5, r3
 80254fe:	2600      	movs	r6, #0
 8025500:	341a      	adds	r4, #26
 8025502:	42b5      	cmp	r5, r6
 8025504:	d11a      	bne.n	802553c <_printf_common+0xc8>
 8025506:	2000      	movs	r0, #0
 8025508:	e008      	b.n	802551c <_printf_common+0xa8>
 802550a:	2301      	movs	r3, #1
 802550c:	4652      	mov	r2, sl
 802550e:	4649      	mov	r1, r9
 8025510:	4638      	mov	r0, r7
 8025512:	47c0      	blx	r8
 8025514:	3001      	adds	r0, #1
 8025516:	d103      	bne.n	8025520 <_printf_common+0xac>
 8025518:	f04f 30ff 	mov.w	r0, #4294967295
 802551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025520:	3501      	adds	r5, #1
 8025522:	e7c6      	b.n	80254b2 <_printf_common+0x3e>
 8025524:	18e1      	adds	r1, r4, r3
 8025526:	1c5a      	adds	r2, r3, #1
 8025528:	2030      	movs	r0, #48	; 0x30
 802552a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802552e:	4422      	add	r2, r4
 8025530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025538:	3302      	adds	r3, #2
 802553a:	e7c7      	b.n	80254cc <_printf_common+0x58>
 802553c:	2301      	movs	r3, #1
 802553e:	4622      	mov	r2, r4
 8025540:	4649      	mov	r1, r9
 8025542:	4638      	mov	r0, r7
 8025544:	47c0      	blx	r8
 8025546:	3001      	adds	r0, #1
 8025548:	d0e6      	beq.n	8025518 <_printf_common+0xa4>
 802554a:	3601      	adds	r6, #1
 802554c:	e7d9      	b.n	8025502 <_printf_common+0x8e>
	...

08025550 <_printf_i>:
 8025550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025554:	7e0f      	ldrb	r7, [r1, #24]
 8025556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025558:	2f78      	cmp	r7, #120	; 0x78
 802555a:	4691      	mov	r9, r2
 802555c:	4680      	mov	r8, r0
 802555e:	460c      	mov	r4, r1
 8025560:	469a      	mov	sl, r3
 8025562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025566:	d807      	bhi.n	8025578 <_printf_i+0x28>
 8025568:	2f62      	cmp	r7, #98	; 0x62
 802556a:	d80a      	bhi.n	8025582 <_printf_i+0x32>
 802556c:	2f00      	cmp	r7, #0
 802556e:	f000 80d4 	beq.w	802571a <_printf_i+0x1ca>
 8025572:	2f58      	cmp	r7, #88	; 0x58
 8025574:	f000 80c0 	beq.w	80256f8 <_printf_i+0x1a8>
 8025578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802557c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025580:	e03a      	b.n	80255f8 <_printf_i+0xa8>
 8025582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025586:	2b15      	cmp	r3, #21
 8025588:	d8f6      	bhi.n	8025578 <_printf_i+0x28>
 802558a:	a101      	add	r1, pc, #4	; (adr r1, 8025590 <_printf_i+0x40>)
 802558c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025590:	080255e9 	.word	0x080255e9
 8025594:	080255fd 	.word	0x080255fd
 8025598:	08025579 	.word	0x08025579
 802559c:	08025579 	.word	0x08025579
 80255a0:	08025579 	.word	0x08025579
 80255a4:	08025579 	.word	0x08025579
 80255a8:	080255fd 	.word	0x080255fd
 80255ac:	08025579 	.word	0x08025579
 80255b0:	08025579 	.word	0x08025579
 80255b4:	08025579 	.word	0x08025579
 80255b8:	08025579 	.word	0x08025579
 80255bc:	08025701 	.word	0x08025701
 80255c0:	08025629 	.word	0x08025629
 80255c4:	080256bb 	.word	0x080256bb
 80255c8:	08025579 	.word	0x08025579
 80255cc:	08025579 	.word	0x08025579
 80255d0:	08025723 	.word	0x08025723
 80255d4:	08025579 	.word	0x08025579
 80255d8:	08025629 	.word	0x08025629
 80255dc:	08025579 	.word	0x08025579
 80255e0:	08025579 	.word	0x08025579
 80255e4:	080256c3 	.word	0x080256c3
 80255e8:	682b      	ldr	r3, [r5, #0]
 80255ea:	1d1a      	adds	r2, r3, #4
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	602a      	str	r2, [r5, #0]
 80255f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80255f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80255f8:	2301      	movs	r3, #1
 80255fa:	e09f      	b.n	802573c <_printf_i+0x1ec>
 80255fc:	6820      	ldr	r0, [r4, #0]
 80255fe:	682b      	ldr	r3, [r5, #0]
 8025600:	0607      	lsls	r7, r0, #24
 8025602:	f103 0104 	add.w	r1, r3, #4
 8025606:	6029      	str	r1, [r5, #0]
 8025608:	d501      	bpl.n	802560e <_printf_i+0xbe>
 802560a:	681e      	ldr	r6, [r3, #0]
 802560c:	e003      	b.n	8025616 <_printf_i+0xc6>
 802560e:	0646      	lsls	r6, r0, #25
 8025610:	d5fb      	bpl.n	802560a <_printf_i+0xba>
 8025612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025616:	2e00      	cmp	r6, #0
 8025618:	da03      	bge.n	8025622 <_printf_i+0xd2>
 802561a:	232d      	movs	r3, #45	; 0x2d
 802561c:	4276      	negs	r6, r6
 802561e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025622:	485a      	ldr	r0, [pc, #360]	; (802578c <_printf_i+0x23c>)
 8025624:	230a      	movs	r3, #10
 8025626:	e012      	b.n	802564e <_printf_i+0xfe>
 8025628:	682b      	ldr	r3, [r5, #0]
 802562a:	6820      	ldr	r0, [r4, #0]
 802562c:	1d19      	adds	r1, r3, #4
 802562e:	6029      	str	r1, [r5, #0]
 8025630:	0605      	lsls	r5, r0, #24
 8025632:	d501      	bpl.n	8025638 <_printf_i+0xe8>
 8025634:	681e      	ldr	r6, [r3, #0]
 8025636:	e002      	b.n	802563e <_printf_i+0xee>
 8025638:	0641      	lsls	r1, r0, #25
 802563a:	d5fb      	bpl.n	8025634 <_printf_i+0xe4>
 802563c:	881e      	ldrh	r6, [r3, #0]
 802563e:	4853      	ldr	r0, [pc, #332]	; (802578c <_printf_i+0x23c>)
 8025640:	2f6f      	cmp	r7, #111	; 0x6f
 8025642:	bf0c      	ite	eq
 8025644:	2308      	moveq	r3, #8
 8025646:	230a      	movne	r3, #10
 8025648:	2100      	movs	r1, #0
 802564a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802564e:	6865      	ldr	r5, [r4, #4]
 8025650:	60a5      	str	r5, [r4, #8]
 8025652:	2d00      	cmp	r5, #0
 8025654:	bfa2      	ittt	ge
 8025656:	6821      	ldrge	r1, [r4, #0]
 8025658:	f021 0104 	bicge.w	r1, r1, #4
 802565c:	6021      	strge	r1, [r4, #0]
 802565e:	b90e      	cbnz	r6, 8025664 <_printf_i+0x114>
 8025660:	2d00      	cmp	r5, #0
 8025662:	d04b      	beq.n	80256fc <_printf_i+0x1ac>
 8025664:	4615      	mov	r5, r2
 8025666:	fbb6 f1f3 	udiv	r1, r6, r3
 802566a:	fb03 6711 	mls	r7, r3, r1, r6
 802566e:	5dc7      	ldrb	r7, [r0, r7]
 8025670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025674:	4637      	mov	r7, r6
 8025676:	42bb      	cmp	r3, r7
 8025678:	460e      	mov	r6, r1
 802567a:	d9f4      	bls.n	8025666 <_printf_i+0x116>
 802567c:	2b08      	cmp	r3, #8
 802567e:	d10b      	bne.n	8025698 <_printf_i+0x148>
 8025680:	6823      	ldr	r3, [r4, #0]
 8025682:	07de      	lsls	r6, r3, #31
 8025684:	d508      	bpl.n	8025698 <_printf_i+0x148>
 8025686:	6923      	ldr	r3, [r4, #16]
 8025688:	6861      	ldr	r1, [r4, #4]
 802568a:	4299      	cmp	r1, r3
 802568c:	bfde      	ittt	le
 802568e:	2330      	movle	r3, #48	; 0x30
 8025690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025698:	1b52      	subs	r2, r2, r5
 802569a:	6122      	str	r2, [r4, #16]
 802569c:	f8cd a000 	str.w	sl, [sp]
 80256a0:	464b      	mov	r3, r9
 80256a2:	aa03      	add	r2, sp, #12
 80256a4:	4621      	mov	r1, r4
 80256a6:	4640      	mov	r0, r8
 80256a8:	f7ff fee4 	bl	8025474 <_printf_common>
 80256ac:	3001      	adds	r0, #1
 80256ae:	d14a      	bne.n	8025746 <_printf_i+0x1f6>
 80256b0:	f04f 30ff 	mov.w	r0, #4294967295
 80256b4:	b004      	add	sp, #16
 80256b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256ba:	6823      	ldr	r3, [r4, #0]
 80256bc:	f043 0320 	orr.w	r3, r3, #32
 80256c0:	6023      	str	r3, [r4, #0]
 80256c2:	4833      	ldr	r0, [pc, #204]	; (8025790 <_printf_i+0x240>)
 80256c4:	2778      	movs	r7, #120	; 0x78
 80256c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80256ca:	6823      	ldr	r3, [r4, #0]
 80256cc:	6829      	ldr	r1, [r5, #0]
 80256ce:	061f      	lsls	r7, r3, #24
 80256d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80256d4:	d402      	bmi.n	80256dc <_printf_i+0x18c>
 80256d6:	065f      	lsls	r7, r3, #25
 80256d8:	bf48      	it	mi
 80256da:	b2b6      	uxthmi	r6, r6
 80256dc:	07df      	lsls	r7, r3, #31
 80256de:	bf48      	it	mi
 80256e0:	f043 0320 	orrmi.w	r3, r3, #32
 80256e4:	6029      	str	r1, [r5, #0]
 80256e6:	bf48      	it	mi
 80256e8:	6023      	strmi	r3, [r4, #0]
 80256ea:	b91e      	cbnz	r6, 80256f4 <_printf_i+0x1a4>
 80256ec:	6823      	ldr	r3, [r4, #0]
 80256ee:	f023 0320 	bic.w	r3, r3, #32
 80256f2:	6023      	str	r3, [r4, #0]
 80256f4:	2310      	movs	r3, #16
 80256f6:	e7a7      	b.n	8025648 <_printf_i+0xf8>
 80256f8:	4824      	ldr	r0, [pc, #144]	; (802578c <_printf_i+0x23c>)
 80256fa:	e7e4      	b.n	80256c6 <_printf_i+0x176>
 80256fc:	4615      	mov	r5, r2
 80256fe:	e7bd      	b.n	802567c <_printf_i+0x12c>
 8025700:	682b      	ldr	r3, [r5, #0]
 8025702:	6826      	ldr	r6, [r4, #0]
 8025704:	6961      	ldr	r1, [r4, #20]
 8025706:	1d18      	adds	r0, r3, #4
 8025708:	6028      	str	r0, [r5, #0]
 802570a:	0635      	lsls	r5, r6, #24
 802570c:	681b      	ldr	r3, [r3, #0]
 802570e:	d501      	bpl.n	8025714 <_printf_i+0x1c4>
 8025710:	6019      	str	r1, [r3, #0]
 8025712:	e002      	b.n	802571a <_printf_i+0x1ca>
 8025714:	0670      	lsls	r0, r6, #25
 8025716:	d5fb      	bpl.n	8025710 <_printf_i+0x1c0>
 8025718:	8019      	strh	r1, [r3, #0]
 802571a:	2300      	movs	r3, #0
 802571c:	6123      	str	r3, [r4, #16]
 802571e:	4615      	mov	r5, r2
 8025720:	e7bc      	b.n	802569c <_printf_i+0x14c>
 8025722:	682b      	ldr	r3, [r5, #0]
 8025724:	1d1a      	adds	r2, r3, #4
 8025726:	602a      	str	r2, [r5, #0]
 8025728:	681d      	ldr	r5, [r3, #0]
 802572a:	6862      	ldr	r2, [r4, #4]
 802572c:	2100      	movs	r1, #0
 802572e:	4628      	mov	r0, r5
 8025730:	f7fa fd56 	bl	80201e0 <memchr>
 8025734:	b108      	cbz	r0, 802573a <_printf_i+0x1ea>
 8025736:	1b40      	subs	r0, r0, r5
 8025738:	6060      	str	r0, [r4, #4]
 802573a:	6863      	ldr	r3, [r4, #4]
 802573c:	6123      	str	r3, [r4, #16]
 802573e:	2300      	movs	r3, #0
 8025740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025744:	e7aa      	b.n	802569c <_printf_i+0x14c>
 8025746:	6923      	ldr	r3, [r4, #16]
 8025748:	462a      	mov	r2, r5
 802574a:	4649      	mov	r1, r9
 802574c:	4640      	mov	r0, r8
 802574e:	47d0      	blx	sl
 8025750:	3001      	adds	r0, #1
 8025752:	d0ad      	beq.n	80256b0 <_printf_i+0x160>
 8025754:	6823      	ldr	r3, [r4, #0]
 8025756:	079b      	lsls	r3, r3, #30
 8025758:	d413      	bmi.n	8025782 <_printf_i+0x232>
 802575a:	68e0      	ldr	r0, [r4, #12]
 802575c:	9b03      	ldr	r3, [sp, #12]
 802575e:	4298      	cmp	r0, r3
 8025760:	bfb8      	it	lt
 8025762:	4618      	movlt	r0, r3
 8025764:	e7a6      	b.n	80256b4 <_printf_i+0x164>
 8025766:	2301      	movs	r3, #1
 8025768:	4632      	mov	r2, r6
 802576a:	4649      	mov	r1, r9
 802576c:	4640      	mov	r0, r8
 802576e:	47d0      	blx	sl
 8025770:	3001      	adds	r0, #1
 8025772:	d09d      	beq.n	80256b0 <_printf_i+0x160>
 8025774:	3501      	adds	r5, #1
 8025776:	68e3      	ldr	r3, [r4, #12]
 8025778:	9903      	ldr	r1, [sp, #12]
 802577a:	1a5b      	subs	r3, r3, r1
 802577c:	42ab      	cmp	r3, r5
 802577e:	dcf2      	bgt.n	8025766 <_printf_i+0x216>
 8025780:	e7eb      	b.n	802575a <_printf_i+0x20a>
 8025782:	2500      	movs	r5, #0
 8025784:	f104 0619 	add.w	r6, r4, #25
 8025788:	e7f5      	b.n	8025776 <_printf_i+0x226>
 802578a:	bf00      	nop
 802578c:	08029f64 	.word	0x08029f64
 8025790:	08029f75 	.word	0x08029f75

08025794 <_scanf_float>:
 8025794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025798:	b087      	sub	sp, #28
 802579a:	4617      	mov	r7, r2
 802579c:	9303      	str	r3, [sp, #12]
 802579e:	688b      	ldr	r3, [r1, #8]
 80257a0:	1e5a      	subs	r2, r3, #1
 80257a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80257a6:	bf83      	ittte	hi
 80257a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80257ac:	195b      	addhi	r3, r3, r5
 80257ae:	9302      	strhi	r3, [sp, #8]
 80257b0:	2300      	movls	r3, #0
 80257b2:	bf86      	itte	hi
 80257b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80257b8:	608b      	strhi	r3, [r1, #8]
 80257ba:	9302      	strls	r3, [sp, #8]
 80257bc:	680b      	ldr	r3, [r1, #0]
 80257be:	468b      	mov	fp, r1
 80257c0:	2500      	movs	r5, #0
 80257c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80257c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80257ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80257ce:	4680      	mov	r8, r0
 80257d0:	460c      	mov	r4, r1
 80257d2:	465e      	mov	r6, fp
 80257d4:	46aa      	mov	sl, r5
 80257d6:	46a9      	mov	r9, r5
 80257d8:	9501      	str	r5, [sp, #4]
 80257da:	68a2      	ldr	r2, [r4, #8]
 80257dc:	b152      	cbz	r2, 80257f4 <_scanf_float+0x60>
 80257de:	683b      	ldr	r3, [r7, #0]
 80257e0:	781b      	ldrb	r3, [r3, #0]
 80257e2:	2b4e      	cmp	r3, #78	; 0x4e
 80257e4:	d864      	bhi.n	80258b0 <_scanf_float+0x11c>
 80257e6:	2b40      	cmp	r3, #64	; 0x40
 80257e8:	d83c      	bhi.n	8025864 <_scanf_float+0xd0>
 80257ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80257ee:	b2c8      	uxtb	r0, r1
 80257f0:	280e      	cmp	r0, #14
 80257f2:	d93a      	bls.n	802586a <_scanf_float+0xd6>
 80257f4:	f1b9 0f00 	cmp.w	r9, #0
 80257f8:	d003      	beq.n	8025802 <_scanf_float+0x6e>
 80257fa:	6823      	ldr	r3, [r4, #0]
 80257fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8025800:	6023      	str	r3, [r4, #0]
 8025802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025806:	f1ba 0f01 	cmp.w	sl, #1
 802580a:	f200 8113 	bhi.w	8025a34 <_scanf_float+0x2a0>
 802580e:	455e      	cmp	r6, fp
 8025810:	f200 8105 	bhi.w	8025a1e <_scanf_float+0x28a>
 8025814:	2501      	movs	r5, #1
 8025816:	4628      	mov	r0, r5
 8025818:	b007      	add	sp, #28
 802581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802581e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8025822:	2a0d      	cmp	r2, #13
 8025824:	d8e6      	bhi.n	80257f4 <_scanf_float+0x60>
 8025826:	a101      	add	r1, pc, #4	; (adr r1, 802582c <_scanf_float+0x98>)
 8025828:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802582c:	0802596b 	.word	0x0802596b
 8025830:	080257f5 	.word	0x080257f5
 8025834:	080257f5 	.word	0x080257f5
 8025838:	080257f5 	.word	0x080257f5
 802583c:	080259cb 	.word	0x080259cb
 8025840:	080259a3 	.word	0x080259a3
 8025844:	080257f5 	.word	0x080257f5
 8025848:	080257f5 	.word	0x080257f5
 802584c:	08025979 	.word	0x08025979
 8025850:	080257f5 	.word	0x080257f5
 8025854:	080257f5 	.word	0x080257f5
 8025858:	080257f5 	.word	0x080257f5
 802585c:	080257f5 	.word	0x080257f5
 8025860:	08025931 	.word	0x08025931
 8025864:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8025868:	e7db      	b.n	8025822 <_scanf_float+0x8e>
 802586a:	290e      	cmp	r1, #14
 802586c:	d8c2      	bhi.n	80257f4 <_scanf_float+0x60>
 802586e:	a001      	add	r0, pc, #4	; (adr r0, 8025874 <_scanf_float+0xe0>)
 8025870:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8025874:	08025923 	.word	0x08025923
 8025878:	080257f5 	.word	0x080257f5
 802587c:	08025923 	.word	0x08025923
 8025880:	080259b7 	.word	0x080259b7
 8025884:	080257f5 	.word	0x080257f5
 8025888:	080258d1 	.word	0x080258d1
 802588c:	0802590d 	.word	0x0802590d
 8025890:	0802590d 	.word	0x0802590d
 8025894:	0802590d 	.word	0x0802590d
 8025898:	0802590d 	.word	0x0802590d
 802589c:	0802590d 	.word	0x0802590d
 80258a0:	0802590d 	.word	0x0802590d
 80258a4:	0802590d 	.word	0x0802590d
 80258a8:	0802590d 	.word	0x0802590d
 80258ac:	0802590d 	.word	0x0802590d
 80258b0:	2b6e      	cmp	r3, #110	; 0x6e
 80258b2:	d809      	bhi.n	80258c8 <_scanf_float+0x134>
 80258b4:	2b60      	cmp	r3, #96	; 0x60
 80258b6:	d8b2      	bhi.n	802581e <_scanf_float+0x8a>
 80258b8:	2b54      	cmp	r3, #84	; 0x54
 80258ba:	d077      	beq.n	80259ac <_scanf_float+0x218>
 80258bc:	2b59      	cmp	r3, #89	; 0x59
 80258be:	d199      	bne.n	80257f4 <_scanf_float+0x60>
 80258c0:	2d07      	cmp	r5, #7
 80258c2:	d197      	bne.n	80257f4 <_scanf_float+0x60>
 80258c4:	2508      	movs	r5, #8
 80258c6:	e029      	b.n	802591c <_scanf_float+0x188>
 80258c8:	2b74      	cmp	r3, #116	; 0x74
 80258ca:	d06f      	beq.n	80259ac <_scanf_float+0x218>
 80258cc:	2b79      	cmp	r3, #121	; 0x79
 80258ce:	e7f6      	b.n	80258be <_scanf_float+0x12a>
 80258d0:	6821      	ldr	r1, [r4, #0]
 80258d2:	05c8      	lsls	r0, r1, #23
 80258d4:	d51a      	bpl.n	802590c <_scanf_float+0x178>
 80258d6:	9b02      	ldr	r3, [sp, #8]
 80258d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80258dc:	6021      	str	r1, [r4, #0]
 80258de:	f109 0901 	add.w	r9, r9, #1
 80258e2:	b11b      	cbz	r3, 80258ec <_scanf_float+0x158>
 80258e4:	3b01      	subs	r3, #1
 80258e6:	3201      	adds	r2, #1
 80258e8:	9302      	str	r3, [sp, #8]
 80258ea:	60a2      	str	r2, [r4, #8]
 80258ec:	68a3      	ldr	r3, [r4, #8]
 80258ee:	3b01      	subs	r3, #1
 80258f0:	60a3      	str	r3, [r4, #8]
 80258f2:	6923      	ldr	r3, [r4, #16]
 80258f4:	3301      	adds	r3, #1
 80258f6:	6123      	str	r3, [r4, #16]
 80258f8:	687b      	ldr	r3, [r7, #4]
 80258fa:	3b01      	subs	r3, #1
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	607b      	str	r3, [r7, #4]
 8025900:	f340 8084 	ble.w	8025a0c <_scanf_float+0x278>
 8025904:	683b      	ldr	r3, [r7, #0]
 8025906:	3301      	adds	r3, #1
 8025908:	603b      	str	r3, [r7, #0]
 802590a:	e766      	b.n	80257da <_scanf_float+0x46>
 802590c:	eb1a 0f05 	cmn.w	sl, r5
 8025910:	f47f af70 	bne.w	80257f4 <_scanf_float+0x60>
 8025914:	6822      	ldr	r2, [r4, #0]
 8025916:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802591a:	6022      	str	r2, [r4, #0]
 802591c:	f806 3b01 	strb.w	r3, [r6], #1
 8025920:	e7e4      	b.n	80258ec <_scanf_float+0x158>
 8025922:	6822      	ldr	r2, [r4, #0]
 8025924:	0610      	lsls	r0, r2, #24
 8025926:	f57f af65 	bpl.w	80257f4 <_scanf_float+0x60>
 802592a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802592e:	e7f4      	b.n	802591a <_scanf_float+0x186>
 8025930:	f1ba 0f00 	cmp.w	sl, #0
 8025934:	d10e      	bne.n	8025954 <_scanf_float+0x1c0>
 8025936:	f1b9 0f00 	cmp.w	r9, #0
 802593a:	d10e      	bne.n	802595a <_scanf_float+0x1c6>
 802593c:	6822      	ldr	r2, [r4, #0]
 802593e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8025942:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8025946:	d108      	bne.n	802595a <_scanf_float+0x1c6>
 8025948:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802594c:	6022      	str	r2, [r4, #0]
 802594e:	f04f 0a01 	mov.w	sl, #1
 8025952:	e7e3      	b.n	802591c <_scanf_float+0x188>
 8025954:	f1ba 0f02 	cmp.w	sl, #2
 8025958:	d055      	beq.n	8025a06 <_scanf_float+0x272>
 802595a:	2d01      	cmp	r5, #1
 802595c:	d002      	beq.n	8025964 <_scanf_float+0x1d0>
 802595e:	2d04      	cmp	r5, #4
 8025960:	f47f af48 	bne.w	80257f4 <_scanf_float+0x60>
 8025964:	3501      	adds	r5, #1
 8025966:	b2ed      	uxtb	r5, r5
 8025968:	e7d8      	b.n	802591c <_scanf_float+0x188>
 802596a:	f1ba 0f01 	cmp.w	sl, #1
 802596e:	f47f af41 	bne.w	80257f4 <_scanf_float+0x60>
 8025972:	f04f 0a02 	mov.w	sl, #2
 8025976:	e7d1      	b.n	802591c <_scanf_float+0x188>
 8025978:	b97d      	cbnz	r5, 802599a <_scanf_float+0x206>
 802597a:	f1b9 0f00 	cmp.w	r9, #0
 802597e:	f47f af3c 	bne.w	80257fa <_scanf_float+0x66>
 8025982:	6822      	ldr	r2, [r4, #0]
 8025984:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8025988:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802598c:	f47f af39 	bne.w	8025802 <_scanf_float+0x6e>
 8025990:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8025994:	6022      	str	r2, [r4, #0]
 8025996:	2501      	movs	r5, #1
 8025998:	e7c0      	b.n	802591c <_scanf_float+0x188>
 802599a:	2d03      	cmp	r5, #3
 802599c:	d0e2      	beq.n	8025964 <_scanf_float+0x1d0>
 802599e:	2d05      	cmp	r5, #5
 80259a0:	e7de      	b.n	8025960 <_scanf_float+0x1cc>
 80259a2:	2d02      	cmp	r5, #2
 80259a4:	f47f af26 	bne.w	80257f4 <_scanf_float+0x60>
 80259a8:	2503      	movs	r5, #3
 80259aa:	e7b7      	b.n	802591c <_scanf_float+0x188>
 80259ac:	2d06      	cmp	r5, #6
 80259ae:	f47f af21 	bne.w	80257f4 <_scanf_float+0x60>
 80259b2:	2507      	movs	r5, #7
 80259b4:	e7b2      	b.n	802591c <_scanf_float+0x188>
 80259b6:	6822      	ldr	r2, [r4, #0]
 80259b8:	0591      	lsls	r1, r2, #22
 80259ba:	f57f af1b 	bpl.w	80257f4 <_scanf_float+0x60>
 80259be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80259c2:	6022      	str	r2, [r4, #0]
 80259c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80259c8:	e7a8      	b.n	802591c <_scanf_float+0x188>
 80259ca:	6822      	ldr	r2, [r4, #0]
 80259cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80259d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80259d4:	d006      	beq.n	80259e4 <_scanf_float+0x250>
 80259d6:	0550      	lsls	r0, r2, #21
 80259d8:	f57f af0c 	bpl.w	80257f4 <_scanf_float+0x60>
 80259dc:	f1b9 0f00 	cmp.w	r9, #0
 80259e0:	f43f af0f 	beq.w	8025802 <_scanf_float+0x6e>
 80259e4:	0591      	lsls	r1, r2, #22
 80259e6:	bf58      	it	pl
 80259e8:	9901      	ldrpl	r1, [sp, #4]
 80259ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80259ee:	bf58      	it	pl
 80259f0:	eba9 0101 	subpl.w	r1, r9, r1
 80259f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80259f8:	bf58      	it	pl
 80259fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80259fe:	6022      	str	r2, [r4, #0]
 8025a00:	f04f 0900 	mov.w	r9, #0
 8025a04:	e78a      	b.n	802591c <_scanf_float+0x188>
 8025a06:	f04f 0a03 	mov.w	sl, #3
 8025a0a:	e787      	b.n	802591c <_scanf_float+0x188>
 8025a0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8025a10:	4639      	mov	r1, r7
 8025a12:	4640      	mov	r0, r8
 8025a14:	4798      	blx	r3
 8025a16:	2800      	cmp	r0, #0
 8025a18:	f43f aedf 	beq.w	80257da <_scanf_float+0x46>
 8025a1c:	e6ea      	b.n	80257f4 <_scanf_float+0x60>
 8025a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025a26:	463a      	mov	r2, r7
 8025a28:	4640      	mov	r0, r8
 8025a2a:	4798      	blx	r3
 8025a2c:	6923      	ldr	r3, [r4, #16]
 8025a2e:	3b01      	subs	r3, #1
 8025a30:	6123      	str	r3, [r4, #16]
 8025a32:	e6ec      	b.n	802580e <_scanf_float+0x7a>
 8025a34:	1e6b      	subs	r3, r5, #1
 8025a36:	2b06      	cmp	r3, #6
 8025a38:	d825      	bhi.n	8025a86 <_scanf_float+0x2f2>
 8025a3a:	2d02      	cmp	r5, #2
 8025a3c:	d836      	bhi.n	8025aac <_scanf_float+0x318>
 8025a3e:	455e      	cmp	r6, fp
 8025a40:	f67f aee8 	bls.w	8025814 <_scanf_float+0x80>
 8025a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025a48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025a4c:	463a      	mov	r2, r7
 8025a4e:	4640      	mov	r0, r8
 8025a50:	4798      	blx	r3
 8025a52:	6923      	ldr	r3, [r4, #16]
 8025a54:	3b01      	subs	r3, #1
 8025a56:	6123      	str	r3, [r4, #16]
 8025a58:	e7f1      	b.n	8025a3e <_scanf_float+0x2aa>
 8025a5a:	9802      	ldr	r0, [sp, #8]
 8025a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025a60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8025a64:	9002      	str	r0, [sp, #8]
 8025a66:	463a      	mov	r2, r7
 8025a68:	4640      	mov	r0, r8
 8025a6a:	4798      	blx	r3
 8025a6c:	6923      	ldr	r3, [r4, #16]
 8025a6e:	3b01      	subs	r3, #1
 8025a70:	6123      	str	r3, [r4, #16]
 8025a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025a76:	fa5f fa8a 	uxtb.w	sl, sl
 8025a7a:	f1ba 0f02 	cmp.w	sl, #2
 8025a7e:	d1ec      	bne.n	8025a5a <_scanf_float+0x2c6>
 8025a80:	3d03      	subs	r5, #3
 8025a82:	b2ed      	uxtb	r5, r5
 8025a84:	1b76      	subs	r6, r6, r5
 8025a86:	6823      	ldr	r3, [r4, #0]
 8025a88:	05da      	lsls	r2, r3, #23
 8025a8a:	d52f      	bpl.n	8025aec <_scanf_float+0x358>
 8025a8c:	055b      	lsls	r3, r3, #21
 8025a8e:	d510      	bpl.n	8025ab2 <_scanf_float+0x31e>
 8025a90:	455e      	cmp	r6, fp
 8025a92:	f67f aebf 	bls.w	8025814 <_scanf_float+0x80>
 8025a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025a9e:	463a      	mov	r2, r7
 8025aa0:	4640      	mov	r0, r8
 8025aa2:	4798      	blx	r3
 8025aa4:	6923      	ldr	r3, [r4, #16]
 8025aa6:	3b01      	subs	r3, #1
 8025aa8:	6123      	str	r3, [r4, #16]
 8025aaa:	e7f1      	b.n	8025a90 <_scanf_float+0x2fc>
 8025aac:	46aa      	mov	sl, r5
 8025aae:	9602      	str	r6, [sp, #8]
 8025ab0:	e7df      	b.n	8025a72 <_scanf_float+0x2de>
 8025ab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025ab6:	6923      	ldr	r3, [r4, #16]
 8025ab8:	2965      	cmp	r1, #101	; 0x65
 8025aba:	f103 33ff 	add.w	r3, r3, #4294967295
 8025abe:	f106 35ff 	add.w	r5, r6, #4294967295
 8025ac2:	6123      	str	r3, [r4, #16]
 8025ac4:	d00c      	beq.n	8025ae0 <_scanf_float+0x34c>
 8025ac6:	2945      	cmp	r1, #69	; 0x45
 8025ac8:	d00a      	beq.n	8025ae0 <_scanf_float+0x34c>
 8025aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025ace:	463a      	mov	r2, r7
 8025ad0:	4640      	mov	r0, r8
 8025ad2:	4798      	blx	r3
 8025ad4:	6923      	ldr	r3, [r4, #16]
 8025ad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8025ada:	3b01      	subs	r3, #1
 8025adc:	1eb5      	subs	r5, r6, #2
 8025ade:	6123      	str	r3, [r4, #16]
 8025ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025ae4:	463a      	mov	r2, r7
 8025ae6:	4640      	mov	r0, r8
 8025ae8:	4798      	blx	r3
 8025aea:	462e      	mov	r6, r5
 8025aec:	6825      	ldr	r5, [r4, #0]
 8025aee:	f015 0510 	ands.w	r5, r5, #16
 8025af2:	d158      	bne.n	8025ba6 <_scanf_float+0x412>
 8025af4:	7035      	strb	r5, [r6, #0]
 8025af6:	6823      	ldr	r3, [r4, #0]
 8025af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8025afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025b00:	d11c      	bne.n	8025b3c <_scanf_float+0x3a8>
 8025b02:	9b01      	ldr	r3, [sp, #4]
 8025b04:	454b      	cmp	r3, r9
 8025b06:	eba3 0209 	sub.w	r2, r3, r9
 8025b0a:	d124      	bne.n	8025b56 <_scanf_float+0x3c2>
 8025b0c:	2200      	movs	r2, #0
 8025b0e:	4659      	mov	r1, fp
 8025b10:	4640      	mov	r0, r8
 8025b12:	f002 fc5d 	bl	80283d0 <_strtod_r>
 8025b16:	9b03      	ldr	r3, [sp, #12]
 8025b18:	6821      	ldr	r1, [r4, #0]
 8025b1a:	681b      	ldr	r3, [r3, #0]
 8025b1c:	f011 0f02 	tst.w	r1, #2
 8025b20:	ec57 6b10 	vmov	r6, r7, d0
 8025b24:	f103 0204 	add.w	r2, r3, #4
 8025b28:	d020      	beq.n	8025b6c <_scanf_float+0x3d8>
 8025b2a:	9903      	ldr	r1, [sp, #12]
 8025b2c:	600a      	str	r2, [r1, #0]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	e9c3 6700 	strd	r6, r7, [r3]
 8025b34:	68e3      	ldr	r3, [r4, #12]
 8025b36:	3301      	adds	r3, #1
 8025b38:	60e3      	str	r3, [r4, #12]
 8025b3a:	e66c      	b.n	8025816 <_scanf_float+0x82>
 8025b3c:	9b04      	ldr	r3, [sp, #16]
 8025b3e:	2b00      	cmp	r3, #0
 8025b40:	d0e4      	beq.n	8025b0c <_scanf_float+0x378>
 8025b42:	9905      	ldr	r1, [sp, #20]
 8025b44:	230a      	movs	r3, #10
 8025b46:	462a      	mov	r2, r5
 8025b48:	3101      	adds	r1, #1
 8025b4a:	4640      	mov	r0, r8
 8025b4c:	f002 fcc8 	bl	80284e0 <_strtol_r>
 8025b50:	9b04      	ldr	r3, [sp, #16]
 8025b52:	9e05      	ldr	r6, [sp, #20]
 8025b54:	1ac2      	subs	r2, r0, r3
 8025b56:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8025b5a:	429e      	cmp	r6, r3
 8025b5c:	bf28      	it	cs
 8025b5e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8025b62:	4912      	ldr	r1, [pc, #72]	; (8025bac <_scanf_float+0x418>)
 8025b64:	4630      	mov	r0, r6
 8025b66:	f000 f8e7 	bl	8025d38 <siprintf>
 8025b6a:	e7cf      	b.n	8025b0c <_scanf_float+0x378>
 8025b6c:	f011 0f04 	tst.w	r1, #4
 8025b70:	9903      	ldr	r1, [sp, #12]
 8025b72:	600a      	str	r2, [r1, #0]
 8025b74:	d1db      	bne.n	8025b2e <_scanf_float+0x39a>
 8025b76:	f8d3 8000 	ldr.w	r8, [r3]
 8025b7a:	ee10 2a10 	vmov	r2, s0
 8025b7e:	ee10 0a10 	vmov	r0, s0
 8025b82:	463b      	mov	r3, r7
 8025b84:	4639      	mov	r1, r7
 8025b86:	f7fa ffd9 	bl	8020b3c <__aeabi_dcmpun>
 8025b8a:	b128      	cbz	r0, 8025b98 <_scanf_float+0x404>
 8025b8c:	4808      	ldr	r0, [pc, #32]	; (8025bb0 <_scanf_float+0x41c>)
 8025b8e:	f000 f9e5 	bl	8025f5c <nanf>
 8025b92:	ed88 0a00 	vstr	s0, [r8]
 8025b96:	e7cd      	b.n	8025b34 <_scanf_float+0x3a0>
 8025b98:	4630      	mov	r0, r6
 8025b9a:	4639      	mov	r1, r7
 8025b9c:	f7fb f82c 	bl	8020bf8 <__aeabi_d2f>
 8025ba0:	f8c8 0000 	str.w	r0, [r8]
 8025ba4:	e7c6      	b.n	8025b34 <_scanf_float+0x3a0>
 8025ba6:	2500      	movs	r5, #0
 8025ba8:	e635      	b.n	8025816 <_scanf_float+0x82>
 8025baa:	bf00      	nop
 8025bac:	08029f86 	.word	0x08029f86
 8025bb0:	0802a338 	.word	0x0802a338

08025bb4 <std>:
 8025bb4:	2300      	movs	r3, #0
 8025bb6:	b510      	push	{r4, lr}
 8025bb8:	4604      	mov	r4, r0
 8025bba:	e9c0 3300 	strd	r3, r3, [r0]
 8025bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025bc2:	6083      	str	r3, [r0, #8]
 8025bc4:	8181      	strh	r1, [r0, #12]
 8025bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8025bc8:	81c2      	strh	r2, [r0, #14]
 8025bca:	6183      	str	r3, [r0, #24]
 8025bcc:	4619      	mov	r1, r3
 8025bce:	2208      	movs	r2, #8
 8025bd0:	305c      	adds	r0, #92	; 0x5c
 8025bd2:	f000 f942 	bl	8025e5a <memset>
 8025bd6:	4b0d      	ldr	r3, [pc, #52]	; (8025c0c <std+0x58>)
 8025bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8025bda:	4b0d      	ldr	r3, [pc, #52]	; (8025c10 <std+0x5c>)
 8025bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8025bde:	4b0d      	ldr	r3, [pc, #52]	; (8025c14 <std+0x60>)
 8025be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025be2:	4b0d      	ldr	r3, [pc, #52]	; (8025c18 <std+0x64>)
 8025be4:	6323      	str	r3, [r4, #48]	; 0x30
 8025be6:	4b0d      	ldr	r3, [pc, #52]	; (8025c1c <std+0x68>)
 8025be8:	6224      	str	r4, [r4, #32]
 8025bea:	429c      	cmp	r4, r3
 8025bec:	d006      	beq.n	8025bfc <std+0x48>
 8025bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8025bf2:	4294      	cmp	r4, r2
 8025bf4:	d002      	beq.n	8025bfc <std+0x48>
 8025bf6:	33d0      	adds	r3, #208	; 0xd0
 8025bf8:	429c      	cmp	r4, r3
 8025bfa:	d105      	bne.n	8025c08 <std+0x54>
 8025bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c04:	f000 b9a6 	b.w	8025f54 <__retarget_lock_init_recursive>
 8025c08:	bd10      	pop	{r4, pc}
 8025c0a:	bf00      	nop
 8025c0c:	08025dd1 	.word	0x08025dd1
 8025c10:	08025df7 	.word	0x08025df7
 8025c14:	08025e2f 	.word	0x08025e2f
 8025c18:	08025e53 	.word	0x08025e53
 8025c1c:	20000318 	.word	0x20000318

08025c20 <stdio_exit_handler>:
 8025c20:	4a02      	ldr	r2, [pc, #8]	; (8025c2c <stdio_exit_handler+0xc>)
 8025c22:	4903      	ldr	r1, [pc, #12]	; (8025c30 <stdio_exit_handler+0x10>)
 8025c24:	4803      	ldr	r0, [pc, #12]	; (8025c34 <stdio_exit_handler+0x14>)
 8025c26:	f000 b869 	b.w	8025cfc <_fwalk_sglue>
 8025c2a:	bf00      	nop
 8025c2c:	2000000c 	.word	0x2000000c
 8025c30:	08028ee1 	.word	0x08028ee1
 8025c34:	20000018 	.word	0x20000018

08025c38 <cleanup_stdio>:
 8025c38:	6841      	ldr	r1, [r0, #4]
 8025c3a:	4b0c      	ldr	r3, [pc, #48]	; (8025c6c <cleanup_stdio+0x34>)
 8025c3c:	4299      	cmp	r1, r3
 8025c3e:	b510      	push	{r4, lr}
 8025c40:	4604      	mov	r4, r0
 8025c42:	d001      	beq.n	8025c48 <cleanup_stdio+0x10>
 8025c44:	f003 f94c 	bl	8028ee0 <_fflush_r>
 8025c48:	68a1      	ldr	r1, [r4, #8]
 8025c4a:	4b09      	ldr	r3, [pc, #36]	; (8025c70 <cleanup_stdio+0x38>)
 8025c4c:	4299      	cmp	r1, r3
 8025c4e:	d002      	beq.n	8025c56 <cleanup_stdio+0x1e>
 8025c50:	4620      	mov	r0, r4
 8025c52:	f003 f945 	bl	8028ee0 <_fflush_r>
 8025c56:	68e1      	ldr	r1, [r4, #12]
 8025c58:	4b06      	ldr	r3, [pc, #24]	; (8025c74 <cleanup_stdio+0x3c>)
 8025c5a:	4299      	cmp	r1, r3
 8025c5c:	d004      	beq.n	8025c68 <cleanup_stdio+0x30>
 8025c5e:	4620      	mov	r0, r4
 8025c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c64:	f003 b93c 	b.w	8028ee0 <_fflush_r>
 8025c68:	bd10      	pop	{r4, pc}
 8025c6a:	bf00      	nop
 8025c6c:	20000318 	.word	0x20000318
 8025c70:	20000380 	.word	0x20000380
 8025c74:	200003e8 	.word	0x200003e8

08025c78 <global_stdio_init.part.0>:
 8025c78:	b510      	push	{r4, lr}
 8025c7a:	4b0b      	ldr	r3, [pc, #44]	; (8025ca8 <global_stdio_init.part.0+0x30>)
 8025c7c:	4c0b      	ldr	r4, [pc, #44]	; (8025cac <global_stdio_init.part.0+0x34>)
 8025c7e:	4a0c      	ldr	r2, [pc, #48]	; (8025cb0 <global_stdio_init.part.0+0x38>)
 8025c80:	601a      	str	r2, [r3, #0]
 8025c82:	4620      	mov	r0, r4
 8025c84:	2200      	movs	r2, #0
 8025c86:	2104      	movs	r1, #4
 8025c88:	f7ff ff94 	bl	8025bb4 <std>
 8025c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025c90:	2201      	movs	r2, #1
 8025c92:	2109      	movs	r1, #9
 8025c94:	f7ff ff8e 	bl	8025bb4 <std>
 8025c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8025c9c:	2202      	movs	r2, #2
 8025c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ca2:	2112      	movs	r1, #18
 8025ca4:	f7ff bf86 	b.w	8025bb4 <std>
 8025ca8:	20000450 	.word	0x20000450
 8025cac:	20000318 	.word	0x20000318
 8025cb0:	08025c21 	.word	0x08025c21

08025cb4 <__sfp_lock_acquire>:
 8025cb4:	4801      	ldr	r0, [pc, #4]	; (8025cbc <__sfp_lock_acquire+0x8>)
 8025cb6:	f000 b94e 	b.w	8025f56 <__retarget_lock_acquire_recursive>
 8025cba:	bf00      	nop
 8025cbc:	20000459 	.word	0x20000459

08025cc0 <__sfp_lock_release>:
 8025cc0:	4801      	ldr	r0, [pc, #4]	; (8025cc8 <__sfp_lock_release+0x8>)
 8025cc2:	f000 b949 	b.w	8025f58 <__retarget_lock_release_recursive>
 8025cc6:	bf00      	nop
 8025cc8:	20000459 	.word	0x20000459

08025ccc <__sinit>:
 8025ccc:	b510      	push	{r4, lr}
 8025cce:	4604      	mov	r4, r0
 8025cd0:	f7ff fff0 	bl	8025cb4 <__sfp_lock_acquire>
 8025cd4:	6a23      	ldr	r3, [r4, #32]
 8025cd6:	b11b      	cbz	r3, 8025ce0 <__sinit+0x14>
 8025cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025cdc:	f7ff bff0 	b.w	8025cc0 <__sfp_lock_release>
 8025ce0:	4b04      	ldr	r3, [pc, #16]	; (8025cf4 <__sinit+0x28>)
 8025ce2:	6223      	str	r3, [r4, #32]
 8025ce4:	4b04      	ldr	r3, [pc, #16]	; (8025cf8 <__sinit+0x2c>)
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	d1f5      	bne.n	8025cd8 <__sinit+0xc>
 8025cec:	f7ff ffc4 	bl	8025c78 <global_stdio_init.part.0>
 8025cf0:	e7f2      	b.n	8025cd8 <__sinit+0xc>
 8025cf2:	bf00      	nop
 8025cf4:	08025c39 	.word	0x08025c39
 8025cf8:	20000450 	.word	0x20000450

08025cfc <_fwalk_sglue>:
 8025cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d00:	4607      	mov	r7, r0
 8025d02:	4688      	mov	r8, r1
 8025d04:	4614      	mov	r4, r2
 8025d06:	2600      	movs	r6, #0
 8025d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8025d10:	d505      	bpl.n	8025d1e <_fwalk_sglue+0x22>
 8025d12:	6824      	ldr	r4, [r4, #0]
 8025d14:	2c00      	cmp	r4, #0
 8025d16:	d1f7      	bne.n	8025d08 <_fwalk_sglue+0xc>
 8025d18:	4630      	mov	r0, r6
 8025d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d1e:	89ab      	ldrh	r3, [r5, #12]
 8025d20:	2b01      	cmp	r3, #1
 8025d22:	d907      	bls.n	8025d34 <_fwalk_sglue+0x38>
 8025d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025d28:	3301      	adds	r3, #1
 8025d2a:	d003      	beq.n	8025d34 <_fwalk_sglue+0x38>
 8025d2c:	4629      	mov	r1, r5
 8025d2e:	4638      	mov	r0, r7
 8025d30:	47c0      	blx	r8
 8025d32:	4306      	orrs	r6, r0
 8025d34:	3568      	adds	r5, #104	; 0x68
 8025d36:	e7e9      	b.n	8025d0c <_fwalk_sglue+0x10>

08025d38 <siprintf>:
 8025d38:	b40e      	push	{r1, r2, r3}
 8025d3a:	b500      	push	{lr}
 8025d3c:	b09c      	sub	sp, #112	; 0x70
 8025d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8025d40:	9002      	str	r0, [sp, #8]
 8025d42:	9006      	str	r0, [sp, #24]
 8025d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025d48:	4809      	ldr	r0, [pc, #36]	; (8025d70 <siprintf+0x38>)
 8025d4a:	9107      	str	r1, [sp, #28]
 8025d4c:	9104      	str	r1, [sp, #16]
 8025d4e:	4909      	ldr	r1, [pc, #36]	; (8025d74 <siprintf+0x3c>)
 8025d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d54:	9105      	str	r1, [sp, #20]
 8025d56:	6800      	ldr	r0, [r0, #0]
 8025d58:	9301      	str	r3, [sp, #4]
 8025d5a:	a902      	add	r1, sp, #8
 8025d5c:	f002 fc1c 	bl	8028598 <_svfiprintf_r>
 8025d60:	9b02      	ldr	r3, [sp, #8]
 8025d62:	2200      	movs	r2, #0
 8025d64:	701a      	strb	r2, [r3, #0]
 8025d66:	b01c      	add	sp, #112	; 0x70
 8025d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d6c:	b003      	add	sp, #12
 8025d6e:	4770      	bx	lr
 8025d70:	20000064 	.word	0x20000064
 8025d74:	ffff0208 	.word	0xffff0208

08025d78 <siscanf>:
 8025d78:	b40e      	push	{r1, r2, r3}
 8025d7a:	b510      	push	{r4, lr}
 8025d7c:	b09f      	sub	sp, #124	; 0x7c
 8025d7e:	ac21      	add	r4, sp, #132	; 0x84
 8025d80:	f44f 7101 	mov.w	r1, #516	; 0x204
 8025d84:	f854 2b04 	ldr.w	r2, [r4], #4
 8025d88:	9201      	str	r2, [sp, #4]
 8025d8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8025d8e:	9004      	str	r0, [sp, #16]
 8025d90:	9008      	str	r0, [sp, #32]
 8025d92:	f7fa fa75 	bl	8020280 <strlen>
 8025d96:	4b0c      	ldr	r3, [pc, #48]	; (8025dc8 <siscanf+0x50>)
 8025d98:	9005      	str	r0, [sp, #20]
 8025d9a:	9009      	str	r0, [sp, #36]	; 0x24
 8025d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8025d9e:	480b      	ldr	r0, [pc, #44]	; (8025dcc <siscanf+0x54>)
 8025da0:	9a01      	ldr	r2, [sp, #4]
 8025da2:	6800      	ldr	r0, [r0, #0]
 8025da4:	9403      	str	r4, [sp, #12]
 8025da6:	2300      	movs	r3, #0
 8025da8:	9311      	str	r3, [sp, #68]	; 0x44
 8025daa:	9316      	str	r3, [sp, #88]	; 0x58
 8025dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025db0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025db4:	a904      	add	r1, sp, #16
 8025db6:	4623      	mov	r3, r4
 8025db8:	f002 fd46 	bl	8028848 <__ssvfiscanf_r>
 8025dbc:	b01f      	add	sp, #124	; 0x7c
 8025dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025dc2:	b003      	add	sp, #12
 8025dc4:	4770      	bx	lr
 8025dc6:	bf00      	nop
 8025dc8:	08025df3 	.word	0x08025df3
 8025dcc:	20000064 	.word	0x20000064

08025dd0 <__sread>:
 8025dd0:	b510      	push	{r4, lr}
 8025dd2:	460c      	mov	r4, r1
 8025dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dd8:	f000 f86e 	bl	8025eb8 <_read_r>
 8025ddc:	2800      	cmp	r0, #0
 8025dde:	bfab      	itete	ge
 8025de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025de2:	89a3      	ldrhlt	r3, [r4, #12]
 8025de4:	181b      	addge	r3, r3, r0
 8025de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025dea:	bfac      	ite	ge
 8025dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8025dee:	81a3      	strhlt	r3, [r4, #12]
 8025df0:	bd10      	pop	{r4, pc}

08025df2 <__seofread>:
 8025df2:	2000      	movs	r0, #0
 8025df4:	4770      	bx	lr

08025df6 <__swrite>:
 8025df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dfa:	461f      	mov	r7, r3
 8025dfc:	898b      	ldrh	r3, [r1, #12]
 8025dfe:	05db      	lsls	r3, r3, #23
 8025e00:	4605      	mov	r5, r0
 8025e02:	460c      	mov	r4, r1
 8025e04:	4616      	mov	r6, r2
 8025e06:	d505      	bpl.n	8025e14 <__swrite+0x1e>
 8025e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e0c:	2302      	movs	r3, #2
 8025e0e:	2200      	movs	r2, #0
 8025e10:	f000 f840 	bl	8025e94 <_lseek_r>
 8025e14:	89a3      	ldrh	r3, [r4, #12]
 8025e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025e1e:	81a3      	strh	r3, [r4, #12]
 8025e20:	4632      	mov	r2, r6
 8025e22:	463b      	mov	r3, r7
 8025e24:	4628      	mov	r0, r5
 8025e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025e2a:	f000 b857 	b.w	8025edc <_write_r>

08025e2e <__sseek>:
 8025e2e:	b510      	push	{r4, lr}
 8025e30:	460c      	mov	r4, r1
 8025e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e36:	f000 f82d 	bl	8025e94 <_lseek_r>
 8025e3a:	1c43      	adds	r3, r0, #1
 8025e3c:	89a3      	ldrh	r3, [r4, #12]
 8025e3e:	bf15      	itete	ne
 8025e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8025e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025e4a:	81a3      	strheq	r3, [r4, #12]
 8025e4c:	bf18      	it	ne
 8025e4e:	81a3      	strhne	r3, [r4, #12]
 8025e50:	bd10      	pop	{r4, pc}

08025e52 <__sclose>:
 8025e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e56:	f000 b80d 	b.w	8025e74 <_close_r>

08025e5a <memset>:
 8025e5a:	4402      	add	r2, r0
 8025e5c:	4603      	mov	r3, r0
 8025e5e:	4293      	cmp	r3, r2
 8025e60:	d100      	bne.n	8025e64 <memset+0xa>
 8025e62:	4770      	bx	lr
 8025e64:	f803 1b01 	strb.w	r1, [r3], #1
 8025e68:	e7f9      	b.n	8025e5e <memset+0x4>
	...

08025e6c <_localeconv_r>:
 8025e6c:	4800      	ldr	r0, [pc, #0]	; (8025e70 <_localeconv_r+0x4>)
 8025e6e:	4770      	bx	lr
 8025e70:	20000158 	.word	0x20000158

08025e74 <_close_r>:
 8025e74:	b538      	push	{r3, r4, r5, lr}
 8025e76:	4d06      	ldr	r5, [pc, #24]	; (8025e90 <_close_r+0x1c>)
 8025e78:	2300      	movs	r3, #0
 8025e7a:	4604      	mov	r4, r0
 8025e7c:	4608      	mov	r0, r1
 8025e7e:	602b      	str	r3, [r5, #0]
 8025e80:	f7fb fc2d 	bl	80216de <_close>
 8025e84:	1c43      	adds	r3, r0, #1
 8025e86:	d102      	bne.n	8025e8e <_close_r+0x1a>
 8025e88:	682b      	ldr	r3, [r5, #0]
 8025e8a:	b103      	cbz	r3, 8025e8e <_close_r+0x1a>
 8025e8c:	6023      	str	r3, [r4, #0]
 8025e8e:	bd38      	pop	{r3, r4, r5, pc}
 8025e90:	20000454 	.word	0x20000454

08025e94 <_lseek_r>:
 8025e94:	b538      	push	{r3, r4, r5, lr}
 8025e96:	4d07      	ldr	r5, [pc, #28]	; (8025eb4 <_lseek_r+0x20>)
 8025e98:	4604      	mov	r4, r0
 8025e9a:	4608      	mov	r0, r1
 8025e9c:	4611      	mov	r1, r2
 8025e9e:	2200      	movs	r2, #0
 8025ea0:	602a      	str	r2, [r5, #0]
 8025ea2:	461a      	mov	r2, r3
 8025ea4:	f7fb fc42 	bl	802172c <_lseek>
 8025ea8:	1c43      	adds	r3, r0, #1
 8025eaa:	d102      	bne.n	8025eb2 <_lseek_r+0x1e>
 8025eac:	682b      	ldr	r3, [r5, #0]
 8025eae:	b103      	cbz	r3, 8025eb2 <_lseek_r+0x1e>
 8025eb0:	6023      	str	r3, [r4, #0]
 8025eb2:	bd38      	pop	{r3, r4, r5, pc}
 8025eb4:	20000454 	.word	0x20000454

08025eb8 <_read_r>:
 8025eb8:	b538      	push	{r3, r4, r5, lr}
 8025eba:	4d07      	ldr	r5, [pc, #28]	; (8025ed8 <_read_r+0x20>)
 8025ebc:	4604      	mov	r4, r0
 8025ebe:	4608      	mov	r0, r1
 8025ec0:	4611      	mov	r1, r2
 8025ec2:	2200      	movs	r2, #0
 8025ec4:	602a      	str	r2, [r5, #0]
 8025ec6:	461a      	mov	r2, r3
 8025ec8:	f7fb fbd0 	bl	802166c <_read>
 8025ecc:	1c43      	adds	r3, r0, #1
 8025ece:	d102      	bne.n	8025ed6 <_read_r+0x1e>
 8025ed0:	682b      	ldr	r3, [r5, #0]
 8025ed2:	b103      	cbz	r3, 8025ed6 <_read_r+0x1e>
 8025ed4:	6023      	str	r3, [r4, #0]
 8025ed6:	bd38      	pop	{r3, r4, r5, pc}
 8025ed8:	20000454 	.word	0x20000454

08025edc <_write_r>:
 8025edc:	b538      	push	{r3, r4, r5, lr}
 8025ede:	4d07      	ldr	r5, [pc, #28]	; (8025efc <_write_r+0x20>)
 8025ee0:	4604      	mov	r4, r0
 8025ee2:	4608      	mov	r0, r1
 8025ee4:	4611      	mov	r1, r2
 8025ee6:	2200      	movs	r2, #0
 8025ee8:	602a      	str	r2, [r5, #0]
 8025eea:	461a      	mov	r2, r3
 8025eec:	f7fb fbdb 	bl	80216a6 <_write>
 8025ef0:	1c43      	adds	r3, r0, #1
 8025ef2:	d102      	bne.n	8025efa <_write_r+0x1e>
 8025ef4:	682b      	ldr	r3, [r5, #0]
 8025ef6:	b103      	cbz	r3, 8025efa <_write_r+0x1e>
 8025ef8:	6023      	str	r3, [r4, #0]
 8025efa:	bd38      	pop	{r3, r4, r5, pc}
 8025efc:	20000454 	.word	0x20000454

08025f00 <__errno>:
 8025f00:	4b01      	ldr	r3, [pc, #4]	; (8025f08 <__errno+0x8>)
 8025f02:	6818      	ldr	r0, [r3, #0]
 8025f04:	4770      	bx	lr
 8025f06:	bf00      	nop
 8025f08:	20000064 	.word	0x20000064

08025f0c <__libc_init_array>:
 8025f0c:	b570      	push	{r4, r5, r6, lr}
 8025f0e:	4d0d      	ldr	r5, [pc, #52]	; (8025f44 <__libc_init_array+0x38>)
 8025f10:	4c0d      	ldr	r4, [pc, #52]	; (8025f48 <__libc_init_array+0x3c>)
 8025f12:	1b64      	subs	r4, r4, r5
 8025f14:	10a4      	asrs	r4, r4, #2
 8025f16:	2600      	movs	r6, #0
 8025f18:	42a6      	cmp	r6, r4
 8025f1a:	d109      	bne.n	8025f30 <__libc_init_array+0x24>
 8025f1c:	4d0b      	ldr	r5, [pc, #44]	; (8025f4c <__libc_init_array+0x40>)
 8025f1e:	4c0c      	ldr	r4, [pc, #48]	; (8025f50 <__libc_init_array+0x44>)
 8025f20:	f003 ffde 	bl	8029ee0 <_init>
 8025f24:	1b64      	subs	r4, r4, r5
 8025f26:	10a4      	asrs	r4, r4, #2
 8025f28:	2600      	movs	r6, #0
 8025f2a:	42a6      	cmp	r6, r4
 8025f2c:	d105      	bne.n	8025f3a <__libc_init_array+0x2e>
 8025f2e:	bd70      	pop	{r4, r5, r6, pc}
 8025f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f34:	4798      	blx	r3
 8025f36:	3601      	adds	r6, #1
 8025f38:	e7ee      	b.n	8025f18 <__libc_init_array+0xc>
 8025f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f3e:	4798      	blx	r3
 8025f40:	3601      	adds	r6, #1
 8025f42:	e7f2      	b.n	8025f2a <__libc_init_array+0x1e>
 8025f44:	0802a3a4 	.word	0x0802a3a4
 8025f48:	0802a3a4 	.word	0x0802a3a4
 8025f4c:	0802a3a4 	.word	0x0802a3a4
 8025f50:	0802a3a8 	.word	0x0802a3a8

08025f54 <__retarget_lock_init_recursive>:
 8025f54:	4770      	bx	lr

08025f56 <__retarget_lock_acquire_recursive>:
 8025f56:	4770      	bx	lr

08025f58 <__retarget_lock_release_recursive>:
 8025f58:	4770      	bx	lr
	...

08025f5c <nanf>:
 8025f5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025f64 <nanf+0x8>
 8025f60:	4770      	bx	lr
 8025f62:	bf00      	nop
 8025f64:	7fc00000 	.word	0x7fc00000

08025f68 <quorem>:
 8025f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f6c:	6903      	ldr	r3, [r0, #16]
 8025f6e:	690c      	ldr	r4, [r1, #16]
 8025f70:	42a3      	cmp	r3, r4
 8025f72:	4607      	mov	r7, r0
 8025f74:	db7e      	blt.n	8026074 <quorem+0x10c>
 8025f76:	3c01      	subs	r4, #1
 8025f78:	f101 0814 	add.w	r8, r1, #20
 8025f7c:	f100 0514 	add.w	r5, r0, #20
 8025f80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025f84:	9301      	str	r3, [sp, #4]
 8025f86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025f8e:	3301      	adds	r3, #1
 8025f90:	429a      	cmp	r2, r3
 8025f92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025f96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025f9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8025f9e:	d331      	bcc.n	8026004 <quorem+0x9c>
 8025fa0:	f04f 0e00 	mov.w	lr, #0
 8025fa4:	4640      	mov	r0, r8
 8025fa6:	46ac      	mov	ip, r5
 8025fa8:	46f2      	mov	sl, lr
 8025faa:	f850 2b04 	ldr.w	r2, [r0], #4
 8025fae:	b293      	uxth	r3, r2
 8025fb0:	fb06 e303 	mla	r3, r6, r3, lr
 8025fb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025fb8:	0c1a      	lsrs	r2, r3, #16
 8025fba:	b29b      	uxth	r3, r3
 8025fbc:	ebaa 0303 	sub.w	r3, sl, r3
 8025fc0:	f8dc a000 	ldr.w	sl, [ip]
 8025fc4:	fa13 f38a 	uxtah	r3, r3, sl
 8025fc8:	fb06 220e 	mla	r2, r6, lr, r2
 8025fcc:	9300      	str	r3, [sp, #0]
 8025fce:	9b00      	ldr	r3, [sp, #0]
 8025fd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025fd4:	b292      	uxth	r2, r2
 8025fd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025fda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025fde:	f8bd 3000 	ldrh.w	r3, [sp]
 8025fe2:	4581      	cmp	r9, r0
 8025fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025fe8:	f84c 3b04 	str.w	r3, [ip], #4
 8025fec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025ff0:	d2db      	bcs.n	8025faa <quorem+0x42>
 8025ff2:	f855 300b 	ldr.w	r3, [r5, fp]
 8025ff6:	b92b      	cbnz	r3, 8026004 <quorem+0x9c>
 8025ff8:	9b01      	ldr	r3, [sp, #4]
 8025ffa:	3b04      	subs	r3, #4
 8025ffc:	429d      	cmp	r5, r3
 8025ffe:	461a      	mov	r2, r3
 8026000:	d32c      	bcc.n	802605c <quorem+0xf4>
 8026002:	613c      	str	r4, [r7, #16]
 8026004:	4638      	mov	r0, r7
 8026006:	f001 f9ef 	bl	80273e8 <__mcmp>
 802600a:	2800      	cmp	r0, #0
 802600c:	db22      	blt.n	8026054 <quorem+0xec>
 802600e:	3601      	adds	r6, #1
 8026010:	4629      	mov	r1, r5
 8026012:	2000      	movs	r0, #0
 8026014:	f858 2b04 	ldr.w	r2, [r8], #4
 8026018:	f8d1 c000 	ldr.w	ip, [r1]
 802601c:	b293      	uxth	r3, r2
 802601e:	1ac3      	subs	r3, r0, r3
 8026020:	0c12      	lsrs	r2, r2, #16
 8026022:	fa13 f38c 	uxtah	r3, r3, ip
 8026026:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802602a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802602e:	b29b      	uxth	r3, r3
 8026030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026034:	45c1      	cmp	r9, r8
 8026036:	f841 3b04 	str.w	r3, [r1], #4
 802603a:	ea4f 4022 	mov.w	r0, r2, asr #16
 802603e:	d2e9      	bcs.n	8026014 <quorem+0xac>
 8026040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026048:	b922      	cbnz	r2, 8026054 <quorem+0xec>
 802604a:	3b04      	subs	r3, #4
 802604c:	429d      	cmp	r5, r3
 802604e:	461a      	mov	r2, r3
 8026050:	d30a      	bcc.n	8026068 <quorem+0x100>
 8026052:	613c      	str	r4, [r7, #16]
 8026054:	4630      	mov	r0, r6
 8026056:	b003      	add	sp, #12
 8026058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802605c:	6812      	ldr	r2, [r2, #0]
 802605e:	3b04      	subs	r3, #4
 8026060:	2a00      	cmp	r2, #0
 8026062:	d1ce      	bne.n	8026002 <quorem+0x9a>
 8026064:	3c01      	subs	r4, #1
 8026066:	e7c9      	b.n	8025ffc <quorem+0x94>
 8026068:	6812      	ldr	r2, [r2, #0]
 802606a:	3b04      	subs	r3, #4
 802606c:	2a00      	cmp	r2, #0
 802606e:	d1f0      	bne.n	8026052 <quorem+0xea>
 8026070:	3c01      	subs	r4, #1
 8026072:	e7eb      	b.n	802604c <quorem+0xe4>
 8026074:	2000      	movs	r0, #0
 8026076:	e7ee      	b.n	8026056 <quorem+0xee>

08026078 <_dtoa_r>:
 8026078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802607c:	ed2d 8b04 	vpush	{d8-d9}
 8026080:	69c5      	ldr	r5, [r0, #28]
 8026082:	b093      	sub	sp, #76	; 0x4c
 8026084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026088:	ec57 6b10 	vmov	r6, r7, d0
 802608c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026090:	9107      	str	r1, [sp, #28]
 8026092:	4604      	mov	r4, r0
 8026094:	920a      	str	r2, [sp, #40]	; 0x28
 8026096:	930d      	str	r3, [sp, #52]	; 0x34
 8026098:	b975      	cbnz	r5, 80260b8 <_dtoa_r+0x40>
 802609a:	2010      	movs	r0, #16
 802609c:	f000 fe2a 	bl	8026cf4 <malloc>
 80260a0:	4602      	mov	r2, r0
 80260a2:	61e0      	str	r0, [r4, #28]
 80260a4:	b920      	cbnz	r0, 80260b0 <_dtoa_r+0x38>
 80260a6:	4bae      	ldr	r3, [pc, #696]	; (8026360 <_dtoa_r+0x2e8>)
 80260a8:	21ef      	movs	r1, #239	; 0xef
 80260aa:	48ae      	ldr	r0, [pc, #696]	; (8026364 <_dtoa_r+0x2ec>)
 80260ac:	f003 f808 	bl	80290c0 <__assert_func>
 80260b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80260b4:	6005      	str	r5, [r0, #0]
 80260b6:	60c5      	str	r5, [r0, #12]
 80260b8:	69e3      	ldr	r3, [r4, #28]
 80260ba:	6819      	ldr	r1, [r3, #0]
 80260bc:	b151      	cbz	r1, 80260d4 <_dtoa_r+0x5c>
 80260be:	685a      	ldr	r2, [r3, #4]
 80260c0:	604a      	str	r2, [r1, #4]
 80260c2:	2301      	movs	r3, #1
 80260c4:	4093      	lsls	r3, r2
 80260c6:	608b      	str	r3, [r1, #8]
 80260c8:	4620      	mov	r0, r4
 80260ca:	f000 ff07 	bl	8026edc <_Bfree>
 80260ce:	69e3      	ldr	r3, [r4, #28]
 80260d0:	2200      	movs	r2, #0
 80260d2:	601a      	str	r2, [r3, #0]
 80260d4:	1e3b      	subs	r3, r7, #0
 80260d6:	bfbb      	ittet	lt
 80260d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80260dc:	9303      	strlt	r3, [sp, #12]
 80260de:	2300      	movge	r3, #0
 80260e0:	2201      	movlt	r2, #1
 80260e2:	bfac      	ite	ge
 80260e4:	f8c8 3000 	strge.w	r3, [r8]
 80260e8:	f8c8 2000 	strlt.w	r2, [r8]
 80260ec:	4b9e      	ldr	r3, [pc, #632]	; (8026368 <_dtoa_r+0x2f0>)
 80260ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80260f2:	ea33 0308 	bics.w	r3, r3, r8
 80260f6:	d11b      	bne.n	8026130 <_dtoa_r+0xb8>
 80260f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80260fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80260fe:	6013      	str	r3, [r2, #0]
 8026100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8026104:	4333      	orrs	r3, r6
 8026106:	f000 8593 	beq.w	8026c30 <_dtoa_r+0xbb8>
 802610a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802610c:	b963      	cbnz	r3, 8026128 <_dtoa_r+0xb0>
 802610e:	4b97      	ldr	r3, [pc, #604]	; (802636c <_dtoa_r+0x2f4>)
 8026110:	e027      	b.n	8026162 <_dtoa_r+0xea>
 8026112:	4b97      	ldr	r3, [pc, #604]	; (8026370 <_dtoa_r+0x2f8>)
 8026114:	9300      	str	r3, [sp, #0]
 8026116:	3308      	adds	r3, #8
 8026118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802611a:	6013      	str	r3, [r2, #0]
 802611c:	9800      	ldr	r0, [sp, #0]
 802611e:	b013      	add	sp, #76	; 0x4c
 8026120:	ecbd 8b04 	vpop	{d8-d9}
 8026124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026128:	4b90      	ldr	r3, [pc, #576]	; (802636c <_dtoa_r+0x2f4>)
 802612a:	9300      	str	r3, [sp, #0]
 802612c:	3303      	adds	r3, #3
 802612e:	e7f3      	b.n	8026118 <_dtoa_r+0xa0>
 8026130:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026134:	2200      	movs	r2, #0
 8026136:	ec51 0b17 	vmov	r0, r1, d7
 802613a:	eeb0 8a47 	vmov.f32	s16, s14
 802613e:	eef0 8a67 	vmov.f32	s17, s15
 8026142:	2300      	movs	r3, #0
 8026144:	f7fa fcc8 	bl	8020ad8 <__aeabi_dcmpeq>
 8026148:	4681      	mov	r9, r0
 802614a:	b160      	cbz	r0, 8026166 <_dtoa_r+0xee>
 802614c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802614e:	2301      	movs	r3, #1
 8026150:	6013      	str	r3, [r2, #0]
 8026152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026154:	2b00      	cmp	r3, #0
 8026156:	f000 8568 	beq.w	8026c2a <_dtoa_r+0xbb2>
 802615a:	4b86      	ldr	r3, [pc, #536]	; (8026374 <_dtoa_r+0x2fc>)
 802615c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802615e:	6013      	str	r3, [r2, #0]
 8026160:	3b01      	subs	r3, #1
 8026162:	9300      	str	r3, [sp, #0]
 8026164:	e7da      	b.n	802611c <_dtoa_r+0xa4>
 8026166:	aa10      	add	r2, sp, #64	; 0x40
 8026168:	a911      	add	r1, sp, #68	; 0x44
 802616a:	4620      	mov	r0, r4
 802616c:	eeb0 0a48 	vmov.f32	s0, s16
 8026170:	eef0 0a68 	vmov.f32	s1, s17
 8026174:	f001 fa4e 	bl	8027614 <__d2b>
 8026178:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802617c:	4682      	mov	sl, r0
 802617e:	2d00      	cmp	r5, #0
 8026180:	d07f      	beq.n	8026282 <_dtoa_r+0x20a>
 8026182:	ee18 3a90 	vmov	r3, s17
 8026186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802618a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802618e:	ec51 0b18 	vmov	r0, r1, d8
 8026192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802619a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802619e:	4619      	mov	r1, r3
 80261a0:	2200      	movs	r2, #0
 80261a2:	4b75      	ldr	r3, [pc, #468]	; (8026378 <_dtoa_r+0x300>)
 80261a4:	f7fa f878 	bl	8020298 <__aeabi_dsub>
 80261a8:	a367      	add	r3, pc, #412	; (adr r3, 8026348 <_dtoa_r+0x2d0>)
 80261aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261ae:	f7fa fa2b 	bl	8020608 <__aeabi_dmul>
 80261b2:	a367      	add	r3, pc, #412	; (adr r3, 8026350 <_dtoa_r+0x2d8>)
 80261b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261b8:	f7fa f870 	bl	802029c <__adddf3>
 80261bc:	4606      	mov	r6, r0
 80261be:	4628      	mov	r0, r5
 80261c0:	460f      	mov	r7, r1
 80261c2:	f7fa f9b7 	bl	8020534 <__aeabi_i2d>
 80261c6:	a364      	add	r3, pc, #400	; (adr r3, 8026358 <_dtoa_r+0x2e0>)
 80261c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261cc:	f7fa fa1c 	bl	8020608 <__aeabi_dmul>
 80261d0:	4602      	mov	r2, r0
 80261d2:	460b      	mov	r3, r1
 80261d4:	4630      	mov	r0, r6
 80261d6:	4639      	mov	r1, r7
 80261d8:	f7fa f860 	bl	802029c <__adddf3>
 80261dc:	4606      	mov	r6, r0
 80261de:	460f      	mov	r7, r1
 80261e0:	f7fa fcc2 	bl	8020b68 <__aeabi_d2iz>
 80261e4:	2200      	movs	r2, #0
 80261e6:	4683      	mov	fp, r0
 80261e8:	2300      	movs	r3, #0
 80261ea:	4630      	mov	r0, r6
 80261ec:	4639      	mov	r1, r7
 80261ee:	f7fa fc7d 	bl	8020aec <__aeabi_dcmplt>
 80261f2:	b148      	cbz	r0, 8026208 <_dtoa_r+0x190>
 80261f4:	4658      	mov	r0, fp
 80261f6:	f7fa f99d 	bl	8020534 <__aeabi_i2d>
 80261fa:	4632      	mov	r2, r6
 80261fc:	463b      	mov	r3, r7
 80261fe:	f7fa fc6b 	bl	8020ad8 <__aeabi_dcmpeq>
 8026202:	b908      	cbnz	r0, 8026208 <_dtoa_r+0x190>
 8026204:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026208:	f1bb 0f16 	cmp.w	fp, #22
 802620c:	d857      	bhi.n	80262be <_dtoa_r+0x246>
 802620e:	4b5b      	ldr	r3, [pc, #364]	; (802637c <_dtoa_r+0x304>)
 8026210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026218:	ec51 0b18 	vmov	r0, r1, d8
 802621c:	f7fa fc66 	bl	8020aec <__aeabi_dcmplt>
 8026220:	2800      	cmp	r0, #0
 8026222:	d04e      	beq.n	80262c2 <_dtoa_r+0x24a>
 8026224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026228:	2300      	movs	r3, #0
 802622a:	930c      	str	r3, [sp, #48]	; 0x30
 802622c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802622e:	1b5b      	subs	r3, r3, r5
 8026230:	1e5a      	subs	r2, r3, #1
 8026232:	bf45      	ittet	mi
 8026234:	f1c3 0301 	rsbmi	r3, r3, #1
 8026238:	9305      	strmi	r3, [sp, #20]
 802623a:	2300      	movpl	r3, #0
 802623c:	2300      	movmi	r3, #0
 802623e:	9206      	str	r2, [sp, #24]
 8026240:	bf54      	ite	pl
 8026242:	9305      	strpl	r3, [sp, #20]
 8026244:	9306      	strmi	r3, [sp, #24]
 8026246:	f1bb 0f00 	cmp.w	fp, #0
 802624a:	db3c      	blt.n	80262c6 <_dtoa_r+0x24e>
 802624c:	9b06      	ldr	r3, [sp, #24]
 802624e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8026252:	445b      	add	r3, fp
 8026254:	9306      	str	r3, [sp, #24]
 8026256:	2300      	movs	r3, #0
 8026258:	9308      	str	r3, [sp, #32]
 802625a:	9b07      	ldr	r3, [sp, #28]
 802625c:	2b09      	cmp	r3, #9
 802625e:	d868      	bhi.n	8026332 <_dtoa_r+0x2ba>
 8026260:	2b05      	cmp	r3, #5
 8026262:	bfc4      	itt	gt
 8026264:	3b04      	subgt	r3, #4
 8026266:	9307      	strgt	r3, [sp, #28]
 8026268:	9b07      	ldr	r3, [sp, #28]
 802626a:	f1a3 0302 	sub.w	r3, r3, #2
 802626e:	bfcc      	ite	gt
 8026270:	2500      	movgt	r5, #0
 8026272:	2501      	movle	r5, #1
 8026274:	2b03      	cmp	r3, #3
 8026276:	f200 8085 	bhi.w	8026384 <_dtoa_r+0x30c>
 802627a:	e8df f003 	tbb	[pc, r3]
 802627e:	3b2e      	.short	0x3b2e
 8026280:	5839      	.short	0x5839
 8026282:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026286:	441d      	add	r5, r3
 8026288:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802628c:	2b20      	cmp	r3, #32
 802628e:	bfc1      	itttt	gt
 8026290:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026294:	fa08 f803 	lslgt.w	r8, r8, r3
 8026298:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802629c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80262a0:	bfd6      	itet	le
 80262a2:	f1c3 0320 	rsble	r3, r3, #32
 80262a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80262aa:	fa06 f003 	lslle.w	r0, r6, r3
 80262ae:	f7fa f931 	bl	8020514 <__aeabi_ui2d>
 80262b2:	2201      	movs	r2, #1
 80262b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80262b8:	3d01      	subs	r5, #1
 80262ba:	920e      	str	r2, [sp, #56]	; 0x38
 80262bc:	e76f      	b.n	802619e <_dtoa_r+0x126>
 80262be:	2301      	movs	r3, #1
 80262c0:	e7b3      	b.n	802622a <_dtoa_r+0x1b2>
 80262c2:	900c      	str	r0, [sp, #48]	; 0x30
 80262c4:	e7b2      	b.n	802622c <_dtoa_r+0x1b4>
 80262c6:	9b05      	ldr	r3, [sp, #20]
 80262c8:	eba3 030b 	sub.w	r3, r3, fp
 80262cc:	9305      	str	r3, [sp, #20]
 80262ce:	f1cb 0300 	rsb	r3, fp, #0
 80262d2:	9308      	str	r3, [sp, #32]
 80262d4:	2300      	movs	r3, #0
 80262d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80262d8:	e7bf      	b.n	802625a <_dtoa_r+0x1e2>
 80262da:	2300      	movs	r3, #0
 80262dc:	9309      	str	r3, [sp, #36]	; 0x24
 80262de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	dc52      	bgt.n	802638a <_dtoa_r+0x312>
 80262e4:	2301      	movs	r3, #1
 80262e6:	9301      	str	r3, [sp, #4]
 80262e8:	9304      	str	r3, [sp, #16]
 80262ea:	461a      	mov	r2, r3
 80262ec:	920a      	str	r2, [sp, #40]	; 0x28
 80262ee:	e00b      	b.n	8026308 <_dtoa_r+0x290>
 80262f0:	2301      	movs	r3, #1
 80262f2:	e7f3      	b.n	80262dc <_dtoa_r+0x264>
 80262f4:	2300      	movs	r3, #0
 80262f6:	9309      	str	r3, [sp, #36]	; 0x24
 80262f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262fa:	445b      	add	r3, fp
 80262fc:	9301      	str	r3, [sp, #4]
 80262fe:	3301      	adds	r3, #1
 8026300:	2b01      	cmp	r3, #1
 8026302:	9304      	str	r3, [sp, #16]
 8026304:	bfb8      	it	lt
 8026306:	2301      	movlt	r3, #1
 8026308:	69e0      	ldr	r0, [r4, #28]
 802630a:	2100      	movs	r1, #0
 802630c:	2204      	movs	r2, #4
 802630e:	f102 0614 	add.w	r6, r2, #20
 8026312:	429e      	cmp	r6, r3
 8026314:	d93d      	bls.n	8026392 <_dtoa_r+0x31a>
 8026316:	6041      	str	r1, [r0, #4]
 8026318:	4620      	mov	r0, r4
 802631a:	f000 fd9f 	bl	8026e5c <_Balloc>
 802631e:	9000      	str	r0, [sp, #0]
 8026320:	2800      	cmp	r0, #0
 8026322:	d139      	bne.n	8026398 <_dtoa_r+0x320>
 8026324:	4b16      	ldr	r3, [pc, #88]	; (8026380 <_dtoa_r+0x308>)
 8026326:	4602      	mov	r2, r0
 8026328:	f240 11af 	movw	r1, #431	; 0x1af
 802632c:	e6bd      	b.n	80260aa <_dtoa_r+0x32>
 802632e:	2301      	movs	r3, #1
 8026330:	e7e1      	b.n	80262f6 <_dtoa_r+0x27e>
 8026332:	2501      	movs	r5, #1
 8026334:	2300      	movs	r3, #0
 8026336:	9307      	str	r3, [sp, #28]
 8026338:	9509      	str	r5, [sp, #36]	; 0x24
 802633a:	f04f 33ff 	mov.w	r3, #4294967295
 802633e:	9301      	str	r3, [sp, #4]
 8026340:	9304      	str	r3, [sp, #16]
 8026342:	2200      	movs	r2, #0
 8026344:	2312      	movs	r3, #18
 8026346:	e7d1      	b.n	80262ec <_dtoa_r+0x274>
 8026348:	636f4361 	.word	0x636f4361
 802634c:	3fd287a7 	.word	0x3fd287a7
 8026350:	8b60c8b3 	.word	0x8b60c8b3
 8026354:	3fc68a28 	.word	0x3fc68a28
 8026358:	509f79fb 	.word	0x509f79fb
 802635c:	3fd34413 	.word	0x3fd34413
 8026360:	08029f98 	.word	0x08029f98
 8026364:	08029faf 	.word	0x08029faf
 8026368:	7ff00000 	.word	0x7ff00000
 802636c:	08029f94 	.word	0x08029f94
 8026370:	08029f8b 	.word	0x08029f8b
 8026374:	0802a2f1 	.word	0x0802a2f1
 8026378:	3ff80000 	.word	0x3ff80000
 802637c:	0802a0a0 	.word	0x0802a0a0
 8026380:	0802a007 	.word	0x0802a007
 8026384:	2301      	movs	r3, #1
 8026386:	9309      	str	r3, [sp, #36]	; 0x24
 8026388:	e7d7      	b.n	802633a <_dtoa_r+0x2c2>
 802638a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802638c:	9301      	str	r3, [sp, #4]
 802638e:	9304      	str	r3, [sp, #16]
 8026390:	e7ba      	b.n	8026308 <_dtoa_r+0x290>
 8026392:	3101      	adds	r1, #1
 8026394:	0052      	lsls	r2, r2, #1
 8026396:	e7ba      	b.n	802630e <_dtoa_r+0x296>
 8026398:	69e3      	ldr	r3, [r4, #28]
 802639a:	9a00      	ldr	r2, [sp, #0]
 802639c:	601a      	str	r2, [r3, #0]
 802639e:	9b04      	ldr	r3, [sp, #16]
 80263a0:	2b0e      	cmp	r3, #14
 80263a2:	f200 80a8 	bhi.w	80264f6 <_dtoa_r+0x47e>
 80263a6:	2d00      	cmp	r5, #0
 80263a8:	f000 80a5 	beq.w	80264f6 <_dtoa_r+0x47e>
 80263ac:	f1bb 0f00 	cmp.w	fp, #0
 80263b0:	dd38      	ble.n	8026424 <_dtoa_r+0x3ac>
 80263b2:	4bc0      	ldr	r3, [pc, #768]	; (80266b4 <_dtoa_r+0x63c>)
 80263b4:	f00b 020f 	and.w	r2, fp, #15
 80263b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80263bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80263c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80263c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80263c8:	d019      	beq.n	80263fe <_dtoa_r+0x386>
 80263ca:	4bbb      	ldr	r3, [pc, #748]	; (80266b8 <_dtoa_r+0x640>)
 80263cc:	ec51 0b18 	vmov	r0, r1, d8
 80263d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80263d4:	f7fa fa42 	bl	802085c <__aeabi_ddiv>
 80263d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80263dc:	f008 080f 	and.w	r8, r8, #15
 80263e0:	2503      	movs	r5, #3
 80263e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80266b8 <_dtoa_r+0x640>
 80263e6:	f1b8 0f00 	cmp.w	r8, #0
 80263ea:	d10a      	bne.n	8026402 <_dtoa_r+0x38a>
 80263ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80263f0:	4632      	mov	r2, r6
 80263f2:	463b      	mov	r3, r7
 80263f4:	f7fa fa32 	bl	802085c <__aeabi_ddiv>
 80263f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80263fc:	e02b      	b.n	8026456 <_dtoa_r+0x3de>
 80263fe:	2502      	movs	r5, #2
 8026400:	e7ef      	b.n	80263e2 <_dtoa_r+0x36a>
 8026402:	f018 0f01 	tst.w	r8, #1
 8026406:	d008      	beq.n	802641a <_dtoa_r+0x3a2>
 8026408:	4630      	mov	r0, r6
 802640a:	4639      	mov	r1, r7
 802640c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8026410:	f7fa f8fa 	bl	8020608 <__aeabi_dmul>
 8026414:	3501      	adds	r5, #1
 8026416:	4606      	mov	r6, r0
 8026418:	460f      	mov	r7, r1
 802641a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802641e:	f109 0908 	add.w	r9, r9, #8
 8026422:	e7e0      	b.n	80263e6 <_dtoa_r+0x36e>
 8026424:	f000 809f 	beq.w	8026566 <_dtoa_r+0x4ee>
 8026428:	f1cb 0600 	rsb	r6, fp, #0
 802642c:	4ba1      	ldr	r3, [pc, #644]	; (80266b4 <_dtoa_r+0x63c>)
 802642e:	4fa2      	ldr	r7, [pc, #648]	; (80266b8 <_dtoa_r+0x640>)
 8026430:	f006 020f 	and.w	r2, r6, #15
 8026434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802643c:	ec51 0b18 	vmov	r0, r1, d8
 8026440:	f7fa f8e2 	bl	8020608 <__aeabi_dmul>
 8026444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026448:	1136      	asrs	r6, r6, #4
 802644a:	2300      	movs	r3, #0
 802644c:	2502      	movs	r5, #2
 802644e:	2e00      	cmp	r6, #0
 8026450:	d17e      	bne.n	8026550 <_dtoa_r+0x4d8>
 8026452:	2b00      	cmp	r3, #0
 8026454:	d1d0      	bne.n	80263f8 <_dtoa_r+0x380>
 8026456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026458:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802645c:	2b00      	cmp	r3, #0
 802645e:	f000 8084 	beq.w	802656a <_dtoa_r+0x4f2>
 8026462:	4b96      	ldr	r3, [pc, #600]	; (80266bc <_dtoa_r+0x644>)
 8026464:	2200      	movs	r2, #0
 8026466:	4640      	mov	r0, r8
 8026468:	4649      	mov	r1, r9
 802646a:	f7fa fb3f 	bl	8020aec <__aeabi_dcmplt>
 802646e:	2800      	cmp	r0, #0
 8026470:	d07b      	beq.n	802656a <_dtoa_r+0x4f2>
 8026472:	9b04      	ldr	r3, [sp, #16]
 8026474:	2b00      	cmp	r3, #0
 8026476:	d078      	beq.n	802656a <_dtoa_r+0x4f2>
 8026478:	9b01      	ldr	r3, [sp, #4]
 802647a:	2b00      	cmp	r3, #0
 802647c:	dd39      	ble.n	80264f2 <_dtoa_r+0x47a>
 802647e:	4b90      	ldr	r3, [pc, #576]	; (80266c0 <_dtoa_r+0x648>)
 8026480:	2200      	movs	r2, #0
 8026482:	4640      	mov	r0, r8
 8026484:	4649      	mov	r1, r9
 8026486:	f7fa f8bf 	bl	8020608 <__aeabi_dmul>
 802648a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802648e:	9e01      	ldr	r6, [sp, #4]
 8026490:	f10b 37ff 	add.w	r7, fp, #4294967295
 8026494:	3501      	adds	r5, #1
 8026496:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802649a:	4628      	mov	r0, r5
 802649c:	f7fa f84a 	bl	8020534 <__aeabi_i2d>
 80264a0:	4642      	mov	r2, r8
 80264a2:	464b      	mov	r3, r9
 80264a4:	f7fa f8b0 	bl	8020608 <__aeabi_dmul>
 80264a8:	4b86      	ldr	r3, [pc, #536]	; (80266c4 <_dtoa_r+0x64c>)
 80264aa:	2200      	movs	r2, #0
 80264ac:	f7f9 fef6 	bl	802029c <__adddf3>
 80264b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80264b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80264b8:	9303      	str	r3, [sp, #12]
 80264ba:	2e00      	cmp	r6, #0
 80264bc:	d158      	bne.n	8026570 <_dtoa_r+0x4f8>
 80264be:	4b82      	ldr	r3, [pc, #520]	; (80266c8 <_dtoa_r+0x650>)
 80264c0:	2200      	movs	r2, #0
 80264c2:	4640      	mov	r0, r8
 80264c4:	4649      	mov	r1, r9
 80264c6:	f7f9 fee7 	bl	8020298 <__aeabi_dsub>
 80264ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80264ce:	4680      	mov	r8, r0
 80264d0:	4689      	mov	r9, r1
 80264d2:	f7fa fb29 	bl	8020b28 <__aeabi_dcmpgt>
 80264d6:	2800      	cmp	r0, #0
 80264d8:	f040 8296 	bne.w	8026a08 <_dtoa_r+0x990>
 80264dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80264e0:	4640      	mov	r0, r8
 80264e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80264e6:	4649      	mov	r1, r9
 80264e8:	f7fa fb00 	bl	8020aec <__aeabi_dcmplt>
 80264ec:	2800      	cmp	r0, #0
 80264ee:	f040 8289 	bne.w	8026a04 <_dtoa_r+0x98c>
 80264f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80264f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80264f8:	2b00      	cmp	r3, #0
 80264fa:	f2c0 814e 	blt.w	802679a <_dtoa_r+0x722>
 80264fe:	f1bb 0f0e 	cmp.w	fp, #14
 8026502:	f300 814a 	bgt.w	802679a <_dtoa_r+0x722>
 8026506:	4b6b      	ldr	r3, [pc, #428]	; (80266b4 <_dtoa_r+0x63c>)
 8026508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802650c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026512:	2b00      	cmp	r3, #0
 8026514:	f280 80dc 	bge.w	80266d0 <_dtoa_r+0x658>
 8026518:	9b04      	ldr	r3, [sp, #16]
 802651a:	2b00      	cmp	r3, #0
 802651c:	f300 80d8 	bgt.w	80266d0 <_dtoa_r+0x658>
 8026520:	f040 826f 	bne.w	8026a02 <_dtoa_r+0x98a>
 8026524:	4b68      	ldr	r3, [pc, #416]	; (80266c8 <_dtoa_r+0x650>)
 8026526:	2200      	movs	r2, #0
 8026528:	4640      	mov	r0, r8
 802652a:	4649      	mov	r1, r9
 802652c:	f7fa f86c 	bl	8020608 <__aeabi_dmul>
 8026530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026534:	f7fa faee 	bl	8020b14 <__aeabi_dcmpge>
 8026538:	9e04      	ldr	r6, [sp, #16]
 802653a:	4637      	mov	r7, r6
 802653c:	2800      	cmp	r0, #0
 802653e:	f040 8245 	bne.w	80269cc <_dtoa_r+0x954>
 8026542:	9d00      	ldr	r5, [sp, #0]
 8026544:	2331      	movs	r3, #49	; 0x31
 8026546:	f805 3b01 	strb.w	r3, [r5], #1
 802654a:	f10b 0b01 	add.w	fp, fp, #1
 802654e:	e241      	b.n	80269d4 <_dtoa_r+0x95c>
 8026550:	07f2      	lsls	r2, r6, #31
 8026552:	d505      	bpl.n	8026560 <_dtoa_r+0x4e8>
 8026554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026558:	f7fa f856 	bl	8020608 <__aeabi_dmul>
 802655c:	3501      	adds	r5, #1
 802655e:	2301      	movs	r3, #1
 8026560:	1076      	asrs	r6, r6, #1
 8026562:	3708      	adds	r7, #8
 8026564:	e773      	b.n	802644e <_dtoa_r+0x3d6>
 8026566:	2502      	movs	r5, #2
 8026568:	e775      	b.n	8026456 <_dtoa_r+0x3de>
 802656a:	9e04      	ldr	r6, [sp, #16]
 802656c:	465f      	mov	r7, fp
 802656e:	e792      	b.n	8026496 <_dtoa_r+0x41e>
 8026570:	9900      	ldr	r1, [sp, #0]
 8026572:	4b50      	ldr	r3, [pc, #320]	; (80266b4 <_dtoa_r+0x63c>)
 8026574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026578:	4431      	add	r1, r6
 802657a:	9102      	str	r1, [sp, #8]
 802657c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802657e:	eeb0 9a47 	vmov.f32	s18, s14
 8026582:	eef0 9a67 	vmov.f32	s19, s15
 8026586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802658a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802658e:	2900      	cmp	r1, #0
 8026590:	d044      	beq.n	802661c <_dtoa_r+0x5a4>
 8026592:	494e      	ldr	r1, [pc, #312]	; (80266cc <_dtoa_r+0x654>)
 8026594:	2000      	movs	r0, #0
 8026596:	f7fa f961 	bl	802085c <__aeabi_ddiv>
 802659a:	ec53 2b19 	vmov	r2, r3, d9
 802659e:	f7f9 fe7b 	bl	8020298 <__aeabi_dsub>
 80265a2:	9d00      	ldr	r5, [sp, #0]
 80265a4:	ec41 0b19 	vmov	d9, r0, r1
 80265a8:	4649      	mov	r1, r9
 80265aa:	4640      	mov	r0, r8
 80265ac:	f7fa fadc 	bl	8020b68 <__aeabi_d2iz>
 80265b0:	4606      	mov	r6, r0
 80265b2:	f7f9 ffbf 	bl	8020534 <__aeabi_i2d>
 80265b6:	4602      	mov	r2, r0
 80265b8:	460b      	mov	r3, r1
 80265ba:	4640      	mov	r0, r8
 80265bc:	4649      	mov	r1, r9
 80265be:	f7f9 fe6b 	bl	8020298 <__aeabi_dsub>
 80265c2:	3630      	adds	r6, #48	; 0x30
 80265c4:	f805 6b01 	strb.w	r6, [r5], #1
 80265c8:	ec53 2b19 	vmov	r2, r3, d9
 80265cc:	4680      	mov	r8, r0
 80265ce:	4689      	mov	r9, r1
 80265d0:	f7fa fa8c 	bl	8020aec <__aeabi_dcmplt>
 80265d4:	2800      	cmp	r0, #0
 80265d6:	d164      	bne.n	80266a2 <_dtoa_r+0x62a>
 80265d8:	4642      	mov	r2, r8
 80265da:	464b      	mov	r3, r9
 80265dc:	4937      	ldr	r1, [pc, #220]	; (80266bc <_dtoa_r+0x644>)
 80265de:	2000      	movs	r0, #0
 80265e0:	f7f9 fe5a 	bl	8020298 <__aeabi_dsub>
 80265e4:	ec53 2b19 	vmov	r2, r3, d9
 80265e8:	f7fa fa80 	bl	8020aec <__aeabi_dcmplt>
 80265ec:	2800      	cmp	r0, #0
 80265ee:	f040 80b6 	bne.w	802675e <_dtoa_r+0x6e6>
 80265f2:	9b02      	ldr	r3, [sp, #8]
 80265f4:	429d      	cmp	r5, r3
 80265f6:	f43f af7c 	beq.w	80264f2 <_dtoa_r+0x47a>
 80265fa:	4b31      	ldr	r3, [pc, #196]	; (80266c0 <_dtoa_r+0x648>)
 80265fc:	ec51 0b19 	vmov	r0, r1, d9
 8026600:	2200      	movs	r2, #0
 8026602:	f7fa f801 	bl	8020608 <__aeabi_dmul>
 8026606:	4b2e      	ldr	r3, [pc, #184]	; (80266c0 <_dtoa_r+0x648>)
 8026608:	ec41 0b19 	vmov	d9, r0, r1
 802660c:	2200      	movs	r2, #0
 802660e:	4640      	mov	r0, r8
 8026610:	4649      	mov	r1, r9
 8026612:	f7f9 fff9 	bl	8020608 <__aeabi_dmul>
 8026616:	4680      	mov	r8, r0
 8026618:	4689      	mov	r9, r1
 802661a:	e7c5      	b.n	80265a8 <_dtoa_r+0x530>
 802661c:	ec51 0b17 	vmov	r0, r1, d7
 8026620:	f7f9 fff2 	bl	8020608 <__aeabi_dmul>
 8026624:	9b02      	ldr	r3, [sp, #8]
 8026626:	9d00      	ldr	r5, [sp, #0]
 8026628:	930f      	str	r3, [sp, #60]	; 0x3c
 802662a:	ec41 0b19 	vmov	d9, r0, r1
 802662e:	4649      	mov	r1, r9
 8026630:	4640      	mov	r0, r8
 8026632:	f7fa fa99 	bl	8020b68 <__aeabi_d2iz>
 8026636:	4606      	mov	r6, r0
 8026638:	f7f9 ff7c 	bl	8020534 <__aeabi_i2d>
 802663c:	3630      	adds	r6, #48	; 0x30
 802663e:	4602      	mov	r2, r0
 8026640:	460b      	mov	r3, r1
 8026642:	4640      	mov	r0, r8
 8026644:	4649      	mov	r1, r9
 8026646:	f7f9 fe27 	bl	8020298 <__aeabi_dsub>
 802664a:	f805 6b01 	strb.w	r6, [r5], #1
 802664e:	9b02      	ldr	r3, [sp, #8]
 8026650:	429d      	cmp	r5, r3
 8026652:	4680      	mov	r8, r0
 8026654:	4689      	mov	r9, r1
 8026656:	f04f 0200 	mov.w	r2, #0
 802665a:	d124      	bne.n	80266a6 <_dtoa_r+0x62e>
 802665c:	4b1b      	ldr	r3, [pc, #108]	; (80266cc <_dtoa_r+0x654>)
 802665e:	ec51 0b19 	vmov	r0, r1, d9
 8026662:	f7f9 fe1b 	bl	802029c <__adddf3>
 8026666:	4602      	mov	r2, r0
 8026668:	460b      	mov	r3, r1
 802666a:	4640      	mov	r0, r8
 802666c:	4649      	mov	r1, r9
 802666e:	f7fa fa5b 	bl	8020b28 <__aeabi_dcmpgt>
 8026672:	2800      	cmp	r0, #0
 8026674:	d173      	bne.n	802675e <_dtoa_r+0x6e6>
 8026676:	ec53 2b19 	vmov	r2, r3, d9
 802667a:	4914      	ldr	r1, [pc, #80]	; (80266cc <_dtoa_r+0x654>)
 802667c:	2000      	movs	r0, #0
 802667e:	f7f9 fe0b 	bl	8020298 <__aeabi_dsub>
 8026682:	4602      	mov	r2, r0
 8026684:	460b      	mov	r3, r1
 8026686:	4640      	mov	r0, r8
 8026688:	4649      	mov	r1, r9
 802668a:	f7fa fa2f 	bl	8020aec <__aeabi_dcmplt>
 802668e:	2800      	cmp	r0, #0
 8026690:	f43f af2f 	beq.w	80264f2 <_dtoa_r+0x47a>
 8026694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026696:	1e6b      	subs	r3, r5, #1
 8026698:	930f      	str	r3, [sp, #60]	; 0x3c
 802669a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802669e:	2b30      	cmp	r3, #48	; 0x30
 80266a0:	d0f8      	beq.n	8026694 <_dtoa_r+0x61c>
 80266a2:	46bb      	mov	fp, r7
 80266a4:	e04a      	b.n	802673c <_dtoa_r+0x6c4>
 80266a6:	4b06      	ldr	r3, [pc, #24]	; (80266c0 <_dtoa_r+0x648>)
 80266a8:	f7f9 ffae 	bl	8020608 <__aeabi_dmul>
 80266ac:	4680      	mov	r8, r0
 80266ae:	4689      	mov	r9, r1
 80266b0:	e7bd      	b.n	802662e <_dtoa_r+0x5b6>
 80266b2:	bf00      	nop
 80266b4:	0802a0a0 	.word	0x0802a0a0
 80266b8:	0802a078 	.word	0x0802a078
 80266bc:	3ff00000 	.word	0x3ff00000
 80266c0:	40240000 	.word	0x40240000
 80266c4:	401c0000 	.word	0x401c0000
 80266c8:	40140000 	.word	0x40140000
 80266cc:	3fe00000 	.word	0x3fe00000
 80266d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80266d4:	9d00      	ldr	r5, [sp, #0]
 80266d6:	4642      	mov	r2, r8
 80266d8:	464b      	mov	r3, r9
 80266da:	4630      	mov	r0, r6
 80266dc:	4639      	mov	r1, r7
 80266de:	f7fa f8bd 	bl	802085c <__aeabi_ddiv>
 80266e2:	f7fa fa41 	bl	8020b68 <__aeabi_d2iz>
 80266e6:	9001      	str	r0, [sp, #4]
 80266e8:	f7f9 ff24 	bl	8020534 <__aeabi_i2d>
 80266ec:	4642      	mov	r2, r8
 80266ee:	464b      	mov	r3, r9
 80266f0:	f7f9 ff8a 	bl	8020608 <__aeabi_dmul>
 80266f4:	4602      	mov	r2, r0
 80266f6:	460b      	mov	r3, r1
 80266f8:	4630      	mov	r0, r6
 80266fa:	4639      	mov	r1, r7
 80266fc:	f7f9 fdcc 	bl	8020298 <__aeabi_dsub>
 8026700:	9e01      	ldr	r6, [sp, #4]
 8026702:	9f04      	ldr	r7, [sp, #16]
 8026704:	3630      	adds	r6, #48	; 0x30
 8026706:	f805 6b01 	strb.w	r6, [r5], #1
 802670a:	9e00      	ldr	r6, [sp, #0]
 802670c:	1bae      	subs	r6, r5, r6
 802670e:	42b7      	cmp	r7, r6
 8026710:	4602      	mov	r2, r0
 8026712:	460b      	mov	r3, r1
 8026714:	d134      	bne.n	8026780 <_dtoa_r+0x708>
 8026716:	f7f9 fdc1 	bl	802029c <__adddf3>
 802671a:	4642      	mov	r2, r8
 802671c:	464b      	mov	r3, r9
 802671e:	4606      	mov	r6, r0
 8026720:	460f      	mov	r7, r1
 8026722:	f7fa fa01 	bl	8020b28 <__aeabi_dcmpgt>
 8026726:	b9c8      	cbnz	r0, 802675c <_dtoa_r+0x6e4>
 8026728:	4642      	mov	r2, r8
 802672a:	464b      	mov	r3, r9
 802672c:	4630      	mov	r0, r6
 802672e:	4639      	mov	r1, r7
 8026730:	f7fa f9d2 	bl	8020ad8 <__aeabi_dcmpeq>
 8026734:	b110      	cbz	r0, 802673c <_dtoa_r+0x6c4>
 8026736:	9b01      	ldr	r3, [sp, #4]
 8026738:	07db      	lsls	r3, r3, #31
 802673a:	d40f      	bmi.n	802675c <_dtoa_r+0x6e4>
 802673c:	4651      	mov	r1, sl
 802673e:	4620      	mov	r0, r4
 8026740:	f000 fbcc 	bl	8026edc <_Bfree>
 8026744:	2300      	movs	r3, #0
 8026746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026748:	702b      	strb	r3, [r5, #0]
 802674a:	f10b 0301 	add.w	r3, fp, #1
 802674e:	6013      	str	r3, [r2, #0]
 8026750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026752:	2b00      	cmp	r3, #0
 8026754:	f43f ace2 	beq.w	802611c <_dtoa_r+0xa4>
 8026758:	601d      	str	r5, [r3, #0]
 802675a:	e4df      	b.n	802611c <_dtoa_r+0xa4>
 802675c:	465f      	mov	r7, fp
 802675e:	462b      	mov	r3, r5
 8026760:	461d      	mov	r5, r3
 8026762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026766:	2a39      	cmp	r2, #57	; 0x39
 8026768:	d106      	bne.n	8026778 <_dtoa_r+0x700>
 802676a:	9a00      	ldr	r2, [sp, #0]
 802676c:	429a      	cmp	r2, r3
 802676e:	d1f7      	bne.n	8026760 <_dtoa_r+0x6e8>
 8026770:	9900      	ldr	r1, [sp, #0]
 8026772:	2230      	movs	r2, #48	; 0x30
 8026774:	3701      	adds	r7, #1
 8026776:	700a      	strb	r2, [r1, #0]
 8026778:	781a      	ldrb	r2, [r3, #0]
 802677a:	3201      	adds	r2, #1
 802677c:	701a      	strb	r2, [r3, #0]
 802677e:	e790      	b.n	80266a2 <_dtoa_r+0x62a>
 8026780:	4ba3      	ldr	r3, [pc, #652]	; (8026a10 <_dtoa_r+0x998>)
 8026782:	2200      	movs	r2, #0
 8026784:	f7f9 ff40 	bl	8020608 <__aeabi_dmul>
 8026788:	2200      	movs	r2, #0
 802678a:	2300      	movs	r3, #0
 802678c:	4606      	mov	r6, r0
 802678e:	460f      	mov	r7, r1
 8026790:	f7fa f9a2 	bl	8020ad8 <__aeabi_dcmpeq>
 8026794:	2800      	cmp	r0, #0
 8026796:	d09e      	beq.n	80266d6 <_dtoa_r+0x65e>
 8026798:	e7d0      	b.n	802673c <_dtoa_r+0x6c4>
 802679a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802679c:	2a00      	cmp	r2, #0
 802679e:	f000 80ca 	beq.w	8026936 <_dtoa_r+0x8be>
 80267a2:	9a07      	ldr	r2, [sp, #28]
 80267a4:	2a01      	cmp	r2, #1
 80267a6:	f300 80ad 	bgt.w	8026904 <_dtoa_r+0x88c>
 80267aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80267ac:	2a00      	cmp	r2, #0
 80267ae:	f000 80a5 	beq.w	80268fc <_dtoa_r+0x884>
 80267b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80267b6:	9e08      	ldr	r6, [sp, #32]
 80267b8:	9d05      	ldr	r5, [sp, #20]
 80267ba:	9a05      	ldr	r2, [sp, #20]
 80267bc:	441a      	add	r2, r3
 80267be:	9205      	str	r2, [sp, #20]
 80267c0:	9a06      	ldr	r2, [sp, #24]
 80267c2:	2101      	movs	r1, #1
 80267c4:	441a      	add	r2, r3
 80267c6:	4620      	mov	r0, r4
 80267c8:	9206      	str	r2, [sp, #24]
 80267ca:	f000 fc87 	bl	80270dc <__i2b>
 80267ce:	4607      	mov	r7, r0
 80267d0:	b165      	cbz	r5, 80267ec <_dtoa_r+0x774>
 80267d2:	9b06      	ldr	r3, [sp, #24]
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	dd09      	ble.n	80267ec <_dtoa_r+0x774>
 80267d8:	42ab      	cmp	r3, r5
 80267da:	9a05      	ldr	r2, [sp, #20]
 80267dc:	bfa8      	it	ge
 80267de:	462b      	movge	r3, r5
 80267e0:	1ad2      	subs	r2, r2, r3
 80267e2:	9205      	str	r2, [sp, #20]
 80267e4:	9a06      	ldr	r2, [sp, #24]
 80267e6:	1aed      	subs	r5, r5, r3
 80267e8:	1ad3      	subs	r3, r2, r3
 80267ea:	9306      	str	r3, [sp, #24]
 80267ec:	9b08      	ldr	r3, [sp, #32]
 80267ee:	b1f3      	cbz	r3, 802682e <_dtoa_r+0x7b6>
 80267f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	f000 80a3 	beq.w	802693e <_dtoa_r+0x8c6>
 80267f8:	2e00      	cmp	r6, #0
 80267fa:	dd10      	ble.n	802681e <_dtoa_r+0x7a6>
 80267fc:	4639      	mov	r1, r7
 80267fe:	4632      	mov	r2, r6
 8026800:	4620      	mov	r0, r4
 8026802:	f000 fd2b 	bl	802725c <__pow5mult>
 8026806:	4652      	mov	r2, sl
 8026808:	4601      	mov	r1, r0
 802680a:	4607      	mov	r7, r0
 802680c:	4620      	mov	r0, r4
 802680e:	f000 fc7b 	bl	8027108 <__multiply>
 8026812:	4651      	mov	r1, sl
 8026814:	4680      	mov	r8, r0
 8026816:	4620      	mov	r0, r4
 8026818:	f000 fb60 	bl	8026edc <_Bfree>
 802681c:	46c2      	mov	sl, r8
 802681e:	9b08      	ldr	r3, [sp, #32]
 8026820:	1b9a      	subs	r2, r3, r6
 8026822:	d004      	beq.n	802682e <_dtoa_r+0x7b6>
 8026824:	4651      	mov	r1, sl
 8026826:	4620      	mov	r0, r4
 8026828:	f000 fd18 	bl	802725c <__pow5mult>
 802682c:	4682      	mov	sl, r0
 802682e:	2101      	movs	r1, #1
 8026830:	4620      	mov	r0, r4
 8026832:	f000 fc53 	bl	80270dc <__i2b>
 8026836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026838:	2b00      	cmp	r3, #0
 802683a:	4606      	mov	r6, r0
 802683c:	f340 8081 	ble.w	8026942 <_dtoa_r+0x8ca>
 8026840:	461a      	mov	r2, r3
 8026842:	4601      	mov	r1, r0
 8026844:	4620      	mov	r0, r4
 8026846:	f000 fd09 	bl	802725c <__pow5mult>
 802684a:	9b07      	ldr	r3, [sp, #28]
 802684c:	2b01      	cmp	r3, #1
 802684e:	4606      	mov	r6, r0
 8026850:	dd7a      	ble.n	8026948 <_dtoa_r+0x8d0>
 8026852:	f04f 0800 	mov.w	r8, #0
 8026856:	6933      	ldr	r3, [r6, #16]
 8026858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802685c:	6918      	ldr	r0, [r3, #16]
 802685e:	f000 fbef 	bl	8027040 <__hi0bits>
 8026862:	f1c0 0020 	rsb	r0, r0, #32
 8026866:	9b06      	ldr	r3, [sp, #24]
 8026868:	4418      	add	r0, r3
 802686a:	f010 001f 	ands.w	r0, r0, #31
 802686e:	f000 8094 	beq.w	802699a <_dtoa_r+0x922>
 8026872:	f1c0 0320 	rsb	r3, r0, #32
 8026876:	2b04      	cmp	r3, #4
 8026878:	f340 8085 	ble.w	8026986 <_dtoa_r+0x90e>
 802687c:	9b05      	ldr	r3, [sp, #20]
 802687e:	f1c0 001c 	rsb	r0, r0, #28
 8026882:	4403      	add	r3, r0
 8026884:	9305      	str	r3, [sp, #20]
 8026886:	9b06      	ldr	r3, [sp, #24]
 8026888:	4403      	add	r3, r0
 802688a:	4405      	add	r5, r0
 802688c:	9306      	str	r3, [sp, #24]
 802688e:	9b05      	ldr	r3, [sp, #20]
 8026890:	2b00      	cmp	r3, #0
 8026892:	dd05      	ble.n	80268a0 <_dtoa_r+0x828>
 8026894:	4651      	mov	r1, sl
 8026896:	461a      	mov	r2, r3
 8026898:	4620      	mov	r0, r4
 802689a:	f000 fd39 	bl	8027310 <__lshift>
 802689e:	4682      	mov	sl, r0
 80268a0:	9b06      	ldr	r3, [sp, #24]
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	dd05      	ble.n	80268b2 <_dtoa_r+0x83a>
 80268a6:	4631      	mov	r1, r6
 80268a8:	461a      	mov	r2, r3
 80268aa:	4620      	mov	r0, r4
 80268ac:	f000 fd30 	bl	8027310 <__lshift>
 80268b0:	4606      	mov	r6, r0
 80268b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80268b4:	2b00      	cmp	r3, #0
 80268b6:	d072      	beq.n	802699e <_dtoa_r+0x926>
 80268b8:	4631      	mov	r1, r6
 80268ba:	4650      	mov	r0, sl
 80268bc:	f000 fd94 	bl	80273e8 <__mcmp>
 80268c0:	2800      	cmp	r0, #0
 80268c2:	da6c      	bge.n	802699e <_dtoa_r+0x926>
 80268c4:	2300      	movs	r3, #0
 80268c6:	4651      	mov	r1, sl
 80268c8:	220a      	movs	r2, #10
 80268ca:	4620      	mov	r0, r4
 80268cc:	f000 fb28 	bl	8026f20 <__multadd>
 80268d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80268d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268d6:	4682      	mov	sl, r0
 80268d8:	2b00      	cmp	r3, #0
 80268da:	f000 81b0 	beq.w	8026c3e <_dtoa_r+0xbc6>
 80268de:	2300      	movs	r3, #0
 80268e0:	4639      	mov	r1, r7
 80268e2:	220a      	movs	r2, #10
 80268e4:	4620      	mov	r0, r4
 80268e6:	f000 fb1b 	bl	8026f20 <__multadd>
 80268ea:	9b01      	ldr	r3, [sp, #4]
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	4607      	mov	r7, r0
 80268f0:	f300 8096 	bgt.w	8026a20 <_dtoa_r+0x9a8>
 80268f4:	9b07      	ldr	r3, [sp, #28]
 80268f6:	2b02      	cmp	r3, #2
 80268f8:	dc59      	bgt.n	80269ae <_dtoa_r+0x936>
 80268fa:	e091      	b.n	8026a20 <_dtoa_r+0x9a8>
 80268fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80268fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8026902:	e758      	b.n	80267b6 <_dtoa_r+0x73e>
 8026904:	9b04      	ldr	r3, [sp, #16]
 8026906:	1e5e      	subs	r6, r3, #1
 8026908:	9b08      	ldr	r3, [sp, #32]
 802690a:	42b3      	cmp	r3, r6
 802690c:	bfbf      	itttt	lt
 802690e:	9b08      	ldrlt	r3, [sp, #32]
 8026910:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8026912:	9608      	strlt	r6, [sp, #32]
 8026914:	1af3      	sublt	r3, r6, r3
 8026916:	bfb4      	ite	lt
 8026918:	18d2      	addlt	r2, r2, r3
 802691a:	1b9e      	subge	r6, r3, r6
 802691c:	9b04      	ldr	r3, [sp, #16]
 802691e:	bfbc      	itt	lt
 8026920:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8026922:	2600      	movlt	r6, #0
 8026924:	2b00      	cmp	r3, #0
 8026926:	bfb7      	itett	lt
 8026928:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802692c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8026930:	1a9d      	sublt	r5, r3, r2
 8026932:	2300      	movlt	r3, #0
 8026934:	e741      	b.n	80267ba <_dtoa_r+0x742>
 8026936:	9e08      	ldr	r6, [sp, #32]
 8026938:	9d05      	ldr	r5, [sp, #20]
 802693a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802693c:	e748      	b.n	80267d0 <_dtoa_r+0x758>
 802693e:	9a08      	ldr	r2, [sp, #32]
 8026940:	e770      	b.n	8026824 <_dtoa_r+0x7ac>
 8026942:	9b07      	ldr	r3, [sp, #28]
 8026944:	2b01      	cmp	r3, #1
 8026946:	dc19      	bgt.n	802697c <_dtoa_r+0x904>
 8026948:	9b02      	ldr	r3, [sp, #8]
 802694a:	b9bb      	cbnz	r3, 802697c <_dtoa_r+0x904>
 802694c:	9b03      	ldr	r3, [sp, #12]
 802694e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026952:	b99b      	cbnz	r3, 802697c <_dtoa_r+0x904>
 8026954:	9b03      	ldr	r3, [sp, #12]
 8026956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802695a:	0d1b      	lsrs	r3, r3, #20
 802695c:	051b      	lsls	r3, r3, #20
 802695e:	b183      	cbz	r3, 8026982 <_dtoa_r+0x90a>
 8026960:	9b05      	ldr	r3, [sp, #20]
 8026962:	3301      	adds	r3, #1
 8026964:	9305      	str	r3, [sp, #20]
 8026966:	9b06      	ldr	r3, [sp, #24]
 8026968:	3301      	adds	r3, #1
 802696a:	9306      	str	r3, [sp, #24]
 802696c:	f04f 0801 	mov.w	r8, #1
 8026970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026972:	2b00      	cmp	r3, #0
 8026974:	f47f af6f 	bne.w	8026856 <_dtoa_r+0x7de>
 8026978:	2001      	movs	r0, #1
 802697a:	e774      	b.n	8026866 <_dtoa_r+0x7ee>
 802697c:	f04f 0800 	mov.w	r8, #0
 8026980:	e7f6      	b.n	8026970 <_dtoa_r+0x8f8>
 8026982:	4698      	mov	r8, r3
 8026984:	e7f4      	b.n	8026970 <_dtoa_r+0x8f8>
 8026986:	d082      	beq.n	802688e <_dtoa_r+0x816>
 8026988:	9a05      	ldr	r2, [sp, #20]
 802698a:	331c      	adds	r3, #28
 802698c:	441a      	add	r2, r3
 802698e:	9205      	str	r2, [sp, #20]
 8026990:	9a06      	ldr	r2, [sp, #24]
 8026992:	441a      	add	r2, r3
 8026994:	441d      	add	r5, r3
 8026996:	9206      	str	r2, [sp, #24]
 8026998:	e779      	b.n	802688e <_dtoa_r+0x816>
 802699a:	4603      	mov	r3, r0
 802699c:	e7f4      	b.n	8026988 <_dtoa_r+0x910>
 802699e:	9b04      	ldr	r3, [sp, #16]
 80269a0:	2b00      	cmp	r3, #0
 80269a2:	dc37      	bgt.n	8026a14 <_dtoa_r+0x99c>
 80269a4:	9b07      	ldr	r3, [sp, #28]
 80269a6:	2b02      	cmp	r3, #2
 80269a8:	dd34      	ble.n	8026a14 <_dtoa_r+0x99c>
 80269aa:	9b04      	ldr	r3, [sp, #16]
 80269ac:	9301      	str	r3, [sp, #4]
 80269ae:	9b01      	ldr	r3, [sp, #4]
 80269b0:	b963      	cbnz	r3, 80269cc <_dtoa_r+0x954>
 80269b2:	4631      	mov	r1, r6
 80269b4:	2205      	movs	r2, #5
 80269b6:	4620      	mov	r0, r4
 80269b8:	f000 fab2 	bl	8026f20 <__multadd>
 80269bc:	4601      	mov	r1, r0
 80269be:	4606      	mov	r6, r0
 80269c0:	4650      	mov	r0, sl
 80269c2:	f000 fd11 	bl	80273e8 <__mcmp>
 80269c6:	2800      	cmp	r0, #0
 80269c8:	f73f adbb 	bgt.w	8026542 <_dtoa_r+0x4ca>
 80269cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80269ce:	9d00      	ldr	r5, [sp, #0]
 80269d0:	ea6f 0b03 	mvn.w	fp, r3
 80269d4:	f04f 0800 	mov.w	r8, #0
 80269d8:	4631      	mov	r1, r6
 80269da:	4620      	mov	r0, r4
 80269dc:	f000 fa7e 	bl	8026edc <_Bfree>
 80269e0:	2f00      	cmp	r7, #0
 80269e2:	f43f aeab 	beq.w	802673c <_dtoa_r+0x6c4>
 80269e6:	f1b8 0f00 	cmp.w	r8, #0
 80269ea:	d005      	beq.n	80269f8 <_dtoa_r+0x980>
 80269ec:	45b8      	cmp	r8, r7
 80269ee:	d003      	beq.n	80269f8 <_dtoa_r+0x980>
 80269f0:	4641      	mov	r1, r8
 80269f2:	4620      	mov	r0, r4
 80269f4:	f000 fa72 	bl	8026edc <_Bfree>
 80269f8:	4639      	mov	r1, r7
 80269fa:	4620      	mov	r0, r4
 80269fc:	f000 fa6e 	bl	8026edc <_Bfree>
 8026a00:	e69c      	b.n	802673c <_dtoa_r+0x6c4>
 8026a02:	2600      	movs	r6, #0
 8026a04:	4637      	mov	r7, r6
 8026a06:	e7e1      	b.n	80269cc <_dtoa_r+0x954>
 8026a08:	46bb      	mov	fp, r7
 8026a0a:	4637      	mov	r7, r6
 8026a0c:	e599      	b.n	8026542 <_dtoa_r+0x4ca>
 8026a0e:	bf00      	nop
 8026a10:	40240000 	.word	0x40240000
 8026a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a16:	2b00      	cmp	r3, #0
 8026a18:	f000 80c8 	beq.w	8026bac <_dtoa_r+0xb34>
 8026a1c:	9b04      	ldr	r3, [sp, #16]
 8026a1e:	9301      	str	r3, [sp, #4]
 8026a20:	2d00      	cmp	r5, #0
 8026a22:	dd05      	ble.n	8026a30 <_dtoa_r+0x9b8>
 8026a24:	4639      	mov	r1, r7
 8026a26:	462a      	mov	r2, r5
 8026a28:	4620      	mov	r0, r4
 8026a2a:	f000 fc71 	bl	8027310 <__lshift>
 8026a2e:	4607      	mov	r7, r0
 8026a30:	f1b8 0f00 	cmp.w	r8, #0
 8026a34:	d05b      	beq.n	8026aee <_dtoa_r+0xa76>
 8026a36:	6879      	ldr	r1, [r7, #4]
 8026a38:	4620      	mov	r0, r4
 8026a3a:	f000 fa0f 	bl	8026e5c <_Balloc>
 8026a3e:	4605      	mov	r5, r0
 8026a40:	b928      	cbnz	r0, 8026a4e <_dtoa_r+0x9d6>
 8026a42:	4b83      	ldr	r3, [pc, #524]	; (8026c50 <_dtoa_r+0xbd8>)
 8026a44:	4602      	mov	r2, r0
 8026a46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8026a4a:	f7ff bb2e 	b.w	80260aa <_dtoa_r+0x32>
 8026a4e:	693a      	ldr	r2, [r7, #16]
 8026a50:	3202      	adds	r2, #2
 8026a52:	0092      	lsls	r2, r2, #2
 8026a54:	f107 010c 	add.w	r1, r7, #12
 8026a58:	300c      	adds	r0, #12
 8026a5a:	f002 fb19 	bl	8029090 <memcpy>
 8026a5e:	2201      	movs	r2, #1
 8026a60:	4629      	mov	r1, r5
 8026a62:	4620      	mov	r0, r4
 8026a64:	f000 fc54 	bl	8027310 <__lshift>
 8026a68:	9b00      	ldr	r3, [sp, #0]
 8026a6a:	3301      	adds	r3, #1
 8026a6c:	9304      	str	r3, [sp, #16]
 8026a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026a72:	4413      	add	r3, r2
 8026a74:	9308      	str	r3, [sp, #32]
 8026a76:	9b02      	ldr	r3, [sp, #8]
 8026a78:	f003 0301 	and.w	r3, r3, #1
 8026a7c:	46b8      	mov	r8, r7
 8026a7e:	9306      	str	r3, [sp, #24]
 8026a80:	4607      	mov	r7, r0
 8026a82:	9b04      	ldr	r3, [sp, #16]
 8026a84:	4631      	mov	r1, r6
 8026a86:	3b01      	subs	r3, #1
 8026a88:	4650      	mov	r0, sl
 8026a8a:	9301      	str	r3, [sp, #4]
 8026a8c:	f7ff fa6c 	bl	8025f68 <quorem>
 8026a90:	4641      	mov	r1, r8
 8026a92:	9002      	str	r0, [sp, #8]
 8026a94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8026a98:	4650      	mov	r0, sl
 8026a9a:	f000 fca5 	bl	80273e8 <__mcmp>
 8026a9e:	463a      	mov	r2, r7
 8026aa0:	9005      	str	r0, [sp, #20]
 8026aa2:	4631      	mov	r1, r6
 8026aa4:	4620      	mov	r0, r4
 8026aa6:	f000 fcbb 	bl	8027420 <__mdiff>
 8026aaa:	68c2      	ldr	r2, [r0, #12]
 8026aac:	4605      	mov	r5, r0
 8026aae:	bb02      	cbnz	r2, 8026af2 <_dtoa_r+0xa7a>
 8026ab0:	4601      	mov	r1, r0
 8026ab2:	4650      	mov	r0, sl
 8026ab4:	f000 fc98 	bl	80273e8 <__mcmp>
 8026ab8:	4602      	mov	r2, r0
 8026aba:	4629      	mov	r1, r5
 8026abc:	4620      	mov	r0, r4
 8026abe:	9209      	str	r2, [sp, #36]	; 0x24
 8026ac0:	f000 fa0c 	bl	8026edc <_Bfree>
 8026ac4:	9b07      	ldr	r3, [sp, #28]
 8026ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026ac8:	9d04      	ldr	r5, [sp, #16]
 8026aca:	ea43 0102 	orr.w	r1, r3, r2
 8026ace:	9b06      	ldr	r3, [sp, #24]
 8026ad0:	4319      	orrs	r1, r3
 8026ad2:	d110      	bne.n	8026af6 <_dtoa_r+0xa7e>
 8026ad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026ad8:	d029      	beq.n	8026b2e <_dtoa_r+0xab6>
 8026ada:	9b05      	ldr	r3, [sp, #20]
 8026adc:	2b00      	cmp	r3, #0
 8026ade:	dd02      	ble.n	8026ae6 <_dtoa_r+0xa6e>
 8026ae0:	9b02      	ldr	r3, [sp, #8]
 8026ae2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8026ae6:	9b01      	ldr	r3, [sp, #4]
 8026ae8:	f883 9000 	strb.w	r9, [r3]
 8026aec:	e774      	b.n	80269d8 <_dtoa_r+0x960>
 8026aee:	4638      	mov	r0, r7
 8026af0:	e7ba      	b.n	8026a68 <_dtoa_r+0x9f0>
 8026af2:	2201      	movs	r2, #1
 8026af4:	e7e1      	b.n	8026aba <_dtoa_r+0xa42>
 8026af6:	9b05      	ldr	r3, [sp, #20]
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	db04      	blt.n	8026b06 <_dtoa_r+0xa8e>
 8026afc:	9907      	ldr	r1, [sp, #28]
 8026afe:	430b      	orrs	r3, r1
 8026b00:	9906      	ldr	r1, [sp, #24]
 8026b02:	430b      	orrs	r3, r1
 8026b04:	d120      	bne.n	8026b48 <_dtoa_r+0xad0>
 8026b06:	2a00      	cmp	r2, #0
 8026b08:	dded      	ble.n	8026ae6 <_dtoa_r+0xa6e>
 8026b0a:	4651      	mov	r1, sl
 8026b0c:	2201      	movs	r2, #1
 8026b0e:	4620      	mov	r0, r4
 8026b10:	f000 fbfe 	bl	8027310 <__lshift>
 8026b14:	4631      	mov	r1, r6
 8026b16:	4682      	mov	sl, r0
 8026b18:	f000 fc66 	bl	80273e8 <__mcmp>
 8026b1c:	2800      	cmp	r0, #0
 8026b1e:	dc03      	bgt.n	8026b28 <_dtoa_r+0xab0>
 8026b20:	d1e1      	bne.n	8026ae6 <_dtoa_r+0xa6e>
 8026b22:	f019 0f01 	tst.w	r9, #1
 8026b26:	d0de      	beq.n	8026ae6 <_dtoa_r+0xa6e>
 8026b28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026b2c:	d1d8      	bne.n	8026ae0 <_dtoa_r+0xa68>
 8026b2e:	9a01      	ldr	r2, [sp, #4]
 8026b30:	2339      	movs	r3, #57	; 0x39
 8026b32:	7013      	strb	r3, [r2, #0]
 8026b34:	462b      	mov	r3, r5
 8026b36:	461d      	mov	r5, r3
 8026b38:	3b01      	subs	r3, #1
 8026b3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026b3e:	2a39      	cmp	r2, #57	; 0x39
 8026b40:	d06c      	beq.n	8026c1c <_dtoa_r+0xba4>
 8026b42:	3201      	adds	r2, #1
 8026b44:	701a      	strb	r2, [r3, #0]
 8026b46:	e747      	b.n	80269d8 <_dtoa_r+0x960>
 8026b48:	2a00      	cmp	r2, #0
 8026b4a:	dd07      	ble.n	8026b5c <_dtoa_r+0xae4>
 8026b4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026b50:	d0ed      	beq.n	8026b2e <_dtoa_r+0xab6>
 8026b52:	9a01      	ldr	r2, [sp, #4]
 8026b54:	f109 0301 	add.w	r3, r9, #1
 8026b58:	7013      	strb	r3, [r2, #0]
 8026b5a:	e73d      	b.n	80269d8 <_dtoa_r+0x960>
 8026b5c:	9b04      	ldr	r3, [sp, #16]
 8026b5e:	9a08      	ldr	r2, [sp, #32]
 8026b60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8026b64:	4293      	cmp	r3, r2
 8026b66:	d043      	beq.n	8026bf0 <_dtoa_r+0xb78>
 8026b68:	4651      	mov	r1, sl
 8026b6a:	2300      	movs	r3, #0
 8026b6c:	220a      	movs	r2, #10
 8026b6e:	4620      	mov	r0, r4
 8026b70:	f000 f9d6 	bl	8026f20 <__multadd>
 8026b74:	45b8      	cmp	r8, r7
 8026b76:	4682      	mov	sl, r0
 8026b78:	f04f 0300 	mov.w	r3, #0
 8026b7c:	f04f 020a 	mov.w	r2, #10
 8026b80:	4641      	mov	r1, r8
 8026b82:	4620      	mov	r0, r4
 8026b84:	d107      	bne.n	8026b96 <_dtoa_r+0xb1e>
 8026b86:	f000 f9cb 	bl	8026f20 <__multadd>
 8026b8a:	4680      	mov	r8, r0
 8026b8c:	4607      	mov	r7, r0
 8026b8e:	9b04      	ldr	r3, [sp, #16]
 8026b90:	3301      	adds	r3, #1
 8026b92:	9304      	str	r3, [sp, #16]
 8026b94:	e775      	b.n	8026a82 <_dtoa_r+0xa0a>
 8026b96:	f000 f9c3 	bl	8026f20 <__multadd>
 8026b9a:	4639      	mov	r1, r7
 8026b9c:	4680      	mov	r8, r0
 8026b9e:	2300      	movs	r3, #0
 8026ba0:	220a      	movs	r2, #10
 8026ba2:	4620      	mov	r0, r4
 8026ba4:	f000 f9bc 	bl	8026f20 <__multadd>
 8026ba8:	4607      	mov	r7, r0
 8026baa:	e7f0      	b.n	8026b8e <_dtoa_r+0xb16>
 8026bac:	9b04      	ldr	r3, [sp, #16]
 8026bae:	9301      	str	r3, [sp, #4]
 8026bb0:	9d00      	ldr	r5, [sp, #0]
 8026bb2:	4631      	mov	r1, r6
 8026bb4:	4650      	mov	r0, sl
 8026bb6:	f7ff f9d7 	bl	8025f68 <quorem>
 8026bba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8026bbe:	9b00      	ldr	r3, [sp, #0]
 8026bc0:	f805 9b01 	strb.w	r9, [r5], #1
 8026bc4:	1aea      	subs	r2, r5, r3
 8026bc6:	9b01      	ldr	r3, [sp, #4]
 8026bc8:	4293      	cmp	r3, r2
 8026bca:	dd07      	ble.n	8026bdc <_dtoa_r+0xb64>
 8026bcc:	4651      	mov	r1, sl
 8026bce:	2300      	movs	r3, #0
 8026bd0:	220a      	movs	r2, #10
 8026bd2:	4620      	mov	r0, r4
 8026bd4:	f000 f9a4 	bl	8026f20 <__multadd>
 8026bd8:	4682      	mov	sl, r0
 8026bda:	e7ea      	b.n	8026bb2 <_dtoa_r+0xb3a>
 8026bdc:	9b01      	ldr	r3, [sp, #4]
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	bfc8      	it	gt
 8026be2:	461d      	movgt	r5, r3
 8026be4:	9b00      	ldr	r3, [sp, #0]
 8026be6:	bfd8      	it	le
 8026be8:	2501      	movle	r5, #1
 8026bea:	441d      	add	r5, r3
 8026bec:	f04f 0800 	mov.w	r8, #0
 8026bf0:	4651      	mov	r1, sl
 8026bf2:	2201      	movs	r2, #1
 8026bf4:	4620      	mov	r0, r4
 8026bf6:	f000 fb8b 	bl	8027310 <__lshift>
 8026bfa:	4631      	mov	r1, r6
 8026bfc:	4682      	mov	sl, r0
 8026bfe:	f000 fbf3 	bl	80273e8 <__mcmp>
 8026c02:	2800      	cmp	r0, #0
 8026c04:	dc96      	bgt.n	8026b34 <_dtoa_r+0xabc>
 8026c06:	d102      	bne.n	8026c0e <_dtoa_r+0xb96>
 8026c08:	f019 0f01 	tst.w	r9, #1
 8026c0c:	d192      	bne.n	8026b34 <_dtoa_r+0xabc>
 8026c0e:	462b      	mov	r3, r5
 8026c10:	461d      	mov	r5, r3
 8026c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026c16:	2a30      	cmp	r2, #48	; 0x30
 8026c18:	d0fa      	beq.n	8026c10 <_dtoa_r+0xb98>
 8026c1a:	e6dd      	b.n	80269d8 <_dtoa_r+0x960>
 8026c1c:	9a00      	ldr	r2, [sp, #0]
 8026c1e:	429a      	cmp	r2, r3
 8026c20:	d189      	bne.n	8026b36 <_dtoa_r+0xabe>
 8026c22:	f10b 0b01 	add.w	fp, fp, #1
 8026c26:	2331      	movs	r3, #49	; 0x31
 8026c28:	e796      	b.n	8026b58 <_dtoa_r+0xae0>
 8026c2a:	4b0a      	ldr	r3, [pc, #40]	; (8026c54 <_dtoa_r+0xbdc>)
 8026c2c:	f7ff ba99 	b.w	8026162 <_dtoa_r+0xea>
 8026c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	f47f aa6d 	bne.w	8026112 <_dtoa_r+0x9a>
 8026c38:	4b07      	ldr	r3, [pc, #28]	; (8026c58 <_dtoa_r+0xbe0>)
 8026c3a:	f7ff ba92 	b.w	8026162 <_dtoa_r+0xea>
 8026c3e:	9b01      	ldr	r3, [sp, #4]
 8026c40:	2b00      	cmp	r3, #0
 8026c42:	dcb5      	bgt.n	8026bb0 <_dtoa_r+0xb38>
 8026c44:	9b07      	ldr	r3, [sp, #28]
 8026c46:	2b02      	cmp	r3, #2
 8026c48:	f73f aeb1 	bgt.w	80269ae <_dtoa_r+0x936>
 8026c4c:	e7b0      	b.n	8026bb0 <_dtoa_r+0xb38>
 8026c4e:	bf00      	nop
 8026c50:	0802a007 	.word	0x0802a007
 8026c54:	0802a2f0 	.word	0x0802a2f0
 8026c58:	08029f8b 	.word	0x08029f8b

08026c5c <_free_r>:
 8026c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026c5e:	2900      	cmp	r1, #0
 8026c60:	d044      	beq.n	8026cec <_free_r+0x90>
 8026c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026c66:	9001      	str	r0, [sp, #4]
 8026c68:	2b00      	cmp	r3, #0
 8026c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8026c6e:	bfb8      	it	lt
 8026c70:	18e4      	addlt	r4, r4, r3
 8026c72:	f000 f8e7 	bl	8026e44 <__malloc_lock>
 8026c76:	4a1e      	ldr	r2, [pc, #120]	; (8026cf0 <_free_r+0x94>)
 8026c78:	9801      	ldr	r0, [sp, #4]
 8026c7a:	6813      	ldr	r3, [r2, #0]
 8026c7c:	b933      	cbnz	r3, 8026c8c <_free_r+0x30>
 8026c7e:	6063      	str	r3, [r4, #4]
 8026c80:	6014      	str	r4, [r2, #0]
 8026c82:	b003      	add	sp, #12
 8026c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026c88:	f000 b8e2 	b.w	8026e50 <__malloc_unlock>
 8026c8c:	42a3      	cmp	r3, r4
 8026c8e:	d908      	bls.n	8026ca2 <_free_r+0x46>
 8026c90:	6825      	ldr	r5, [r4, #0]
 8026c92:	1961      	adds	r1, r4, r5
 8026c94:	428b      	cmp	r3, r1
 8026c96:	bf01      	itttt	eq
 8026c98:	6819      	ldreq	r1, [r3, #0]
 8026c9a:	685b      	ldreq	r3, [r3, #4]
 8026c9c:	1949      	addeq	r1, r1, r5
 8026c9e:	6021      	streq	r1, [r4, #0]
 8026ca0:	e7ed      	b.n	8026c7e <_free_r+0x22>
 8026ca2:	461a      	mov	r2, r3
 8026ca4:	685b      	ldr	r3, [r3, #4]
 8026ca6:	b10b      	cbz	r3, 8026cac <_free_r+0x50>
 8026ca8:	42a3      	cmp	r3, r4
 8026caa:	d9fa      	bls.n	8026ca2 <_free_r+0x46>
 8026cac:	6811      	ldr	r1, [r2, #0]
 8026cae:	1855      	adds	r5, r2, r1
 8026cb0:	42a5      	cmp	r5, r4
 8026cb2:	d10b      	bne.n	8026ccc <_free_r+0x70>
 8026cb4:	6824      	ldr	r4, [r4, #0]
 8026cb6:	4421      	add	r1, r4
 8026cb8:	1854      	adds	r4, r2, r1
 8026cba:	42a3      	cmp	r3, r4
 8026cbc:	6011      	str	r1, [r2, #0]
 8026cbe:	d1e0      	bne.n	8026c82 <_free_r+0x26>
 8026cc0:	681c      	ldr	r4, [r3, #0]
 8026cc2:	685b      	ldr	r3, [r3, #4]
 8026cc4:	6053      	str	r3, [r2, #4]
 8026cc6:	440c      	add	r4, r1
 8026cc8:	6014      	str	r4, [r2, #0]
 8026cca:	e7da      	b.n	8026c82 <_free_r+0x26>
 8026ccc:	d902      	bls.n	8026cd4 <_free_r+0x78>
 8026cce:	230c      	movs	r3, #12
 8026cd0:	6003      	str	r3, [r0, #0]
 8026cd2:	e7d6      	b.n	8026c82 <_free_r+0x26>
 8026cd4:	6825      	ldr	r5, [r4, #0]
 8026cd6:	1961      	adds	r1, r4, r5
 8026cd8:	428b      	cmp	r3, r1
 8026cda:	bf04      	itt	eq
 8026cdc:	6819      	ldreq	r1, [r3, #0]
 8026cde:	685b      	ldreq	r3, [r3, #4]
 8026ce0:	6063      	str	r3, [r4, #4]
 8026ce2:	bf04      	itt	eq
 8026ce4:	1949      	addeq	r1, r1, r5
 8026ce6:	6021      	streq	r1, [r4, #0]
 8026ce8:	6054      	str	r4, [r2, #4]
 8026cea:	e7ca      	b.n	8026c82 <_free_r+0x26>
 8026cec:	b003      	add	sp, #12
 8026cee:	bd30      	pop	{r4, r5, pc}
 8026cf0:	2000045c 	.word	0x2000045c

08026cf4 <malloc>:
 8026cf4:	4b02      	ldr	r3, [pc, #8]	; (8026d00 <malloc+0xc>)
 8026cf6:	4601      	mov	r1, r0
 8026cf8:	6818      	ldr	r0, [r3, #0]
 8026cfa:	f000 b823 	b.w	8026d44 <_malloc_r>
 8026cfe:	bf00      	nop
 8026d00:	20000064 	.word	0x20000064

08026d04 <sbrk_aligned>:
 8026d04:	b570      	push	{r4, r5, r6, lr}
 8026d06:	4e0e      	ldr	r6, [pc, #56]	; (8026d40 <sbrk_aligned+0x3c>)
 8026d08:	460c      	mov	r4, r1
 8026d0a:	6831      	ldr	r1, [r6, #0]
 8026d0c:	4605      	mov	r5, r0
 8026d0e:	b911      	cbnz	r1, 8026d16 <sbrk_aligned+0x12>
 8026d10:	f002 f9ae 	bl	8029070 <_sbrk_r>
 8026d14:	6030      	str	r0, [r6, #0]
 8026d16:	4621      	mov	r1, r4
 8026d18:	4628      	mov	r0, r5
 8026d1a:	f002 f9a9 	bl	8029070 <_sbrk_r>
 8026d1e:	1c43      	adds	r3, r0, #1
 8026d20:	d00a      	beq.n	8026d38 <sbrk_aligned+0x34>
 8026d22:	1cc4      	adds	r4, r0, #3
 8026d24:	f024 0403 	bic.w	r4, r4, #3
 8026d28:	42a0      	cmp	r0, r4
 8026d2a:	d007      	beq.n	8026d3c <sbrk_aligned+0x38>
 8026d2c:	1a21      	subs	r1, r4, r0
 8026d2e:	4628      	mov	r0, r5
 8026d30:	f002 f99e 	bl	8029070 <_sbrk_r>
 8026d34:	3001      	adds	r0, #1
 8026d36:	d101      	bne.n	8026d3c <sbrk_aligned+0x38>
 8026d38:	f04f 34ff 	mov.w	r4, #4294967295
 8026d3c:	4620      	mov	r0, r4
 8026d3e:	bd70      	pop	{r4, r5, r6, pc}
 8026d40:	20000460 	.word	0x20000460

08026d44 <_malloc_r>:
 8026d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026d48:	1ccd      	adds	r5, r1, #3
 8026d4a:	f025 0503 	bic.w	r5, r5, #3
 8026d4e:	3508      	adds	r5, #8
 8026d50:	2d0c      	cmp	r5, #12
 8026d52:	bf38      	it	cc
 8026d54:	250c      	movcc	r5, #12
 8026d56:	2d00      	cmp	r5, #0
 8026d58:	4607      	mov	r7, r0
 8026d5a:	db01      	blt.n	8026d60 <_malloc_r+0x1c>
 8026d5c:	42a9      	cmp	r1, r5
 8026d5e:	d905      	bls.n	8026d6c <_malloc_r+0x28>
 8026d60:	230c      	movs	r3, #12
 8026d62:	603b      	str	r3, [r7, #0]
 8026d64:	2600      	movs	r6, #0
 8026d66:	4630      	mov	r0, r6
 8026d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026e40 <_malloc_r+0xfc>
 8026d70:	f000 f868 	bl	8026e44 <__malloc_lock>
 8026d74:	f8d8 3000 	ldr.w	r3, [r8]
 8026d78:	461c      	mov	r4, r3
 8026d7a:	bb5c      	cbnz	r4, 8026dd4 <_malloc_r+0x90>
 8026d7c:	4629      	mov	r1, r5
 8026d7e:	4638      	mov	r0, r7
 8026d80:	f7ff ffc0 	bl	8026d04 <sbrk_aligned>
 8026d84:	1c43      	adds	r3, r0, #1
 8026d86:	4604      	mov	r4, r0
 8026d88:	d155      	bne.n	8026e36 <_malloc_r+0xf2>
 8026d8a:	f8d8 4000 	ldr.w	r4, [r8]
 8026d8e:	4626      	mov	r6, r4
 8026d90:	2e00      	cmp	r6, #0
 8026d92:	d145      	bne.n	8026e20 <_malloc_r+0xdc>
 8026d94:	2c00      	cmp	r4, #0
 8026d96:	d048      	beq.n	8026e2a <_malloc_r+0xe6>
 8026d98:	6823      	ldr	r3, [r4, #0]
 8026d9a:	4631      	mov	r1, r6
 8026d9c:	4638      	mov	r0, r7
 8026d9e:	eb04 0903 	add.w	r9, r4, r3
 8026da2:	f002 f965 	bl	8029070 <_sbrk_r>
 8026da6:	4581      	cmp	r9, r0
 8026da8:	d13f      	bne.n	8026e2a <_malloc_r+0xe6>
 8026daa:	6821      	ldr	r1, [r4, #0]
 8026dac:	1a6d      	subs	r5, r5, r1
 8026dae:	4629      	mov	r1, r5
 8026db0:	4638      	mov	r0, r7
 8026db2:	f7ff ffa7 	bl	8026d04 <sbrk_aligned>
 8026db6:	3001      	adds	r0, #1
 8026db8:	d037      	beq.n	8026e2a <_malloc_r+0xe6>
 8026dba:	6823      	ldr	r3, [r4, #0]
 8026dbc:	442b      	add	r3, r5
 8026dbe:	6023      	str	r3, [r4, #0]
 8026dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8026dc4:	2b00      	cmp	r3, #0
 8026dc6:	d038      	beq.n	8026e3a <_malloc_r+0xf6>
 8026dc8:	685a      	ldr	r2, [r3, #4]
 8026dca:	42a2      	cmp	r2, r4
 8026dcc:	d12b      	bne.n	8026e26 <_malloc_r+0xe2>
 8026dce:	2200      	movs	r2, #0
 8026dd0:	605a      	str	r2, [r3, #4]
 8026dd2:	e00f      	b.n	8026df4 <_malloc_r+0xb0>
 8026dd4:	6822      	ldr	r2, [r4, #0]
 8026dd6:	1b52      	subs	r2, r2, r5
 8026dd8:	d41f      	bmi.n	8026e1a <_malloc_r+0xd6>
 8026dda:	2a0b      	cmp	r2, #11
 8026ddc:	d917      	bls.n	8026e0e <_malloc_r+0xca>
 8026dde:	1961      	adds	r1, r4, r5
 8026de0:	42a3      	cmp	r3, r4
 8026de2:	6025      	str	r5, [r4, #0]
 8026de4:	bf18      	it	ne
 8026de6:	6059      	strne	r1, [r3, #4]
 8026de8:	6863      	ldr	r3, [r4, #4]
 8026dea:	bf08      	it	eq
 8026dec:	f8c8 1000 	streq.w	r1, [r8]
 8026df0:	5162      	str	r2, [r4, r5]
 8026df2:	604b      	str	r3, [r1, #4]
 8026df4:	4638      	mov	r0, r7
 8026df6:	f104 060b 	add.w	r6, r4, #11
 8026dfa:	f000 f829 	bl	8026e50 <__malloc_unlock>
 8026dfe:	f026 0607 	bic.w	r6, r6, #7
 8026e02:	1d23      	adds	r3, r4, #4
 8026e04:	1af2      	subs	r2, r6, r3
 8026e06:	d0ae      	beq.n	8026d66 <_malloc_r+0x22>
 8026e08:	1b9b      	subs	r3, r3, r6
 8026e0a:	50a3      	str	r3, [r4, r2]
 8026e0c:	e7ab      	b.n	8026d66 <_malloc_r+0x22>
 8026e0e:	42a3      	cmp	r3, r4
 8026e10:	6862      	ldr	r2, [r4, #4]
 8026e12:	d1dd      	bne.n	8026dd0 <_malloc_r+0x8c>
 8026e14:	f8c8 2000 	str.w	r2, [r8]
 8026e18:	e7ec      	b.n	8026df4 <_malloc_r+0xb0>
 8026e1a:	4623      	mov	r3, r4
 8026e1c:	6864      	ldr	r4, [r4, #4]
 8026e1e:	e7ac      	b.n	8026d7a <_malloc_r+0x36>
 8026e20:	4634      	mov	r4, r6
 8026e22:	6876      	ldr	r6, [r6, #4]
 8026e24:	e7b4      	b.n	8026d90 <_malloc_r+0x4c>
 8026e26:	4613      	mov	r3, r2
 8026e28:	e7cc      	b.n	8026dc4 <_malloc_r+0x80>
 8026e2a:	230c      	movs	r3, #12
 8026e2c:	603b      	str	r3, [r7, #0]
 8026e2e:	4638      	mov	r0, r7
 8026e30:	f000 f80e 	bl	8026e50 <__malloc_unlock>
 8026e34:	e797      	b.n	8026d66 <_malloc_r+0x22>
 8026e36:	6025      	str	r5, [r4, #0]
 8026e38:	e7dc      	b.n	8026df4 <_malloc_r+0xb0>
 8026e3a:	605b      	str	r3, [r3, #4]
 8026e3c:	deff      	udf	#255	; 0xff
 8026e3e:	bf00      	nop
 8026e40:	2000045c 	.word	0x2000045c

08026e44 <__malloc_lock>:
 8026e44:	4801      	ldr	r0, [pc, #4]	; (8026e4c <__malloc_lock+0x8>)
 8026e46:	f7ff b886 	b.w	8025f56 <__retarget_lock_acquire_recursive>
 8026e4a:	bf00      	nop
 8026e4c:	20000458 	.word	0x20000458

08026e50 <__malloc_unlock>:
 8026e50:	4801      	ldr	r0, [pc, #4]	; (8026e58 <__malloc_unlock+0x8>)
 8026e52:	f7ff b881 	b.w	8025f58 <__retarget_lock_release_recursive>
 8026e56:	bf00      	nop
 8026e58:	20000458 	.word	0x20000458

08026e5c <_Balloc>:
 8026e5c:	b570      	push	{r4, r5, r6, lr}
 8026e5e:	69c6      	ldr	r6, [r0, #28]
 8026e60:	4604      	mov	r4, r0
 8026e62:	460d      	mov	r5, r1
 8026e64:	b976      	cbnz	r6, 8026e84 <_Balloc+0x28>
 8026e66:	2010      	movs	r0, #16
 8026e68:	f7ff ff44 	bl	8026cf4 <malloc>
 8026e6c:	4602      	mov	r2, r0
 8026e6e:	61e0      	str	r0, [r4, #28]
 8026e70:	b920      	cbnz	r0, 8026e7c <_Balloc+0x20>
 8026e72:	4b18      	ldr	r3, [pc, #96]	; (8026ed4 <_Balloc+0x78>)
 8026e74:	4818      	ldr	r0, [pc, #96]	; (8026ed8 <_Balloc+0x7c>)
 8026e76:	216b      	movs	r1, #107	; 0x6b
 8026e78:	f002 f922 	bl	80290c0 <__assert_func>
 8026e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026e80:	6006      	str	r6, [r0, #0]
 8026e82:	60c6      	str	r6, [r0, #12]
 8026e84:	69e6      	ldr	r6, [r4, #28]
 8026e86:	68f3      	ldr	r3, [r6, #12]
 8026e88:	b183      	cbz	r3, 8026eac <_Balloc+0x50>
 8026e8a:	69e3      	ldr	r3, [r4, #28]
 8026e8c:	68db      	ldr	r3, [r3, #12]
 8026e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026e92:	b9b8      	cbnz	r0, 8026ec4 <_Balloc+0x68>
 8026e94:	2101      	movs	r1, #1
 8026e96:	fa01 f605 	lsl.w	r6, r1, r5
 8026e9a:	1d72      	adds	r2, r6, #5
 8026e9c:	0092      	lsls	r2, r2, #2
 8026e9e:	4620      	mov	r0, r4
 8026ea0:	f002 f92c 	bl	80290fc <_calloc_r>
 8026ea4:	b160      	cbz	r0, 8026ec0 <_Balloc+0x64>
 8026ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026eaa:	e00e      	b.n	8026eca <_Balloc+0x6e>
 8026eac:	2221      	movs	r2, #33	; 0x21
 8026eae:	2104      	movs	r1, #4
 8026eb0:	4620      	mov	r0, r4
 8026eb2:	f002 f923 	bl	80290fc <_calloc_r>
 8026eb6:	69e3      	ldr	r3, [r4, #28]
 8026eb8:	60f0      	str	r0, [r6, #12]
 8026eba:	68db      	ldr	r3, [r3, #12]
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d1e4      	bne.n	8026e8a <_Balloc+0x2e>
 8026ec0:	2000      	movs	r0, #0
 8026ec2:	bd70      	pop	{r4, r5, r6, pc}
 8026ec4:	6802      	ldr	r2, [r0, #0]
 8026ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026eca:	2300      	movs	r3, #0
 8026ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026ed0:	e7f7      	b.n	8026ec2 <_Balloc+0x66>
 8026ed2:	bf00      	nop
 8026ed4:	08029f98 	.word	0x08029f98
 8026ed8:	0802a018 	.word	0x0802a018

08026edc <_Bfree>:
 8026edc:	b570      	push	{r4, r5, r6, lr}
 8026ede:	69c6      	ldr	r6, [r0, #28]
 8026ee0:	4605      	mov	r5, r0
 8026ee2:	460c      	mov	r4, r1
 8026ee4:	b976      	cbnz	r6, 8026f04 <_Bfree+0x28>
 8026ee6:	2010      	movs	r0, #16
 8026ee8:	f7ff ff04 	bl	8026cf4 <malloc>
 8026eec:	4602      	mov	r2, r0
 8026eee:	61e8      	str	r0, [r5, #28]
 8026ef0:	b920      	cbnz	r0, 8026efc <_Bfree+0x20>
 8026ef2:	4b09      	ldr	r3, [pc, #36]	; (8026f18 <_Bfree+0x3c>)
 8026ef4:	4809      	ldr	r0, [pc, #36]	; (8026f1c <_Bfree+0x40>)
 8026ef6:	218f      	movs	r1, #143	; 0x8f
 8026ef8:	f002 f8e2 	bl	80290c0 <__assert_func>
 8026efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026f00:	6006      	str	r6, [r0, #0]
 8026f02:	60c6      	str	r6, [r0, #12]
 8026f04:	b13c      	cbz	r4, 8026f16 <_Bfree+0x3a>
 8026f06:	69eb      	ldr	r3, [r5, #28]
 8026f08:	6862      	ldr	r2, [r4, #4]
 8026f0a:	68db      	ldr	r3, [r3, #12]
 8026f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026f10:	6021      	str	r1, [r4, #0]
 8026f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026f16:	bd70      	pop	{r4, r5, r6, pc}
 8026f18:	08029f98 	.word	0x08029f98
 8026f1c:	0802a018 	.word	0x0802a018

08026f20 <__multadd>:
 8026f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f24:	690d      	ldr	r5, [r1, #16]
 8026f26:	4607      	mov	r7, r0
 8026f28:	460c      	mov	r4, r1
 8026f2a:	461e      	mov	r6, r3
 8026f2c:	f101 0c14 	add.w	ip, r1, #20
 8026f30:	2000      	movs	r0, #0
 8026f32:	f8dc 3000 	ldr.w	r3, [ip]
 8026f36:	b299      	uxth	r1, r3
 8026f38:	fb02 6101 	mla	r1, r2, r1, r6
 8026f3c:	0c1e      	lsrs	r6, r3, #16
 8026f3e:	0c0b      	lsrs	r3, r1, #16
 8026f40:	fb02 3306 	mla	r3, r2, r6, r3
 8026f44:	b289      	uxth	r1, r1
 8026f46:	3001      	adds	r0, #1
 8026f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026f4c:	4285      	cmp	r5, r0
 8026f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8026f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026f56:	dcec      	bgt.n	8026f32 <__multadd+0x12>
 8026f58:	b30e      	cbz	r6, 8026f9e <__multadd+0x7e>
 8026f5a:	68a3      	ldr	r3, [r4, #8]
 8026f5c:	42ab      	cmp	r3, r5
 8026f5e:	dc19      	bgt.n	8026f94 <__multadd+0x74>
 8026f60:	6861      	ldr	r1, [r4, #4]
 8026f62:	4638      	mov	r0, r7
 8026f64:	3101      	adds	r1, #1
 8026f66:	f7ff ff79 	bl	8026e5c <_Balloc>
 8026f6a:	4680      	mov	r8, r0
 8026f6c:	b928      	cbnz	r0, 8026f7a <__multadd+0x5a>
 8026f6e:	4602      	mov	r2, r0
 8026f70:	4b0c      	ldr	r3, [pc, #48]	; (8026fa4 <__multadd+0x84>)
 8026f72:	480d      	ldr	r0, [pc, #52]	; (8026fa8 <__multadd+0x88>)
 8026f74:	21ba      	movs	r1, #186	; 0xba
 8026f76:	f002 f8a3 	bl	80290c0 <__assert_func>
 8026f7a:	6922      	ldr	r2, [r4, #16]
 8026f7c:	3202      	adds	r2, #2
 8026f7e:	f104 010c 	add.w	r1, r4, #12
 8026f82:	0092      	lsls	r2, r2, #2
 8026f84:	300c      	adds	r0, #12
 8026f86:	f002 f883 	bl	8029090 <memcpy>
 8026f8a:	4621      	mov	r1, r4
 8026f8c:	4638      	mov	r0, r7
 8026f8e:	f7ff ffa5 	bl	8026edc <_Bfree>
 8026f92:	4644      	mov	r4, r8
 8026f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026f98:	3501      	adds	r5, #1
 8026f9a:	615e      	str	r6, [r3, #20]
 8026f9c:	6125      	str	r5, [r4, #16]
 8026f9e:	4620      	mov	r0, r4
 8026fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fa4:	0802a007 	.word	0x0802a007
 8026fa8:	0802a018 	.word	0x0802a018

08026fac <__s2b>:
 8026fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026fb0:	460c      	mov	r4, r1
 8026fb2:	4615      	mov	r5, r2
 8026fb4:	461f      	mov	r7, r3
 8026fb6:	2209      	movs	r2, #9
 8026fb8:	3308      	adds	r3, #8
 8026fba:	4606      	mov	r6, r0
 8026fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8026fc0:	2100      	movs	r1, #0
 8026fc2:	2201      	movs	r2, #1
 8026fc4:	429a      	cmp	r2, r3
 8026fc6:	db09      	blt.n	8026fdc <__s2b+0x30>
 8026fc8:	4630      	mov	r0, r6
 8026fca:	f7ff ff47 	bl	8026e5c <_Balloc>
 8026fce:	b940      	cbnz	r0, 8026fe2 <__s2b+0x36>
 8026fd0:	4602      	mov	r2, r0
 8026fd2:	4b19      	ldr	r3, [pc, #100]	; (8027038 <__s2b+0x8c>)
 8026fd4:	4819      	ldr	r0, [pc, #100]	; (802703c <__s2b+0x90>)
 8026fd6:	21d3      	movs	r1, #211	; 0xd3
 8026fd8:	f002 f872 	bl	80290c0 <__assert_func>
 8026fdc:	0052      	lsls	r2, r2, #1
 8026fde:	3101      	adds	r1, #1
 8026fe0:	e7f0      	b.n	8026fc4 <__s2b+0x18>
 8026fe2:	9b08      	ldr	r3, [sp, #32]
 8026fe4:	6143      	str	r3, [r0, #20]
 8026fe6:	2d09      	cmp	r5, #9
 8026fe8:	f04f 0301 	mov.w	r3, #1
 8026fec:	6103      	str	r3, [r0, #16]
 8026fee:	dd16      	ble.n	802701e <__s2b+0x72>
 8026ff0:	f104 0909 	add.w	r9, r4, #9
 8026ff4:	46c8      	mov	r8, r9
 8026ff6:	442c      	add	r4, r5
 8026ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026ffc:	4601      	mov	r1, r0
 8026ffe:	3b30      	subs	r3, #48	; 0x30
 8027000:	220a      	movs	r2, #10
 8027002:	4630      	mov	r0, r6
 8027004:	f7ff ff8c 	bl	8026f20 <__multadd>
 8027008:	45a0      	cmp	r8, r4
 802700a:	d1f5      	bne.n	8026ff8 <__s2b+0x4c>
 802700c:	f1a5 0408 	sub.w	r4, r5, #8
 8027010:	444c      	add	r4, r9
 8027012:	1b2d      	subs	r5, r5, r4
 8027014:	1963      	adds	r3, r4, r5
 8027016:	42bb      	cmp	r3, r7
 8027018:	db04      	blt.n	8027024 <__s2b+0x78>
 802701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802701e:	340a      	adds	r4, #10
 8027020:	2509      	movs	r5, #9
 8027022:	e7f6      	b.n	8027012 <__s2b+0x66>
 8027024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027028:	4601      	mov	r1, r0
 802702a:	3b30      	subs	r3, #48	; 0x30
 802702c:	220a      	movs	r2, #10
 802702e:	4630      	mov	r0, r6
 8027030:	f7ff ff76 	bl	8026f20 <__multadd>
 8027034:	e7ee      	b.n	8027014 <__s2b+0x68>
 8027036:	bf00      	nop
 8027038:	0802a007 	.word	0x0802a007
 802703c:	0802a018 	.word	0x0802a018

08027040 <__hi0bits>:
 8027040:	0c03      	lsrs	r3, r0, #16
 8027042:	041b      	lsls	r3, r3, #16
 8027044:	b9d3      	cbnz	r3, 802707c <__hi0bits+0x3c>
 8027046:	0400      	lsls	r0, r0, #16
 8027048:	2310      	movs	r3, #16
 802704a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802704e:	bf04      	itt	eq
 8027050:	0200      	lsleq	r0, r0, #8
 8027052:	3308      	addeq	r3, #8
 8027054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027058:	bf04      	itt	eq
 802705a:	0100      	lsleq	r0, r0, #4
 802705c:	3304      	addeq	r3, #4
 802705e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027062:	bf04      	itt	eq
 8027064:	0080      	lsleq	r0, r0, #2
 8027066:	3302      	addeq	r3, #2
 8027068:	2800      	cmp	r0, #0
 802706a:	db05      	blt.n	8027078 <__hi0bits+0x38>
 802706c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027070:	f103 0301 	add.w	r3, r3, #1
 8027074:	bf08      	it	eq
 8027076:	2320      	moveq	r3, #32
 8027078:	4618      	mov	r0, r3
 802707a:	4770      	bx	lr
 802707c:	2300      	movs	r3, #0
 802707e:	e7e4      	b.n	802704a <__hi0bits+0xa>

08027080 <__lo0bits>:
 8027080:	6803      	ldr	r3, [r0, #0]
 8027082:	f013 0207 	ands.w	r2, r3, #7
 8027086:	d00c      	beq.n	80270a2 <__lo0bits+0x22>
 8027088:	07d9      	lsls	r1, r3, #31
 802708a:	d422      	bmi.n	80270d2 <__lo0bits+0x52>
 802708c:	079a      	lsls	r2, r3, #30
 802708e:	bf49      	itett	mi
 8027090:	085b      	lsrmi	r3, r3, #1
 8027092:	089b      	lsrpl	r3, r3, #2
 8027094:	6003      	strmi	r3, [r0, #0]
 8027096:	2201      	movmi	r2, #1
 8027098:	bf5c      	itt	pl
 802709a:	6003      	strpl	r3, [r0, #0]
 802709c:	2202      	movpl	r2, #2
 802709e:	4610      	mov	r0, r2
 80270a0:	4770      	bx	lr
 80270a2:	b299      	uxth	r1, r3
 80270a4:	b909      	cbnz	r1, 80270aa <__lo0bits+0x2a>
 80270a6:	0c1b      	lsrs	r3, r3, #16
 80270a8:	2210      	movs	r2, #16
 80270aa:	b2d9      	uxtb	r1, r3
 80270ac:	b909      	cbnz	r1, 80270b2 <__lo0bits+0x32>
 80270ae:	3208      	adds	r2, #8
 80270b0:	0a1b      	lsrs	r3, r3, #8
 80270b2:	0719      	lsls	r1, r3, #28
 80270b4:	bf04      	itt	eq
 80270b6:	091b      	lsreq	r3, r3, #4
 80270b8:	3204      	addeq	r2, #4
 80270ba:	0799      	lsls	r1, r3, #30
 80270bc:	bf04      	itt	eq
 80270be:	089b      	lsreq	r3, r3, #2
 80270c0:	3202      	addeq	r2, #2
 80270c2:	07d9      	lsls	r1, r3, #31
 80270c4:	d403      	bmi.n	80270ce <__lo0bits+0x4e>
 80270c6:	085b      	lsrs	r3, r3, #1
 80270c8:	f102 0201 	add.w	r2, r2, #1
 80270cc:	d003      	beq.n	80270d6 <__lo0bits+0x56>
 80270ce:	6003      	str	r3, [r0, #0]
 80270d0:	e7e5      	b.n	802709e <__lo0bits+0x1e>
 80270d2:	2200      	movs	r2, #0
 80270d4:	e7e3      	b.n	802709e <__lo0bits+0x1e>
 80270d6:	2220      	movs	r2, #32
 80270d8:	e7e1      	b.n	802709e <__lo0bits+0x1e>
	...

080270dc <__i2b>:
 80270dc:	b510      	push	{r4, lr}
 80270de:	460c      	mov	r4, r1
 80270e0:	2101      	movs	r1, #1
 80270e2:	f7ff febb 	bl	8026e5c <_Balloc>
 80270e6:	4602      	mov	r2, r0
 80270e8:	b928      	cbnz	r0, 80270f6 <__i2b+0x1a>
 80270ea:	4b05      	ldr	r3, [pc, #20]	; (8027100 <__i2b+0x24>)
 80270ec:	4805      	ldr	r0, [pc, #20]	; (8027104 <__i2b+0x28>)
 80270ee:	f240 1145 	movw	r1, #325	; 0x145
 80270f2:	f001 ffe5 	bl	80290c0 <__assert_func>
 80270f6:	2301      	movs	r3, #1
 80270f8:	6144      	str	r4, [r0, #20]
 80270fa:	6103      	str	r3, [r0, #16]
 80270fc:	bd10      	pop	{r4, pc}
 80270fe:	bf00      	nop
 8027100:	0802a007 	.word	0x0802a007
 8027104:	0802a018 	.word	0x0802a018

08027108 <__multiply>:
 8027108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802710c:	4691      	mov	r9, r2
 802710e:	690a      	ldr	r2, [r1, #16]
 8027110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027114:	429a      	cmp	r2, r3
 8027116:	bfb8      	it	lt
 8027118:	460b      	movlt	r3, r1
 802711a:	460c      	mov	r4, r1
 802711c:	bfbc      	itt	lt
 802711e:	464c      	movlt	r4, r9
 8027120:	4699      	movlt	r9, r3
 8027122:	6927      	ldr	r7, [r4, #16]
 8027124:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027128:	68a3      	ldr	r3, [r4, #8]
 802712a:	6861      	ldr	r1, [r4, #4]
 802712c:	eb07 060a 	add.w	r6, r7, sl
 8027130:	42b3      	cmp	r3, r6
 8027132:	b085      	sub	sp, #20
 8027134:	bfb8      	it	lt
 8027136:	3101      	addlt	r1, #1
 8027138:	f7ff fe90 	bl	8026e5c <_Balloc>
 802713c:	b930      	cbnz	r0, 802714c <__multiply+0x44>
 802713e:	4602      	mov	r2, r0
 8027140:	4b44      	ldr	r3, [pc, #272]	; (8027254 <__multiply+0x14c>)
 8027142:	4845      	ldr	r0, [pc, #276]	; (8027258 <__multiply+0x150>)
 8027144:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8027148:	f001 ffba 	bl	80290c0 <__assert_func>
 802714c:	f100 0514 	add.w	r5, r0, #20
 8027150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027154:	462b      	mov	r3, r5
 8027156:	2200      	movs	r2, #0
 8027158:	4543      	cmp	r3, r8
 802715a:	d321      	bcc.n	80271a0 <__multiply+0x98>
 802715c:	f104 0314 	add.w	r3, r4, #20
 8027160:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027164:	f109 0314 	add.w	r3, r9, #20
 8027168:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802716c:	9202      	str	r2, [sp, #8]
 802716e:	1b3a      	subs	r2, r7, r4
 8027170:	3a15      	subs	r2, #21
 8027172:	f022 0203 	bic.w	r2, r2, #3
 8027176:	3204      	adds	r2, #4
 8027178:	f104 0115 	add.w	r1, r4, #21
 802717c:	428f      	cmp	r7, r1
 802717e:	bf38      	it	cc
 8027180:	2204      	movcc	r2, #4
 8027182:	9201      	str	r2, [sp, #4]
 8027184:	9a02      	ldr	r2, [sp, #8]
 8027186:	9303      	str	r3, [sp, #12]
 8027188:	429a      	cmp	r2, r3
 802718a:	d80c      	bhi.n	80271a6 <__multiply+0x9e>
 802718c:	2e00      	cmp	r6, #0
 802718e:	dd03      	ble.n	8027198 <__multiply+0x90>
 8027190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027194:	2b00      	cmp	r3, #0
 8027196:	d05b      	beq.n	8027250 <__multiply+0x148>
 8027198:	6106      	str	r6, [r0, #16]
 802719a:	b005      	add	sp, #20
 802719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271a0:	f843 2b04 	str.w	r2, [r3], #4
 80271a4:	e7d8      	b.n	8027158 <__multiply+0x50>
 80271a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80271aa:	f1ba 0f00 	cmp.w	sl, #0
 80271ae:	d024      	beq.n	80271fa <__multiply+0xf2>
 80271b0:	f104 0e14 	add.w	lr, r4, #20
 80271b4:	46a9      	mov	r9, r5
 80271b6:	f04f 0c00 	mov.w	ip, #0
 80271ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80271be:	f8d9 1000 	ldr.w	r1, [r9]
 80271c2:	fa1f fb82 	uxth.w	fp, r2
 80271c6:	b289      	uxth	r1, r1
 80271c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80271cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80271d0:	f8d9 2000 	ldr.w	r2, [r9]
 80271d4:	4461      	add	r1, ip
 80271d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80271da:	fb0a c20b 	mla	r2, sl, fp, ip
 80271de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80271e2:	b289      	uxth	r1, r1
 80271e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80271e8:	4577      	cmp	r7, lr
 80271ea:	f849 1b04 	str.w	r1, [r9], #4
 80271ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80271f2:	d8e2      	bhi.n	80271ba <__multiply+0xb2>
 80271f4:	9a01      	ldr	r2, [sp, #4]
 80271f6:	f845 c002 	str.w	ip, [r5, r2]
 80271fa:	9a03      	ldr	r2, [sp, #12]
 80271fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027200:	3304      	adds	r3, #4
 8027202:	f1b9 0f00 	cmp.w	r9, #0
 8027206:	d021      	beq.n	802724c <__multiply+0x144>
 8027208:	6829      	ldr	r1, [r5, #0]
 802720a:	f104 0c14 	add.w	ip, r4, #20
 802720e:	46ae      	mov	lr, r5
 8027210:	f04f 0a00 	mov.w	sl, #0
 8027214:	f8bc b000 	ldrh.w	fp, [ip]
 8027218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802721c:	fb09 220b 	mla	r2, r9, fp, r2
 8027220:	4452      	add	r2, sl
 8027222:	b289      	uxth	r1, r1
 8027224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027228:	f84e 1b04 	str.w	r1, [lr], #4
 802722c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8027230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027234:	f8be 1000 	ldrh.w	r1, [lr]
 8027238:	fb09 110a 	mla	r1, r9, sl, r1
 802723c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8027240:	4567      	cmp	r7, ip
 8027242:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027246:	d8e5      	bhi.n	8027214 <__multiply+0x10c>
 8027248:	9a01      	ldr	r2, [sp, #4]
 802724a:	50a9      	str	r1, [r5, r2]
 802724c:	3504      	adds	r5, #4
 802724e:	e799      	b.n	8027184 <__multiply+0x7c>
 8027250:	3e01      	subs	r6, #1
 8027252:	e79b      	b.n	802718c <__multiply+0x84>
 8027254:	0802a007 	.word	0x0802a007
 8027258:	0802a018 	.word	0x0802a018

0802725c <__pow5mult>:
 802725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027260:	4615      	mov	r5, r2
 8027262:	f012 0203 	ands.w	r2, r2, #3
 8027266:	4606      	mov	r6, r0
 8027268:	460f      	mov	r7, r1
 802726a:	d007      	beq.n	802727c <__pow5mult+0x20>
 802726c:	4c25      	ldr	r4, [pc, #148]	; (8027304 <__pow5mult+0xa8>)
 802726e:	3a01      	subs	r2, #1
 8027270:	2300      	movs	r3, #0
 8027272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027276:	f7ff fe53 	bl	8026f20 <__multadd>
 802727a:	4607      	mov	r7, r0
 802727c:	10ad      	asrs	r5, r5, #2
 802727e:	d03d      	beq.n	80272fc <__pow5mult+0xa0>
 8027280:	69f4      	ldr	r4, [r6, #28]
 8027282:	b97c      	cbnz	r4, 80272a4 <__pow5mult+0x48>
 8027284:	2010      	movs	r0, #16
 8027286:	f7ff fd35 	bl	8026cf4 <malloc>
 802728a:	4602      	mov	r2, r0
 802728c:	61f0      	str	r0, [r6, #28]
 802728e:	b928      	cbnz	r0, 802729c <__pow5mult+0x40>
 8027290:	4b1d      	ldr	r3, [pc, #116]	; (8027308 <__pow5mult+0xac>)
 8027292:	481e      	ldr	r0, [pc, #120]	; (802730c <__pow5mult+0xb0>)
 8027294:	f240 11b3 	movw	r1, #435	; 0x1b3
 8027298:	f001 ff12 	bl	80290c0 <__assert_func>
 802729c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80272a0:	6004      	str	r4, [r0, #0]
 80272a2:	60c4      	str	r4, [r0, #12]
 80272a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80272a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80272ac:	b94c      	cbnz	r4, 80272c2 <__pow5mult+0x66>
 80272ae:	f240 2171 	movw	r1, #625	; 0x271
 80272b2:	4630      	mov	r0, r6
 80272b4:	f7ff ff12 	bl	80270dc <__i2b>
 80272b8:	2300      	movs	r3, #0
 80272ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80272be:	4604      	mov	r4, r0
 80272c0:	6003      	str	r3, [r0, #0]
 80272c2:	f04f 0900 	mov.w	r9, #0
 80272c6:	07eb      	lsls	r3, r5, #31
 80272c8:	d50a      	bpl.n	80272e0 <__pow5mult+0x84>
 80272ca:	4639      	mov	r1, r7
 80272cc:	4622      	mov	r2, r4
 80272ce:	4630      	mov	r0, r6
 80272d0:	f7ff ff1a 	bl	8027108 <__multiply>
 80272d4:	4639      	mov	r1, r7
 80272d6:	4680      	mov	r8, r0
 80272d8:	4630      	mov	r0, r6
 80272da:	f7ff fdff 	bl	8026edc <_Bfree>
 80272de:	4647      	mov	r7, r8
 80272e0:	106d      	asrs	r5, r5, #1
 80272e2:	d00b      	beq.n	80272fc <__pow5mult+0xa0>
 80272e4:	6820      	ldr	r0, [r4, #0]
 80272e6:	b938      	cbnz	r0, 80272f8 <__pow5mult+0x9c>
 80272e8:	4622      	mov	r2, r4
 80272ea:	4621      	mov	r1, r4
 80272ec:	4630      	mov	r0, r6
 80272ee:	f7ff ff0b 	bl	8027108 <__multiply>
 80272f2:	6020      	str	r0, [r4, #0]
 80272f4:	f8c0 9000 	str.w	r9, [r0]
 80272f8:	4604      	mov	r4, r0
 80272fa:	e7e4      	b.n	80272c6 <__pow5mult+0x6a>
 80272fc:	4638      	mov	r0, r7
 80272fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027302:	bf00      	nop
 8027304:	0802a168 	.word	0x0802a168
 8027308:	08029f98 	.word	0x08029f98
 802730c:	0802a018 	.word	0x0802a018

08027310 <__lshift>:
 8027310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027314:	460c      	mov	r4, r1
 8027316:	6849      	ldr	r1, [r1, #4]
 8027318:	6923      	ldr	r3, [r4, #16]
 802731a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802731e:	68a3      	ldr	r3, [r4, #8]
 8027320:	4607      	mov	r7, r0
 8027322:	4691      	mov	r9, r2
 8027324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027328:	f108 0601 	add.w	r6, r8, #1
 802732c:	42b3      	cmp	r3, r6
 802732e:	db0b      	blt.n	8027348 <__lshift+0x38>
 8027330:	4638      	mov	r0, r7
 8027332:	f7ff fd93 	bl	8026e5c <_Balloc>
 8027336:	4605      	mov	r5, r0
 8027338:	b948      	cbnz	r0, 802734e <__lshift+0x3e>
 802733a:	4602      	mov	r2, r0
 802733c:	4b28      	ldr	r3, [pc, #160]	; (80273e0 <__lshift+0xd0>)
 802733e:	4829      	ldr	r0, [pc, #164]	; (80273e4 <__lshift+0xd4>)
 8027340:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8027344:	f001 febc 	bl	80290c0 <__assert_func>
 8027348:	3101      	adds	r1, #1
 802734a:	005b      	lsls	r3, r3, #1
 802734c:	e7ee      	b.n	802732c <__lshift+0x1c>
 802734e:	2300      	movs	r3, #0
 8027350:	f100 0114 	add.w	r1, r0, #20
 8027354:	f100 0210 	add.w	r2, r0, #16
 8027358:	4618      	mov	r0, r3
 802735a:	4553      	cmp	r3, sl
 802735c:	db33      	blt.n	80273c6 <__lshift+0xb6>
 802735e:	6920      	ldr	r0, [r4, #16]
 8027360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027364:	f104 0314 	add.w	r3, r4, #20
 8027368:	f019 091f 	ands.w	r9, r9, #31
 802736c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027374:	d02b      	beq.n	80273ce <__lshift+0xbe>
 8027376:	f1c9 0e20 	rsb	lr, r9, #32
 802737a:	468a      	mov	sl, r1
 802737c:	2200      	movs	r2, #0
 802737e:	6818      	ldr	r0, [r3, #0]
 8027380:	fa00 f009 	lsl.w	r0, r0, r9
 8027384:	4310      	orrs	r0, r2
 8027386:	f84a 0b04 	str.w	r0, [sl], #4
 802738a:	f853 2b04 	ldr.w	r2, [r3], #4
 802738e:	459c      	cmp	ip, r3
 8027390:	fa22 f20e 	lsr.w	r2, r2, lr
 8027394:	d8f3      	bhi.n	802737e <__lshift+0x6e>
 8027396:	ebac 0304 	sub.w	r3, ip, r4
 802739a:	3b15      	subs	r3, #21
 802739c:	f023 0303 	bic.w	r3, r3, #3
 80273a0:	3304      	adds	r3, #4
 80273a2:	f104 0015 	add.w	r0, r4, #21
 80273a6:	4584      	cmp	ip, r0
 80273a8:	bf38      	it	cc
 80273aa:	2304      	movcc	r3, #4
 80273ac:	50ca      	str	r2, [r1, r3]
 80273ae:	b10a      	cbz	r2, 80273b4 <__lshift+0xa4>
 80273b0:	f108 0602 	add.w	r6, r8, #2
 80273b4:	3e01      	subs	r6, #1
 80273b6:	4638      	mov	r0, r7
 80273b8:	612e      	str	r6, [r5, #16]
 80273ba:	4621      	mov	r1, r4
 80273bc:	f7ff fd8e 	bl	8026edc <_Bfree>
 80273c0:	4628      	mov	r0, r5
 80273c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80273ca:	3301      	adds	r3, #1
 80273cc:	e7c5      	b.n	802735a <__lshift+0x4a>
 80273ce:	3904      	subs	r1, #4
 80273d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80273d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80273d8:	459c      	cmp	ip, r3
 80273da:	d8f9      	bhi.n	80273d0 <__lshift+0xc0>
 80273dc:	e7ea      	b.n	80273b4 <__lshift+0xa4>
 80273de:	bf00      	nop
 80273e0:	0802a007 	.word	0x0802a007
 80273e4:	0802a018 	.word	0x0802a018

080273e8 <__mcmp>:
 80273e8:	b530      	push	{r4, r5, lr}
 80273ea:	6902      	ldr	r2, [r0, #16]
 80273ec:	690c      	ldr	r4, [r1, #16]
 80273ee:	1b12      	subs	r2, r2, r4
 80273f0:	d10e      	bne.n	8027410 <__mcmp+0x28>
 80273f2:	f100 0314 	add.w	r3, r0, #20
 80273f6:	3114      	adds	r1, #20
 80273f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80273fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8027404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027408:	42a5      	cmp	r5, r4
 802740a:	d003      	beq.n	8027414 <__mcmp+0x2c>
 802740c:	d305      	bcc.n	802741a <__mcmp+0x32>
 802740e:	2201      	movs	r2, #1
 8027410:	4610      	mov	r0, r2
 8027412:	bd30      	pop	{r4, r5, pc}
 8027414:	4283      	cmp	r3, r0
 8027416:	d3f3      	bcc.n	8027400 <__mcmp+0x18>
 8027418:	e7fa      	b.n	8027410 <__mcmp+0x28>
 802741a:	f04f 32ff 	mov.w	r2, #4294967295
 802741e:	e7f7      	b.n	8027410 <__mcmp+0x28>

08027420 <__mdiff>:
 8027420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027424:	460c      	mov	r4, r1
 8027426:	4606      	mov	r6, r0
 8027428:	4611      	mov	r1, r2
 802742a:	4620      	mov	r0, r4
 802742c:	4690      	mov	r8, r2
 802742e:	f7ff ffdb 	bl	80273e8 <__mcmp>
 8027432:	1e05      	subs	r5, r0, #0
 8027434:	d110      	bne.n	8027458 <__mdiff+0x38>
 8027436:	4629      	mov	r1, r5
 8027438:	4630      	mov	r0, r6
 802743a:	f7ff fd0f 	bl	8026e5c <_Balloc>
 802743e:	b930      	cbnz	r0, 802744e <__mdiff+0x2e>
 8027440:	4b3a      	ldr	r3, [pc, #232]	; (802752c <__mdiff+0x10c>)
 8027442:	4602      	mov	r2, r0
 8027444:	f240 2137 	movw	r1, #567	; 0x237
 8027448:	4839      	ldr	r0, [pc, #228]	; (8027530 <__mdiff+0x110>)
 802744a:	f001 fe39 	bl	80290c0 <__assert_func>
 802744e:	2301      	movs	r3, #1
 8027450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027458:	bfa4      	itt	ge
 802745a:	4643      	movge	r3, r8
 802745c:	46a0      	movge	r8, r4
 802745e:	4630      	mov	r0, r6
 8027460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027464:	bfa6      	itte	ge
 8027466:	461c      	movge	r4, r3
 8027468:	2500      	movge	r5, #0
 802746a:	2501      	movlt	r5, #1
 802746c:	f7ff fcf6 	bl	8026e5c <_Balloc>
 8027470:	b920      	cbnz	r0, 802747c <__mdiff+0x5c>
 8027472:	4b2e      	ldr	r3, [pc, #184]	; (802752c <__mdiff+0x10c>)
 8027474:	4602      	mov	r2, r0
 8027476:	f240 2145 	movw	r1, #581	; 0x245
 802747a:	e7e5      	b.n	8027448 <__mdiff+0x28>
 802747c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027480:	6926      	ldr	r6, [r4, #16]
 8027482:	60c5      	str	r5, [r0, #12]
 8027484:	f104 0914 	add.w	r9, r4, #20
 8027488:	f108 0514 	add.w	r5, r8, #20
 802748c:	f100 0e14 	add.w	lr, r0, #20
 8027490:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027498:	f108 0210 	add.w	r2, r8, #16
 802749c:	46f2      	mov	sl, lr
 802749e:	2100      	movs	r1, #0
 80274a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80274a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80274a8:	fa11 f88b 	uxtah	r8, r1, fp
 80274ac:	b299      	uxth	r1, r3
 80274ae:	0c1b      	lsrs	r3, r3, #16
 80274b0:	eba8 0801 	sub.w	r8, r8, r1
 80274b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80274b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80274bc:	fa1f f888 	uxth.w	r8, r8
 80274c0:	1419      	asrs	r1, r3, #16
 80274c2:	454e      	cmp	r6, r9
 80274c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80274c8:	f84a 3b04 	str.w	r3, [sl], #4
 80274cc:	d8e8      	bhi.n	80274a0 <__mdiff+0x80>
 80274ce:	1b33      	subs	r3, r6, r4
 80274d0:	3b15      	subs	r3, #21
 80274d2:	f023 0303 	bic.w	r3, r3, #3
 80274d6:	3304      	adds	r3, #4
 80274d8:	3415      	adds	r4, #21
 80274da:	42a6      	cmp	r6, r4
 80274dc:	bf38      	it	cc
 80274de:	2304      	movcc	r3, #4
 80274e0:	441d      	add	r5, r3
 80274e2:	4473      	add	r3, lr
 80274e4:	469e      	mov	lr, r3
 80274e6:	462e      	mov	r6, r5
 80274e8:	4566      	cmp	r6, ip
 80274ea:	d30e      	bcc.n	802750a <__mdiff+0xea>
 80274ec:	f10c 0203 	add.w	r2, ip, #3
 80274f0:	1b52      	subs	r2, r2, r5
 80274f2:	f022 0203 	bic.w	r2, r2, #3
 80274f6:	3d03      	subs	r5, #3
 80274f8:	45ac      	cmp	ip, r5
 80274fa:	bf38      	it	cc
 80274fc:	2200      	movcc	r2, #0
 80274fe:	4413      	add	r3, r2
 8027500:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8027504:	b17a      	cbz	r2, 8027526 <__mdiff+0x106>
 8027506:	6107      	str	r7, [r0, #16]
 8027508:	e7a4      	b.n	8027454 <__mdiff+0x34>
 802750a:	f856 8b04 	ldr.w	r8, [r6], #4
 802750e:	fa11 f288 	uxtah	r2, r1, r8
 8027512:	1414      	asrs	r4, r2, #16
 8027514:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027518:	b292      	uxth	r2, r2
 802751a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802751e:	f84e 2b04 	str.w	r2, [lr], #4
 8027522:	1421      	asrs	r1, r4, #16
 8027524:	e7e0      	b.n	80274e8 <__mdiff+0xc8>
 8027526:	3f01      	subs	r7, #1
 8027528:	e7ea      	b.n	8027500 <__mdiff+0xe0>
 802752a:	bf00      	nop
 802752c:	0802a007 	.word	0x0802a007
 8027530:	0802a018 	.word	0x0802a018

08027534 <__ulp>:
 8027534:	b082      	sub	sp, #8
 8027536:	ed8d 0b00 	vstr	d0, [sp]
 802753a:	9a01      	ldr	r2, [sp, #4]
 802753c:	4b0f      	ldr	r3, [pc, #60]	; (802757c <__ulp+0x48>)
 802753e:	4013      	ands	r3, r2
 8027540:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8027544:	2b00      	cmp	r3, #0
 8027546:	dc08      	bgt.n	802755a <__ulp+0x26>
 8027548:	425b      	negs	r3, r3
 802754a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802754e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8027552:	da04      	bge.n	802755e <__ulp+0x2a>
 8027554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8027558:	4113      	asrs	r3, r2
 802755a:	2200      	movs	r2, #0
 802755c:	e008      	b.n	8027570 <__ulp+0x3c>
 802755e:	f1a2 0314 	sub.w	r3, r2, #20
 8027562:	2b1e      	cmp	r3, #30
 8027564:	bfda      	itte	le
 8027566:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802756a:	40da      	lsrle	r2, r3
 802756c:	2201      	movgt	r2, #1
 802756e:	2300      	movs	r3, #0
 8027570:	4619      	mov	r1, r3
 8027572:	4610      	mov	r0, r2
 8027574:	ec41 0b10 	vmov	d0, r0, r1
 8027578:	b002      	add	sp, #8
 802757a:	4770      	bx	lr
 802757c:	7ff00000 	.word	0x7ff00000

08027580 <__b2d>:
 8027580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027584:	6906      	ldr	r6, [r0, #16]
 8027586:	f100 0814 	add.w	r8, r0, #20
 802758a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802758e:	1f37      	subs	r7, r6, #4
 8027590:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8027594:	4610      	mov	r0, r2
 8027596:	f7ff fd53 	bl	8027040 <__hi0bits>
 802759a:	f1c0 0320 	rsb	r3, r0, #32
 802759e:	280a      	cmp	r0, #10
 80275a0:	600b      	str	r3, [r1, #0]
 80275a2:	491b      	ldr	r1, [pc, #108]	; (8027610 <__b2d+0x90>)
 80275a4:	dc15      	bgt.n	80275d2 <__b2d+0x52>
 80275a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80275aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80275ae:	45b8      	cmp	r8, r7
 80275b0:	ea43 0501 	orr.w	r5, r3, r1
 80275b4:	bf34      	ite	cc
 80275b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80275ba:	2300      	movcs	r3, #0
 80275bc:	3015      	adds	r0, #21
 80275be:	fa02 f000 	lsl.w	r0, r2, r0
 80275c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80275c6:	4303      	orrs	r3, r0
 80275c8:	461c      	mov	r4, r3
 80275ca:	ec45 4b10 	vmov	d0, r4, r5
 80275ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80275d2:	45b8      	cmp	r8, r7
 80275d4:	bf3a      	itte	cc
 80275d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80275da:	f1a6 0708 	subcc.w	r7, r6, #8
 80275de:	2300      	movcs	r3, #0
 80275e0:	380b      	subs	r0, #11
 80275e2:	d012      	beq.n	802760a <__b2d+0x8a>
 80275e4:	f1c0 0120 	rsb	r1, r0, #32
 80275e8:	fa23 f401 	lsr.w	r4, r3, r1
 80275ec:	4082      	lsls	r2, r0
 80275ee:	4322      	orrs	r2, r4
 80275f0:	4547      	cmp	r7, r8
 80275f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80275f6:	bf8c      	ite	hi
 80275f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80275fc:	2200      	movls	r2, #0
 80275fe:	4083      	lsls	r3, r0
 8027600:	40ca      	lsrs	r2, r1
 8027602:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8027606:	4313      	orrs	r3, r2
 8027608:	e7de      	b.n	80275c8 <__b2d+0x48>
 802760a:	ea42 0501 	orr.w	r5, r2, r1
 802760e:	e7db      	b.n	80275c8 <__b2d+0x48>
 8027610:	3ff00000 	.word	0x3ff00000

08027614 <__d2b>:
 8027614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027618:	460f      	mov	r7, r1
 802761a:	2101      	movs	r1, #1
 802761c:	ec59 8b10 	vmov	r8, r9, d0
 8027620:	4616      	mov	r6, r2
 8027622:	f7ff fc1b 	bl	8026e5c <_Balloc>
 8027626:	4604      	mov	r4, r0
 8027628:	b930      	cbnz	r0, 8027638 <__d2b+0x24>
 802762a:	4602      	mov	r2, r0
 802762c:	4b24      	ldr	r3, [pc, #144]	; (80276c0 <__d2b+0xac>)
 802762e:	4825      	ldr	r0, [pc, #148]	; (80276c4 <__d2b+0xb0>)
 8027630:	f240 310f 	movw	r1, #783	; 0x30f
 8027634:	f001 fd44 	bl	80290c0 <__assert_func>
 8027638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802763c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027640:	bb2d      	cbnz	r5, 802768e <__d2b+0x7a>
 8027642:	9301      	str	r3, [sp, #4]
 8027644:	f1b8 0300 	subs.w	r3, r8, #0
 8027648:	d026      	beq.n	8027698 <__d2b+0x84>
 802764a:	4668      	mov	r0, sp
 802764c:	9300      	str	r3, [sp, #0]
 802764e:	f7ff fd17 	bl	8027080 <__lo0bits>
 8027652:	e9dd 1200 	ldrd	r1, r2, [sp]
 8027656:	b1e8      	cbz	r0, 8027694 <__d2b+0x80>
 8027658:	f1c0 0320 	rsb	r3, r0, #32
 802765c:	fa02 f303 	lsl.w	r3, r2, r3
 8027660:	430b      	orrs	r3, r1
 8027662:	40c2      	lsrs	r2, r0
 8027664:	6163      	str	r3, [r4, #20]
 8027666:	9201      	str	r2, [sp, #4]
 8027668:	9b01      	ldr	r3, [sp, #4]
 802766a:	61a3      	str	r3, [r4, #24]
 802766c:	2b00      	cmp	r3, #0
 802766e:	bf14      	ite	ne
 8027670:	2202      	movne	r2, #2
 8027672:	2201      	moveq	r2, #1
 8027674:	6122      	str	r2, [r4, #16]
 8027676:	b1bd      	cbz	r5, 80276a8 <__d2b+0x94>
 8027678:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802767c:	4405      	add	r5, r0
 802767e:	603d      	str	r5, [r7, #0]
 8027680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027684:	6030      	str	r0, [r6, #0]
 8027686:	4620      	mov	r0, r4
 8027688:	b003      	add	sp, #12
 802768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802768e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027692:	e7d6      	b.n	8027642 <__d2b+0x2e>
 8027694:	6161      	str	r1, [r4, #20]
 8027696:	e7e7      	b.n	8027668 <__d2b+0x54>
 8027698:	a801      	add	r0, sp, #4
 802769a:	f7ff fcf1 	bl	8027080 <__lo0bits>
 802769e:	9b01      	ldr	r3, [sp, #4]
 80276a0:	6163      	str	r3, [r4, #20]
 80276a2:	3020      	adds	r0, #32
 80276a4:	2201      	movs	r2, #1
 80276a6:	e7e5      	b.n	8027674 <__d2b+0x60>
 80276a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80276ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80276b0:	6038      	str	r0, [r7, #0]
 80276b2:	6918      	ldr	r0, [r3, #16]
 80276b4:	f7ff fcc4 	bl	8027040 <__hi0bits>
 80276b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80276bc:	e7e2      	b.n	8027684 <__d2b+0x70>
 80276be:	bf00      	nop
 80276c0:	0802a007 	.word	0x0802a007
 80276c4:	0802a018 	.word	0x0802a018

080276c8 <__ratio>:
 80276c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276cc:	4688      	mov	r8, r1
 80276ce:	4669      	mov	r1, sp
 80276d0:	4681      	mov	r9, r0
 80276d2:	f7ff ff55 	bl	8027580 <__b2d>
 80276d6:	a901      	add	r1, sp, #4
 80276d8:	4640      	mov	r0, r8
 80276da:	ec55 4b10 	vmov	r4, r5, d0
 80276de:	f7ff ff4f 	bl	8027580 <__b2d>
 80276e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80276e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80276ea:	eba3 0c02 	sub.w	ip, r3, r2
 80276ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80276f2:	1a9b      	subs	r3, r3, r2
 80276f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80276f8:	ec51 0b10 	vmov	r0, r1, d0
 80276fc:	2b00      	cmp	r3, #0
 80276fe:	bfd6      	itet	le
 8027700:	460a      	movle	r2, r1
 8027702:	462a      	movgt	r2, r5
 8027704:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8027708:	468b      	mov	fp, r1
 802770a:	462f      	mov	r7, r5
 802770c:	bfd4      	ite	le
 802770e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027712:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8027716:	4620      	mov	r0, r4
 8027718:	ee10 2a10 	vmov	r2, s0
 802771c:	465b      	mov	r3, fp
 802771e:	4639      	mov	r1, r7
 8027720:	f7f9 f89c 	bl	802085c <__aeabi_ddiv>
 8027724:	ec41 0b10 	vmov	d0, r0, r1
 8027728:	b003      	add	sp, #12
 802772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802772e <__copybits>:
 802772e:	3901      	subs	r1, #1
 8027730:	b570      	push	{r4, r5, r6, lr}
 8027732:	1149      	asrs	r1, r1, #5
 8027734:	6914      	ldr	r4, [r2, #16]
 8027736:	3101      	adds	r1, #1
 8027738:	f102 0314 	add.w	r3, r2, #20
 802773c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027740:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027744:	1f05      	subs	r5, r0, #4
 8027746:	42a3      	cmp	r3, r4
 8027748:	d30c      	bcc.n	8027764 <__copybits+0x36>
 802774a:	1aa3      	subs	r3, r4, r2
 802774c:	3b11      	subs	r3, #17
 802774e:	f023 0303 	bic.w	r3, r3, #3
 8027752:	3211      	adds	r2, #17
 8027754:	42a2      	cmp	r2, r4
 8027756:	bf88      	it	hi
 8027758:	2300      	movhi	r3, #0
 802775a:	4418      	add	r0, r3
 802775c:	2300      	movs	r3, #0
 802775e:	4288      	cmp	r0, r1
 8027760:	d305      	bcc.n	802776e <__copybits+0x40>
 8027762:	bd70      	pop	{r4, r5, r6, pc}
 8027764:	f853 6b04 	ldr.w	r6, [r3], #4
 8027768:	f845 6f04 	str.w	r6, [r5, #4]!
 802776c:	e7eb      	b.n	8027746 <__copybits+0x18>
 802776e:	f840 3b04 	str.w	r3, [r0], #4
 8027772:	e7f4      	b.n	802775e <__copybits+0x30>

08027774 <__any_on>:
 8027774:	f100 0214 	add.w	r2, r0, #20
 8027778:	6900      	ldr	r0, [r0, #16]
 802777a:	114b      	asrs	r3, r1, #5
 802777c:	4298      	cmp	r0, r3
 802777e:	b510      	push	{r4, lr}
 8027780:	db11      	blt.n	80277a6 <__any_on+0x32>
 8027782:	dd0a      	ble.n	802779a <__any_on+0x26>
 8027784:	f011 011f 	ands.w	r1, r1, #31
 8027788:	d007      	beq.n	802779a <__any_on+0x26>
 802778a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802778e:	fa24 f001 	lsr.w	r0, r4, r1
 8027792:	fa00 f101 	lsl.w	r1, r0, r1
 8027796:	428c      	cmp	r4, r1
 8027798:	d10b      	bne.n	80277b2 <__any_on+0x3e>
 802779a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802779e:	4293      	cmp	r3, r2
 80277a0:	d803      	bhi.n	80277aa <__any_on+0x36>
 80277a2:	2000      	movs	r0, #0
 80277a4:	bd10      	pop	{r4, pc}
 80277a6:	4603      	mov	r3, r0
 80277a8:	e7f7      	b.n	802779a <__any_on+0x26>
 80277aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80277ae:	2900      	cmp	r1, #0
 80277b0:	d0f5      	beq.n	802779e <__any_on+0x2a>
 80277b2:	2001      	movs	r0, #1
 80277b4:	e7f6      	b.n	80277a4 <__any_on+0x30>

080277b6 <sulp>:
 80277b6:	b570      	push	{r4, r5, r6, lr}
 80277b8:	4604      	mov	r4, r0
 80277ba:	460d      	mov	r5, r1
 80277bc:	ec45 4b10 	vmov	d0, r4, r5
 80277c0:	4616      	mov	r6, r2
 80277c2:	f7ff feb7 	bl	8027534 <__ulp>
 80277c6:	ec51 0b10 	vmov	r0, r1, d0
 80277ca:	b17e      	cbz	r6, 80277ec <sulp+0x36>
 80277cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80277d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	dd09      	ble.n	80277ec <sulp+0x36>
 80277d8:	051b      	lsls	r3, r3, #20
 80277da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80277de:	2400      	movs	r4, #0
 80277e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80277e4:	4622      	mov	r2, r4
 80277e6:	462b      	mov	r3, r5
 80277e8:	f7f8 ff0e 	bl	8020608 <__aeabi_dmul>
 80277ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080277f0 <_strtod_l>:
 80277f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277f4:	ed2d 8b02 	vpush	{d8}
 80277f8:	b09b      	sub	sp, #108	; 0x6c
 80277fa:	4604      	mov	r4, r0
 80277fc:	9213      	str	r2, [sp, #76]	; 0x4c
 80277fe:	2200      	movs	r2, #0
 8027800:	9216      	str	r2, [sp, #88]	; 0x58
 8027802:	460d      	mov	r5, r1
 8027804:	f04f 0800 	mov.w	r8, #0
 8027808:	f04f 0900 	mov.w	r9, #0
 802780c:	460a      	mov	r2, r1
 802780e:	9215      	str	r2, [sp, #84]	; 0x54
 8027810:	7811      	ldrb	r1, [r2, #0]
 8027812:	292b      	cmp	r1, #43	; 0x2b
 8027814:	d04c      	beq.n	80278b0 <_strtod_l+0xc0>
 8027816:	d83a      	bhi.n	802788e <_strtod_l+0x9e>
 8027818:	290d      	cmp	r1, #13
 802781a:	d834      	bhi.n	8027886 <_strtod_l+0x96>
 802781c:	2908      	cmp	r1, #8
 802781e:	d834      	bhi.n	802788a <_strtod_l+0x9a>
 8027820:	2900      	cmp	r1, #0
 8027822:	d03d      	beq.n	80278a0 <_strtod_l+0xb0>
 8027824:	2200      	movs	r2, #0
 8027826:	920a      	str	r2, [sp, #40]	; 0x28
 8027828:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802782a:	7832      	ldrb	r2, [r6, #0]
 802782c:	2a30      	cmp	r2, #48	; 0x30
 802782e:	f040 80b4 	bne.w	802799a <_strtod_l+0x1aa>
 8027832:	7872      	ldrb	r2, [r6, #1]
 8027834:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8027838:	2a58      	cmp	r2, #88	; 0x58
 802783a:	d170      	bne.n	802791e <_strtod_l+0x12e>
 802783c:	9302      	str	r3, [sp, #8]
 802783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027840:	9301      	str	r3, [sp, #4]
 8027842:	ab16      	add	r3, sp, #88	; 0x58
 8027844:	9300      	str	r3, [sp, #0]
 8027846:	4a8e      	ldr	r2, [pc, #568]	; (8027a80 <_strtod_l+0x290>)
 8027848:	ab17      	add	r3, sp, #92	; 0x5c
 802784a:	a915      	add	r1, sp, #84	; 0x54
 802784c:	4620      	mov	r0, r4
 802784e:	f001 fcd3 	bl	80291f8 <__gethex>
 8027852:	f010 070f 	ands.w	r7, r0, #15
 8027856:	4605      	mov	r5, r0
 8027858:	d005      	beq.n	8027866 <_strtod_l+0x76>
 802785a:	2f06      	cmp	r7, #6
 802785c:	d12a      	bne.n	80278b4 <_strtod_l+0xc4>
 802785e:	3601      	adds	r6, #1
 8027860:	2300      	movs	r3, #0
 8027862:	9615      	str	r6, [sp, #84]	; 0x54
 8027864:	930a      	str	r3, [sp, #40]	; 0x28
 8027866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027868:	2b00      	cmp	r3, #0
 802786a:	f040 857f 	bne.w	802836c <_strtod_l+0xb7c>
 802786e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027870:	b1db      	cbz	r3, 80278aa <_strtod_l+0xba>
 8027872:	4642      	mov	r2, r8
 8027874:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8027878:	ec43 2b10 	vmov	d0, r2, r3
 802787c:	b01b      	add	sp, #108	; 0x6c
 802787e:	ecbd 8b02 	vpop	{d8}
 8027882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027886:	2920      	cmp	r1, #32
 8027888:	d1cc      	bne.n	8027824 <_strtod_l+0x34>
 802788a:	3201      	adds	r2, #1
 802788c:	e7bf      	b.n	802780e <_strtod_l+0x1e>
 802788e:	292d      	cmp	r1, #45	; 0x2d
 8027890:	d1c8      	bne.n	8027824 <_strtod_l+0x34>
 8027892:	2101      	movs	r1, #1
 8027894:	910a      	str	r1, [sp, #40]	; 0x28
 8027896:	1c51      	adds	r1, r2, #1
 8027898:	9115      	str	r1, [sp, #84]	; 0x54
 802789a:	7852      	ldrb	r2, [r2, #1]
 802789c:	2a00      	cmp	r2, #0
 802789e:	d1c3      	bne.n	8027828 <_strtod_l+0x38>
 80278a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80278a2:	9515      	str	r5, [sp, #84]	; 0x54
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	f040 855f 	bne.w	8028368 <_strtod_l+0xb78>
 80278aa:	4642      	mov	r2, r8
 80278ac:	464b      	mov	r3, r9
 80278ae:	e7e3      	b.n	8027878 <_strtod_l+0x88>
 80278b0:	2100      	movs	r1, #0
 80278b2:	e7ef      	b.n	8027894 <_strtod_l+0xa4>
 80278b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80278b6:	b13a      	cbz	r2, 80278c8 <_strtod_l+0xd8>
 80278b8:	2135      	movs	r1, #53	; 0x35
 80278ba:	a818      	add	r0, sp, #96	; 0x60
 80278bc:	f7ff ff37 	bl	802772e <__copybits>
 80278c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80278c2:	4620      	mov	r0, r4
 80278c4:	f7ff fb0a 	bl	8026edc <_Bfree>
 80278c8:	3f01      	subs	r7, #1
 80278ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80278cc:	2f04      	cmp	r7, #4
 80278ce:	d806      	bhi.n	80278de <_strtod_l+0xee>
 80278d0:	e8df f007 	tbb	[pc, r7]
 80278d4:	201d0314 	.word	0x201d0314
 80278d8:	14          	.byte	0x14
 80278d9:	00          	.byte	0x00
 80278da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80278de:	05e9      	lsls	r1, r5, #23
 80278e0:	bf48      	it	mi
 80278e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80278e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80278ea:	0d1b      	lsrs	r3, r3, #20
 80278ec:	051b      	lsls	r3, r3, #20
 80278ee:	2b00      	cmp	r3, #0
 80278f0:	d1b9      	bne.n	8027866 <_strtod_l+0x76>
 80278f2:	f7fe fb05 	bl	8025f00 <__errno>
 80278f6:	2322      	movs	r3, #34	; 0x22
 80278f8:	6003      	str	r3, [r0, #0]
 80278fa:	e7b4      	b.n	8027866 <_strtod_l+0x76>
 80278fc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8027900:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027904:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8027908:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802790c:	e7e7      	b.n	80278de <_strtod_l+0xee>
 802790e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8027a88 <_strtod_l+0x298>
 8027912:	e7e4      	b.n	80278de <_strtod_l+0xee>
 8027914:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8027918:	f04f 38ff 	mov.w	r8, #4294967295
 802791c:	e7df      	b.n	80278de <_strtod_l+0xee>
 802791e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027920:	1c5a      	adds	r2, r3, #1
 8027922:	9215      	str	r2, [sp, #84]	; 0x54
 8027924:	785b      	ldrb	r3, [r3, #1]
 8027926:	2b30      	cmp	r3, #48	; 0x30
 8027928:	d0f9      	beq.n	802791e <_strtod_l+0x12e>
 802792a:	2b00      	cmp	r3, #0
 802792c:	d09b      	beq.n	8027866 <_strtod_l+0x76>
 802792e:	2301      	movs	r3, #1
 8027930:	f04f 0a00 	mov.w	sl, #0
 8027934:	9304      	str	r3, [sp, #16]
 8027936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027938:	930b      	str	r3, [sp, #44]	; 0x2c
 802793a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802793e:	46d3      	mov	fp, sl
 8027940:	220a      	movs	r2, #10
 8027942:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027944:	7806      	ldrb	r6, [r0, #0]
 8027946:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802794a:	b2d9      	uxtb	r1, r3
 802794c:	2909      	cmp	r1, #9
 802794e:	d926      	bls.n	802799e <_strtod_l+0x1ae>
 8027950:	494c      	ldr	r1, [pc, #304]	; (8027a84 <_strtod_l+0x294>)
 8027952:	2201      	movs	r2, #1
 8027954:	f001 fb79 	bl	802904a <strncmp>
 8027958:	2800      	cmp	r0, #0
 802795a:	d030      	beq.n	80279be <_strtod_l+0x1ce>
 802795c:	2000      	movs	r0, #0
 802795e:	4632      	mov	r2, r6
 8027960:	9005      	str	r0, [sp, #20]
 8027962:	465e      	mov	r6, fp
 8027964:	4603      	mov	r3, r0
 8027966:	2a65      	cmp	r2, #101	; 0x65
 8027968:	d001      	beq.n	802796e <_strtod_l+0x17e>
 802796a:	2a45      	cmp	r2, #69	; 0x45
 802796c:	d113      	bne.n	8027996 <_strtod_l+0x1a6>
 802796e:	b91e      	cbnz	r6, 8027978 <_strtod_l+0x188>
 8027970:	9a04      	ldr	r2, [sp, #16]
 8027972:	4302      	orrs	r2, r0
 8027974:	d094      	beq.n	80278a0 <_strtod_l+0xb0>
 8027976:	2600      	movs	r6, #0
 8027978:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802797a:	1c6a      	adds	r2, r5, #1
 802797c:	9215      	str	r2, [sp, #84]	; 0x54
 802797e:	786a      	ldrb	r2, [r5, #1]
 8027980:	2a2b      	cmp	r2, #43	; 0x2b
 8027982:	d074      	beq.n	8027a6e <_strtod_l+0x27e>
 8027984:	2a2d      	cmp	r2, #45	; 0x2d
 8027986:	d078      	beq.n	8027a7a <_strtod_l+0x28a>
 8027988:	f04f 0c00 	mov.w	ip, #0
 802798c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8027990:	2909      	cmp	r1, #9
 8027992:	d97f      	bls.n	8027a94 <_strtod_l+0x2a4>
 8027994:	9515      	str	r5, [sp, #84]	; 0x54
 8027996:	2700      	movs	r7, #0
 8027998:	e09e      	b.n	8027ad8 <_strtod_l+0x2e8>
 802799a:	2300      	movs	r3, #0
 802799c:	e7c8      	b.n	8027930 <_strtod_l+0x140>
 802799e:	f1bb 0f08 	cmp.w	fp, #8
 80279a2:	bfd8      	it	le
 80279a4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80279a6:	f100 0001 	add.w	r0, r0, #1
 80279aa:	bfda      	itte	le
 80279ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80279b0:	9309      	strle	r3, [sp, #36]	; 0x24
 80279b2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80279b6:	f10b 0b01 	add.w	fp, fp, #1
 80279ba:	9015      	str	r0, [sp, #84]	; 0x54
 80279bc:	e7c1      	b.n	8027942 <_strtod_l+0x152>
 80279be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80279c0:	1c5a      	adds	r2, r3, #1
 80279c2:	9215      	str	r2, [sp, #84]	; 0x54
 80279c4:	785a      	ldrb	r2, [r3, #1]
 80279c6:	f1bb 0f00 	cmp.w	fp, #0
 80279ca:	d037      	beq.n	8027a3c <_strtod_l+0x24c>
 80279cc:	9005      	str	r0, [sp, #20]
 80279ce:	465e      	mov	r6, fp
 80279d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80279d4:	2b09      	cmp	r3, #9
 80279d6:	d912      	bls.n	80279fe <_strtod_l+0x20e>
 80279d8:	2301      	movs	r3, #1
 80279da:	e7c4      	b.n	8027966 <_strtod_l+0x176>
 80279dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80279de:	1c5a      	adds	r2, r3, #1
 80279e0:	9215      	str	r2, [sp, #84]	; 0x54
 80279e2:	785a      	ldrb	r2, [r3, #1]
 80279e4:	3001      	adds	r0, #1
 80279e6:	2a30      	cmp	r2, #48	; 0x30
 80279e8:	d0f8      	beq.n	80279dc <_strtod_l+0x1ec>
 80279ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80279ee:	2b08      	cmp	r3, #8
 80279f0:	f200 84c1 	bhi.w	8028376 <_strtod_l+0xb86>
 80279f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80279f6:	9005      	str	r0, [sp, #20]
 80279f8:	2000      	movs	r0, #0
 80279fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80279fc:	4606      	mov	r6, r0
 80279fe:	3a30      	subs	r2, #48	; 0x30
 8027a00:	f100 0301 	add.w	r3, r0, #1
 8027a04:	d014      	beq.n	8027a30 <_strtod_l+0x240>
 8027a06:	9905      	ldr	r1, [sp, #20]
 8027a08:	4419      	add	r1, r3
 8027a0a:	9105      	str	r1, [sp, #20]
 8027a0c:	4633      	mov	r3, r6
 8027a0e:	eb00 0c06 	add.w	ip, r0, r6
 8027a12:	210a      	movs	r1, #10
 8027a14:	4563      	cmp	r3, ip
 8027a16:	d113      	bne.n	8027a40 <_strtod_l+0x250>
 8027a18:	1833      	adds	r3, r6, r0
 8027a1a:	2b08      	cmp	r3, #8
 8027a1c:	f106 0601 	add.w	r6, r6, #1
 8027a20:	4406      	add	r6, r0
 8027a22:	dc1a      	bgt.n	8027a5a <_strtod_l+0x26a>
 8027a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027a26:	230a      	movs	r3, #10
 8027a28:	fb03 2301 	mla	r3, r3, r1, r2
 8027a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8027a2e:	2300      	movs	r3, #0
 8027a30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027a32:	1c51      	adds	r1, r2, #1
 8027a34:	9115      	str	r1, [sp, #84]	; 0x54
 8027a36:	7852      	ldrb	r2, [r2, #1]
 8027a38:	4618      	mov	r0, r3
 8027a3a:	e7c9      	b.n	80279d0 <_strtod_l+0x1e0>
 8027a3c:	4658      	mov	r0, fp
 8027a3e:	e7d2      	b.n	80279e6 <_strtod_l+0x1f6>
 8027a40:	2b08      	cmp	r3, #8
 8027a42:	f103 0301 	add.w	r3, r3, #1
 8027a46:	dc03      	bgt.n	8027a50 <_strtod_l+0x260>
 8027a48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027a4a:	434f      	muls	r7, r1
 8027a4c:	9709      	str	r7, [sp, #36]	; 0x24
 8027a4e:	e7e1      	b.n	8027a14 <_strtod_l+0x224>
 8027a50:	2b10      	cmp	r3, #16
 8027a52:	bfd8      	it	le
 8027a54:	fb01 fa0a 	mulle.w	sl, r1, sl
 8027a58:	e7dc      	b.n	8027a14 <_strtod_l+0x224>
 8027a5a:	2e10      	cmp	r6, #16
 8027a5c:	bfdc      	itt	le
 8027a5e:	230a      	movle	r3, #10
 8027a60:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8027a64:	e7e3      	b.n	8027a2e <_strtod_l+0x23e>
 8027a66:	2300      	movs	r3, #0
 8027a68:	9305      	str	r3, [sp, #20]
 8027a6a:	2301      	movs	r3, #1
 8027a6c:	e780      	b.n	8027970 <_strtod_l+0x180>
 8027a6e:	f04f 0c00 	mov.w	ip, #0
 8027a72:	1caa      	adds	r2, r5, #2
 8027a74:	9215      	str	r2, [sp, #84]	; 0x54
 8027a76:	78aa      	ldrb	r2, [r5, #2]
 8027a78:	e788      	b.n	802798c <_strtod_l+0x19c>
 8027a7a:	f04f 0c01 	mov.w	ip, #1
 8027a7e:	e7f8      	b.n	8027a72 <_strtod_l+0x282>
 8027a80:	0802a178 	.word	0x0802a178
 8027a84:	0802a174 	.word	0x0802a174
 8027a88:	7ff00000 	.word	0x7ff00000
 8027a8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027a8e:	1c51      	adds	r1, r2, #1
 8027a90:	9115      	str	r1, [sp, #84]	; 0x54
 8027a92:	7852      	ldrb	r2, [r2, #1]
 8027a94:	2a30      	cmp	r2, #48	; 0x30
 8027a96:	d0f9      	beq.n	8027a8c <_strtod_l+0x29c>
 8027a98:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8027a9c:	2908      	cmp	r1, #8
 8027a9e:	f63f af7a 	bhi.w	8027996 <_strtod_l+0x1a6>
 8027aa2:	3a30      	subs	r2, #48	; 0x30
 8027aa4:	9208      	str	r2, [sp, #32]
 8027aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027aa8:	920c      	str	r2, [sp, #48]	; 0x30
 8027aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8027aac:	1c57      	adds	r7, r2, #1
 8027aae:	9715      	str	r7, [sp, #84]	; 0x54
 8027ab0:	7852      	ldrb	r2, [r2, #1]
 8027ab2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8027ab6:	f1be 0f09 	cmp.w	lr, #9
 8027aba:	d938      	bls.n	8027b2e <_strtod_l+0x33e>
 8027abc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027abe:	1a7f      	subs	r7, r7, r1
 8027ac0:	2f08      	cmp	r7, #8
 8027ac2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8027ac6:	dc03      	bgt.n	8027ad0 <_strtod_l+0x2e0>
 8027ac8:	9908      	ldr	r1, [sp, #32]
 8027aca:	428f      	cmp	r7, r1
 8027acc:	bfa8      	it	ge
 8027ace:	460f      	movge	r7, r1
 8027ad0:	f1bc 0f00 	cmp.w	ip, #0
 8027ad4:	d000      	beq.n	8027ad8 <_strtod_l+0x2e8>
 8027ad6:	427f      	negs	r7, r7
 8027ad8:	2e00      	cmp	r6, #0
 8027ada:	d14f      	bne.n	8027b7c <_strtod_l+0x38c>
 8027adc:	9904      	ldr	r1, [sp, #16]
 8027ade:	4301      	orrs	r1, r0
 8027ae0:	f47f aec1 	bne.w	8027866 <_strtod_l+0x76>
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	f47f aedb 	bne.w	80278a0 <_strtod_l+0xb0>
 8027aea:	2a69      	cmp	r2, #105	; 0x69
 8027aec:	d029      	beq.n	8027b42 <_strtod_l+0x352>
 8027aee:	dc26      	bgt.n	8027b3e <_strtod_l+0x34e>
 8027af0:	2a49      	cmp	r2, #73	; 0x49
 8027af2:	d026      	beq.n	8027b42 <_strtod_l+0x352>
 8027af4:	2a4e      	cmp	r2, #78	; 0x4e
 8027af6:	f47f aed3 	bne.w	80278a0 <_strtod_l+0xb0>
 8027afa:	499b      	ldr	r1, [pc, #620]	; (8027d68 <_strtod_l+0x578>)
 8027afc:	a815      	add	r0, sp, #84	; 0x54
 8027afe:	f001 fdbb 	bl	8029678 <__match>
 8027b02:	2800      	cmp	r0, #0
 8027b04:	f43f aecc 	beq.w	80278a0 <_strtod_l+0xb0>
 8027b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027b0a:	781b      	ldrb	r3, [r3, #0]
 8027b0c:	2b28      	cmp	r3, #40	; 0x28
 8027b0e:	d12f      	bne.n	8027b70 <_strtod_l+0x380>
 8027b10:	4996      	ldr	r1, [pc, #600]	; (8027d6c <_strtod_l+0x57c>)
 8027b12:	aa18      	add	r2, sp, #96	; 0x60
 8027b14:	a815      	add	r0, sp, #84	; 0x54
 8027b16:	f001 fdc3 	bl	80296a0 <__hexnan>
 8027b1a:	2805      	cmp	r0, #5
 8027b1c:	d128      	bne.n	8027b70 <_strtod_l+0x380>
 8027b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027b20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8027b24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8027b28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8027b2c:	e69b      	b.n	8027866 <_strtod_l+0x76>
 8027b2e:	9f08      	ldr	r7, [sp, #32]
 8027b30:	210a      	movs	r1, #10
 8027b32:	fb01 2107 	mla	r1, r1, r7, r2
 8027b36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8027b3a:	9208      	str	r2, [sp, #32]
 8027b3c:	e7b5      	b.n	8027aaa <_strtod_l+0x2ba>
 8027b3e:	2a6e      	cmp	r2, #110	; 0x6e
 8027b40:	e7d9      	b.n	8027af6 <_strtod_l+0x306>
 8027b42:	498b      	ldr	r1, [pc, #556]	; (8027d70 <_strtod_l+0x580>)
 8027b44:	a815      	add	r0, sp, #84	; 0x54
 8027b46:	f001 fd97 	bl	8029678 <__match>
 8027b4a:	2800      	cmp	r0, #0
 8027b4c:	f43f aea8 	beq.w	80278a0 <_strtod_l+0xb0>
 8027b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027b52:	4988      	ldr	r1, [pc, #544]	; (8027d74 <_strtod_l+0x584>)
 8027b54:	3b01      	subs	r3, #1
 8027b56:	a815      	add	r0, sp, #84	; 0x54
 8027b58:	9315      	str	r3, [sp, #84]	; 0x54
 8027b5a:	f001 fd8d 	bl	8029678 <__match>
 8027b5e:	b910      	cbnz	r0, 8027b66 <_strtod_l+0x376>
 8027b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027b62:	3301      	adds	r3, #1
 8027b64:	9315      	str	r3, [sp, #84]	; 0x54
 8027b66:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8027d84 <_strtod_l+0x594>
 8027b6a:	f04f 0800 	mov.w	r8, #0
 8027b6e:	e67a      	b.n	8027866 <_strtod_l+0x76>
 8027b70:	4881      	ldr	r0, [pc, #516]	; (8027d78 <_strtod_l+0x588>)
 8027b72:	f001 fa9d 	bl	80290b0 <nan>
 8027b76:	ec59 8b10 	vmov	r8, r9, d0
 8027b7a:	e674      	b.n	8027866 <_strtod_l+0x76>
 8027b7c:	9b05      	ldr	r3, [sp, #20]
 8027b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027b80:	1afb      	subs	r3, r7, r3
 8027b82:	f1bb 0f00 	cmp.w	fp, #0
 8027b86:	bf08      	it	eq
 8027b88:	46b3      	moveq	fp, r6
 8027b8a:	2e10      	cmp	r6, #16
 8027b8c:	9308      	str	r3, [sp, #32]
 8027b8e:	4635      	mov	r5, r6
 8027b90:	bfa8      	it	ge
 8027b92:	2510      	movge	r5, #16
 8027b94:	f7f8 fcbe 	bl	8020514 <__aeabi_ui2d>
 8027b98:	2e09      	cmp	r6, #9
 8027b9a:	4680      	mov	r8, r0
 8027b9c:	4689      	mov	r9, r1
 8027b9e:	dd13      	ble.n	8027bc8 <_strtod_l+0x3d8>
 8027ba0:	4b76      	ldr	r3, [pc, #472]	; (8027d7c <_strtod_l+0x58c>)
 8027ba2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8027ba6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8027baa:	f7f8 fd2d 	bl	8020608 <__aeabi_dmul>
 8027bae:	4680      	mov	r8, r0
 8027bb0:	4650      	mov	r0, sl
 8027bb2:	4689      	mov	r9, r1
 8027bb4:	f7f8 fcae 	bl	8020514 <__aeabi_ui2d>
 8027bb8:	4602      	mov	r2, r0
 8027bba:	460b      	mov	r3, r1
 8027bbc:	4640      	mov	r0, r8
 8027bbe:	4649      	mov	r1, r9
 8027bc0:	f7f8 fb6c 	bl	802029c <__adddf3>
 8027bc4:	4680      	mov	r8, r0
 8027bc6:	4689      	mov	r9, r1
 8027bc8:	2e0f      	cmp	r6, #15
 8027bca:	dc38      	bgt.n	8027c3e <_strtod_l+0x44e>
 8027bcc:	9b08      	ldr	r3, [sp, #32]
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	f43f ae49 	beq.w	8027866 <_strtod_l+0x76>
 8027bd4:	dd24      	ble.n	8027c20 <_strtod_l+0x430>
 8027bd6:	2b16      	cmp	r3, #22
 8027bd8:	dc0b      	bgt.n	8027bf2 <_strtod_l+0x402>
 8027bda:	4968      	ldr	r1, [pc, #416]	; (8027d7c <_strtod_l+0x58c>)
 8027bdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8027be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027be4:	4642      	mov	r2, r8
 8027be6:	464b      	mov	r3, r9
 8027be8:	f7f8 fd0e 	bl	8020608 <__aeabi_dmul>
 8027bec:	4680      	mov	r8, r0
 8027bee:	4689      	mov	r9, r1
 8027bf0:	e639      	b.n	8027866 <_strtod_l+0x76>
 8027bf2:	9a08      	ldr	r2, [sp, #32]
 8027bf4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8027bf8:	4293      	cmp	r3, r2
 8027bfa:	db20      	blt.n	8027c3e <_strtod_l+0x44e>
 8027bfc:	4c5f      	ldr	r4, [pc, #380]	; (8027d7c <_strtod_l+0x58c>)
 8027bfe:	f1c6 060f 	rsb	r6, r6, #15
 8027c02:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8027c06:	4642      	mov	r2, r8
 8027c08:	464b      	mov	r3, r9
 8027c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027c0e:	f7f8 fcfb 	bl	8020608 <__aeabi_dmul>
 8027c12:	9b08      	ldr	r3, [sp, #32]
 8027c14:	1b9e      	subs	r6, r3, r6
 8027c16:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8027c1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8027c1e:	e7e3      	b.n	8027be8 <_strtod_l+0x3f8>
 8027c20:	9b08      	ldr	r3, [sp, #32]
 8027c22:	3316      	adds	r3, #22
 8027c24:	db0b      	blt.n	8027c3e <_strtod_l+0x44e>
 8027c26:	9b05      	ldr	r3, [sp, #20]
 8027c28:	1bdf      	subs	r7, r3, r7
 8027c2a:	4b54      	ldr	r3, [pc, #336]	; (8027d7c <_strtod_l+0x58c>)
 8027c2c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8027c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027c34:	4640      	mov	r0, r8
 8027c36:	4649      	mov	r1, r9
 8027c38:	f7f8 fe10 	bl	802085c <__aeabi_ddiv>
 8027c3c:	e7d6      	b.n	8027bec <_strtod_l+0x3fc>
 8027c3e:	9b08      	ldr	r3, [sp, #32]
 8027c40:	1b75      	subs	r5, r6, r5
 8027c42:	441d      	add	r5, r3
 8027c44:	2d00      	cmp	r5, #0
 8027c46:	dd70      	ble.n	8027d2a <_strtod_l+0x53a>
 8027c48:	f015 030f 	ands.w	r3, r5, #15
 8027c4c:	d00a      	beq.n	8027c64 <_strtod_l+0x474>
 8027c4e:	494b      	ldr	r1, [pc, #300]	; (8027d7c <_strtod_l+0x58c>)
 8027c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8027c54:	4642      	mov	r2, r8
 8027c56:	464b      	mov	r3, r9
 8027c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027c5c:	f7f8 fcd4 	bl	8020608 <__aeabi_dmul>
 8027c60:	4680      	mov	r8, r0
 8027c62:	4689      	mov	r9, r1
 8027c64:	f035 050f 	bics.w	r5, r5, #15
 8027c68:	d04d      	beq.n	8027d06 <_strtod_l+0x516>
 8027c6a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8027c6e:	dd22      	ble.n	8027cb6 <_strtod_l+0x4c6>
 8027c70:	2500      	movs	r5, #0
 8027c72:	46ab      	mov	fp, r5
 8027c74:	9509      	str	r5, [sp, #36]	; 0x24
 8027c76:	9505      	str	r5, [sp, #20]
 8027c78:	2322      	movs	r3, #34	; 0x22
 8027c7a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8027d84 <_strtod_l+0x594>
 8027c7e:	6023      	str	r3, [r4, #0]
 8027c80:	f04f 0800 	mov.w	r8, #0
 8027c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c86:	2b00      	cmp	r3, #0
 8027c88:	f43f aded 	beq.w	8027866 <_strtod_l+0x76>
 8027c8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027c8e:	4620      	mov	r0, r4
 8027c90:	f7ff f924 	bl	8026edc <_Bfree>
 8027c94:	9905      	ldr	r1, [sp, #20]
 8027c96:	4620      	mov	r0, r4
 8027c98:	f7ff f920 	bl	8026edc <_Bfree>
 8027c9c:	4659      	mov	r1, fp
 8027c9e:	4620      	mov	r0, r4
 8027ca0:	f7ff f91c 	bl	8026edc <_Bfree>
 8027ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027ca6:	4620      	mov	r0, r4
 8027ca8:	f7ff f918 	bl	8026edc <_Bfree>
 8027cac:	4629      	mov	r1, r5
 8027cae:	4620      	mov	r0, r4
 8027cb0:	f7ff f914 	bl	8026edc <_Bfree>
 8027cb4:	e5d7      	b.n	8027866 <_strtod_l+0x76>
 8027cb6:	4b32      	ldr	r3, [pc, #200]	; (8027d80 <_strtod_l+0x590>)
 8027cb8:	9304      	str	r3, [sp, #16]
 8027cba:	2300      	movs	r3, #0
 8027cbc:	112d      	asrs	r5, r5, #4
 8027cbe:	4640      	mov	r0, r8
 8027cc0:	4649      	mov	r1, r9
 8027cc2:	469a      	mov	sl, r3
 8027cc4:	2d01      	cmp	r5, #1
 8027cc6:	dc21      	bgt.n	8027d0c <_strtod_l+0x51c>
 8027cc8:	b10b      	cbz	r3, 8027cce <_strtod_l+0x4de>
 8027cca:	4680      	mov	r8, r0
 8027ccc:	4689      	mov	r9, r1
 8027cce:	492c      	ldr	r1, [pc, #176]	; (8027d80 <_strtod_l+0x590>)
 8027cd0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8027cd4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8027cd8:	4642      	mov	r2, r8
 8027cda:	464b      	mov	r3, r9
 8027cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027ce0:	f7f8 fc92 	bl	8020608 <__aeabi_dmul>
 8027ce4:	4b27      	ldr	r3, [pc, #156]	; (8027d84 <_strtod_l+0x594>)
 8027ce6:	460a      	mov	r2, r1
 8027ce8:	400b      	ands	r3, r1
 8027cea:	4927      	ldr	r1, [pc, #156]	; (8027d88 <_strtod_l+0x598>)
 8027cec:	428b      	cmp	r3, r1
 8027cee:	4680      	mov	r8, r0
 8027cf0:	d8be      	bhi.n	8027c70 <_strtod_l+0x480>
 8027cf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8027cf6:	428b      	cmp	r3, r1
 8027cf8:	bf86      	itte	hi
 8027cfa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8027d8c <_strtod_l+0x59c>
 8027cfe:	f04f 38ff 	movhi.w	r8, #4294967295
 8027d02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8027d06:	2300      	movs	r3, #0
 8027d08:	9304      	str	r3, [sp, #16]
 8027d0a:	e07b      	b.n	8027e04 <_strtod_l+0x614>
 8027d0c:	07ea      	lsls	r2, r5, #31
 8027d0e:	d505      	bpl.n	8027d1c <_strtod_l+0x52c>
 8027d10:	9b04      	ldr	r3, [sp, #16]
 8027d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d16:	f7f8 fc77 	bl	8020608 <__aeabi_dmul>
 8027d1a:	2301      	movs	r3, #1
 8027d1c:	9a04      	ldr	r2, [sp, #16]
 8027d1e:	3208      	adds	r2, #8
 8027d20:	f10a 0a01 	add.w	sl, sl, #1
 8027d24:	106d      	asrs	r5, r5, #1
 8027d26:	9204      	str	r2, [sp, #16]
 8027d28:	e7cc      	b.n	8027cc4 <_strtod_l+0x4d4>
 8027d2a:	d0ec      	beq.n	8027d06 <_strtod_l+0x516>
 8027d2c:	426d      	negs	r5, r5
 8027d2e:	f015 020f 	ands.w	r2, r5, #15
 8027d32:	d00a      	beq.n	8027d4a <_strtod_l+0x55a>
 8027d34:	4b11      	ldr	r3, [pc, #68]	; (8027d7c <_strtod_l+0x58c>)
 8027d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027d3a:	4640      	mov	r0, r8
 8027d3c:	4649      	mov	r1, r9
 8027d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d42:	f7f8 fd8b 	bl	802085c <__aeabi_ddiv>
 8027d46:	4680      	mov	r8, r0
 8027d48:	4689      	mov	r9, r1
 8027d4a:	112d      	asrs	r5, r5, #4
 8027d4c:	d0db      	beq.n	8027d06 <_strtod_l+0x516>
 8027d4e:	2d1f      	cmp	r5, #31
 8027d50:	dd1e      	ble.n	8027d90 <_strtod_l+0x5a0>
 8027d52:	2500      	movs	r5, #0
 8027d54:	46ab      	mov	fp, r5
 8027d56:	9509      	str	r5, [sp, #36]	; 0x24
 8027d58:	9505      	str	r5, [sp, #20]
 8027d5a:	2322      	movs	r3, #34	; 0x22
 8027d5c:	f04f 0800 	mov.w	r8, #0
 8027d60:	f04f 0900 	mov.w	r9, #0
 8027d64:	6023      	str	r3, [r4, #0]
 8027d66:	e78d      	b.n	8027c84 <_strtod_l+0x494>
 8027d68:	08029f61 	.word	0x08029f61
 8027d6c:	0802a18c 	.word	0x0802a18c
 8027d70:	08029f59 	.word	0x08029f59
 8027d74:	08029f8e 	.word	0x08029f8e
 8027d78:	0802a338 	.word	0x0802a338
 8027d7c:	0802a0a0 	.word	0x0802a0a0
 8027d80:	0802a078 	.word	0x0802a078
 8027d84:	7ff00000 	.word	0x7ff00000
 8027d88:	7ca00000 	.word	0x7ca00000
 8027d8c:	7fefffff 	.word	0x7fefffff
 8027d90:	f015 0310 	ands.w	r3, r5, #16
 8027d94:	bf18      	it	ne
 8027d96:	236a      	movne	r3, #106	; 0x6a
 8027d98:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802813c <_strtod_l+0x94c>
 8027d9c:	9304      	str	r3, [sp, #16]
 8027d9e:	4640      	mov	r0, r8
 8027da0:	4649      	mov	r1, r9
 8027da2:	2300      	movs	r3, #0
 8027da4:	07ea      	lsls	r2, r5, #31
 8027da6:	d504      	bpl.n	8027db2 <_strtod_l+0x5c2>
 8027da8:	e9da 2300 	ldrd	r2, r3, [sl]
 8027dac:	f7f8 fc2c 	bl	8020608 <__aeabi_dmul>
 8027db0:	2301      	movs	r3, #1
 8027db2:	106d      	asrs	r5, r5, #1
 8027db4:	f10a 0a08 	add.w	sl, sl, #8
 8027db8:	d1f4      	bne.n	8027da4 <_strtod_l+0x5b4>
 8027dba:	b10b      	cbz	r3, 8027dc0 <_strtod_l+0x5d0>
 8027dbc:	4680      	mov	r8, r0
 8027dbe:	4689      	mov	r9, r1
 8027dc0:	9b04      	ldr	r3, [sp, #16]
 8027dc2:	b1bb      	cbz	r3, 8027df4 <_strtod_l+0x604>
 8027dc4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8027dc8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8027dcc:	2b00      	cmp	r3, #0
 8027dce:	4649      	mov	r1, r9
 8027dd0:	dd10      	ble.n	8027df4 <_strtod_l+0x604>
 8027dd2:	2b1f      	cmp	r3, #31
 8027dd4:	f340 811e 	ble.w	8028014 <_strtod_l+0x824>
 8027dd8:	2b34      	cmp	r3, #52	; 0x34
 8027dda:	bfde      	ittt	le
 8027ddc:	f04f 33ff 	movle.w	r3, #4294967295
 8027de0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8027de4:	4093      	lslle	r3, r2
 8027de6:	f04f 0800 	mov.w	r8, #0
 8027dea:	bfcc      	ite	gt
 8027dec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8027df0:	ea03 0901 	andle.w	r9, r3, r1
 8027df4:	2200      	movs	r2, #0
 8027df6:	2300      	movs	r3, #0
 8027df8:	4640      	mov	r0, r8
 8027dfa:	4649      	mov	r1, r9
 8027dfc:	f7f8 fe6c 	bl	8020ad8 <__aeabi_dcmpeq>
 8027e00:	2800      	cmp	r0, #0
 8027e02:	d1a6      	bne.n	8027d52 <_strtod_l+0x562>
 8027e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e06:	9300      	str	r3, [sp, #0]
 8027e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027e0a:	4633      	mov	r3, r6
 8027e0c:	465a      	mov	r2, fp
 8027e0e:	4620      	mov	r0, r4
 8027e10:	f7ff f8cc 	bl	8026fac <__s2b>
 8027e14:	9009      	str	r0, [sp, #36]	; 0x24
 8027e16:	2800      	cmp	r0, #0
 8027e18:	f43f af2a 	beq.w	8027c70 <_strtod_l+0x480>
 8027e1c:	9a08      	ldr	r2, [sp, #32]
 8027e1e:	9b05      	ldr	r3, [sp, #20]
 8027e20:	2a00      	cmp	r2, #0
 8027e22:	eba3 0307 	sub.w	r3, r3, r7
 8027e26:	bfa8      	it	ge
 8027e28:	2300      	movge	r3, #0
 8027e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8027e2c:	2500      	movs	r5, #0
 8027e2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8027e32:	9312      	str	r3, [sp, #72]	; 0x48
 8027e34:	46ab      	mov	fp, r5
 8027e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e38:	4620      	mov	r0, r4
 8027e3a:	6859      	ldr	r1, [r3, #4]
 8027e3c:	f7ff f80e 	bl	8026e5c <_Balloc>
 8027e40:	9005      	str	r0, [sp, #20]
 8027e42:	2800      	cmp	r0, #0
 8027e44:	f43f af18 	beq.w	8027c78 <_strtod_l+0x488>
 8027e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e4a:	691a      	ldr	r2, [r3, #16]
 8027e4c:	3202      	adds	r2, #2
 8027e4e:	f103 010c 	add.w	r1, r3, #12
 8027e52:	0092      	lsls	r2, r2, #2
 8027e54:	300c      	adds	r0, #12
 8027e56:	f001 f91b 	bl	8029090 <memcpy>
 8027e5a:	ec49 8b10 	vmov	d0, r8, r9
 8027e5e:	aa18      	add	r2, sp, #96	; 0x60
 8027e60:	a917      	add	r1, sp, #92	; 0x5c
 8027e62:	4620      	mov	r0, r4
 8027e64:	f7ff fbd6 	bl	8027614 <__d2b>
 8027e68:	ec49 8b18 	vmov	d8, r8, r9
 8027e6c:	9016      	str	r0, [sp, #88]	; 0x58
 8027e6e:	2800      	cmp	r0, #0
 8027e70:	f43f af02 	beq.w	8027c78 <_strtod_l+0x488>
 8027e74:	2101      	movs	r1, #1
 8027e76:	4620      	mov	r0, r4
 8027e78:	f7ff f930 	bl	80270dc <__i2b>
 8027e7c:	4683      	mov	fp, r0
 8027e7e:	2800      	cmp	r0, #0
 8027e80:	f43f aefa 	beq.w	8027c78 <_strtod_l+0x488>
 8027e84:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8027e86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027e88:	2e00      	cmp	r6, #0
 8027e8a:	bfab      	itete	ge
 8027e8c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8027e8e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8027e90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8027e92:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8027e96:	bfac      	ite	ge
 8027e98:	eb06 0a03 	addge.w	sl, r6, r3
 8027e9c:	1b9f      	sublt	r7, r3, r6
 8027e9e:	9b04      	ldr	r3, [sp, #16]
 8027ea0:	1af6      	subs	r6, r6, r3
 8027ea2:	4416      	add	r6, r2
 8027ea4:	4ba0      	ldr	r3, [pc, #640]	; (8028128 <_strtod_l+0x938>)
 8027ea6:	3e01      	subs	r6, #1
 8027ea8:	429e      	cmp	r6, r3
 8027eaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8027eae:	f280 80c4 	bge.w	802803a <_strtod_l+0x84a>
 8027eb2:	1b9b      	subs	r3, r3, r6
 8027eb4:	2b1f      	cmp	r3, #31
 8027eb6:	eba2 0203 	sub.w	r2, r2, r3
 8027eba:	f04f 0101 	mov.w	r1, #1
 8027ebe:	f300 80b0 	bgt.w	8028022 <_strtod_l+0x832>
 8027ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8027ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8027ec8:	2300      	movs	r3, #0
 8027eca:	930d      	str	r3, [sp, #52]	; 0x34
 8027ecc:	eb0a 0602 	add.w	r6, sl, r2
 8027ed0:	9b04      	ldr	r3, [sp, #16]
 8027ed2:	45b2      	cmp	sl, r6
 8027ed4:	4417      	add	r7, r2
 8027ed6:	441f      	add	r7, r3
 8027ed8:	4653      	mov	r3, sl
 8027eda:	bfa8      	it	ge
 8027edc:	4633      	movge	r3, r6
 8027ede:	42bb      	cmp	r3, r7
 8027ee0:	bfa8      	it	ge
 8027ee2:	463b      	movge	r3, r7
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	bfc2      	ittt	gt
 8027ee8:	1af6      	subgt	r6, r6, r3
 8027eea:	1aff      	subgt	r7, r7, r3
 8027eec:	ebaa 0a03 	subgt.w	sl, sl, r3
 8027ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	dd17      	ble.n	8027f26 <_strtod_l+0x736>
 8027ef6:	4659      	mov	r1, fp
 8027ef8:	461a      	mov	r2, r3
 8027efa:	4620      	mov	r0, r4
 8027efc:	f7ff f9ae 	bl	802725c <__pow5mult>
 8027f00:	4683      	mov	fp, r0
 8027f02:	2800      	cmp	r0, #0
 8027f04:	f43f aeb8 	beq.w	8027c78 <_strtod_l+0x488>
 8027f08:	4601      	mov	r1, r0
 8027f0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8027f0c:	4620      	mov	r0, r4
 8027f0e:	f7ff f8fb 	bl	8027108 <__multiply>
 8027f12:	900b      	str	r0, [sp, #44]	; 0x2c
 8027f14:	2800      	cmp	r0, #0
 8027f16:	f43f aeaf 	beq.w	8027c78 <_strtod_l+0x488>
 8027f1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027f1c:	4620      	mov	r0, r4
 8027f1e:	f7fe ffdd 	bl	8026edc <_Bfree>
 8027f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027f24:	9316      	str	r3, [sp, #88]	; 0x58
 8027f26:	2e00      	cmp	r6, #0
 8027f28:	f300 808c 	bgt.w	8028044 <_strtod_l+0x854>
 8027f2c:	9b08      	ldr	r3, [sp, #32]
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	dd08      	ble.n	8027f44 <_strtod_l+0x754>
 8027f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027f34:	9905      	ldr	r1, [sp, #20]
 8027f36:	4620      	mov	r0, r4
 8027f38:	f7ff f990 	bl	802725c <__pow5mult>
 8027f3c:	9005      	str	r0, [sp, #20]
 8027f3e:	2800      	cmp	r0, #0
 8027f40:	f43f ae9a 	beq.w	8027c78 <_strtod_l+0x488>
 8027f44:	2f00      	cmp	r7, #0
 8027f46:	dd08      	ble.n	8027f5a <_strtod_l+0x76a>
 8027f48:	9905      	ldr	r1, [sp, #20]
 8027f4a:	463a      	mov	r2, r7
 8027f4c:	4620      	mov	r0, r4
 8027f4e:	f7ff f9df 	bl	8027310 <__lshift>
 8027f52:	9005      	str	r0, [sp, #20]
 8027f54:	2800      	cmp	r0, #0
 8027f56:	f43f ae8f 	beq.w	8027c78 <_strtod_l+0x488>
 8027f5a:	f1ba 0f00 	cmp.w	sl, #0
 8027f5e:	dd08      	ble.n	8027f72 <_strtod_l+0x782>
 8027f60:	4659      	mov	r1, fp
 8027f62:	4652      	mov	r2, sl
 8027f64:	4620      	mov	r0, r4
 8027f66:	f7ff f9d3 	bl	8027310 <__lshift>
 8027f6a:	4683      	mov	fp, r0
 8027f6c:	2800      	cmp	r0, #0
 8027f6e:	f43f ae83 	beq.w	8027c78 <_strtod_l+0x488>
 8027f72:	9a05      	ldr	r2, [sp, #20]
 8027f74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027f76:	4620      	mov	r0, r4
 8027f78:	f7ff fa52 	bl	8027420 <__mdiff>
 8027f7c:	4605      	mov	r5, r0
 8027f7e:	2800      	cmp	r0, #0
 8027f80:	f43f ae7a 	beq.w	8027c78 <_strtod_l+0x488>
 8027f84:	68c3      	ldr	r3, [r0, #12]
 8027f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8027f88:	2300      	movs	r3, #0
 8027f8a:	60c3      	str	r3, [r0, #12]
 8027f8c:	4659      	mov	r1, fp
 8027f8e:	f7ff fa2b 	bl	80273e8 <__mcmp>
 8027f92:	2800      	cmp	r0, #0
 8027f94:	da60      	bge.n	8028058 <_strtod_l+0x868>
 8027f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027f98:	ea53 0308 	orrs.w	r3, r3, r8
 8027f9c:	f040 8084 	bne.w	80280a8 <_strtod_l+0x8b8>
 8027fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	d17f      	bne.n	80280a8 <_strtod_l+0x8b8>
 8027fa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027fac:	0d1b      	lsrs	r3, r3, #20
 8027fae:	051b      	lsls	r3, r3, #20
 8027fb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8027fb4:	d978      	bls.n	80280a8 <_strtod_l+0x8b8>
 8027fb6:	696b      	ldr	r3, [r5, #20]
 8027fb8:	b913      	cbnz	r3, 8027fc0 <_strtod_l+0x7d0>
 8027fba:	692b      	ldr	r3, [r5, #16]
 8027fbc:	2b01      	cmp	r3, #1
 8027fbe:	dd73      	ble.n	80280a8 <_strtod_l+0x8b8>
 8027fc0:	4629      	mov	r1, r5
 8027fc2:	2201      	movs	r2, #1
 8027fc4:	4620      	mov	r0, r4
 8027fc6:	f7ff f9a3 	bl	8027310 <__lshift>
 8027fca:	4659      	mov	r1, fp
 8027fcc:	4605      	mov	r5, r0
 8027fce:	f7ff fa0b 	bl	80273e8 <__mcmp>
 8027fd2:	2800      	cmp	r0, #0
 8027fd4:	dd68      	ble.n	80280a8 <_strtod_l+0x8b8>
 8027fd6:	9904      	ldr	r1, [sp, #16]
 8027fd8:	4a54      	ldr	r2, [pc, #336]	; (802812c <_strtod_l+0x93c>)
 8027fda:	464b      	mov	r3, r9
 8027fdc:	2900      	cmp	r1, #0
 8027fde:	f000 8084 	beq.w	80280ea <_strtod_l+0x8fa>
 8027fe2:	ea02 0109 	and.w	r1, r2, r9
 8027fe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8027fea:	dc7e      	bgt.n	80280ea <_strtod_l+0x8fa>
 8027fec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8027ff0:	f77f aeb3 	ble.w	8027d5a <_strtod_l+0x56a>
 8027ff4:	4b4e      	ldr	r3, [pc, #312]	; (8028130 <_strtod_l+0x940>)
 8027ff6:	4640      	mov	r0, r8
 8027ff8:	4649      	mov	r1, r9
 8027ffa:	2200      	movs	r2, #0
 8027ffc:	f7f8 fb04 	bl	8020608 <__aeabi_dmul>
 8028000:	4b4a      	ldr	r3, [pc, #296]	; (802812c <_strtod_l+0x93c>)
 8028002:	400b      	ands	r3, r1
 8028004:	4680      	mov	r8, r0
 8028006:	4689      	mov	r9, r1
 8028008:	2b00      	cmp	r3, #0
 802800a:	f47f ae3f 	bne.w	8027c8c <_strtod_l+0x49c>
 802800e:	2322      	movs	r3, #34	; 0x22
 8028010:	6023      	str	r3, [r4, #0]
 8028012:	e63b      	b.n	8027c8c <_strtod_l+0x49c>
 8028014:	f04f 32ff 	mov.w	r2, #4294967295
 8028018:	fa02 f303 	lsl.w	r3, r2, r3
 802801c:	ea03 0808 	and.w	r8, r3, r8
 8028020:	e6e8      	b.n	8027df4 <_strtod_l+0x604>
 8028022:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8028026:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802802a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802802e:	36e2      	adds	r6, #226	; 0xe2
 8028030:	fa01 f306 	lsl.w	r3, r1, r6
 8028034:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8028038:	e748      	b.n	8027ecc <_strtod_l+0x6dc>
 802803a:	2100      	movs	r1, #0
 802803c:	2301      	movs	r3, #1
 802803e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8028042:	e743      	b.n	8027ecc <_strtod_l+0x6dc>
 8028044:	9916      	ldr	r1, [sp, #88]	; 0x58
 8028046:	4632      	mov	r2, r6
 8028048:	4620      	mov	r0, r4
 802804a:	f7ff f961 	bl	8027310 <__lshift>
 802804e:	9016      	str	r0, [sp, #88]	; 0x58
 8028050:	2800      	cmp	r0, #0
 8028052:	f47f af6b 	bne.w	8027f2c <_strtod_l+0x73c>
 8028056:	e60f      	b.n	8027c78 <_strtod_l+0x488>
 8028058:	46ca      	mov	sl, r9
 802805a:	d171      	bne.n	8028140 <_strtod_l+0x950>
 802805c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802805e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028062:	b352      	cbz	r2, 80280ba <_strtod_l+0x8ca>
 8028064:	4a33      	ldr	r2, [pc, #204]	; (8028134 <_strtod_l+0x944>)
 8028066:	4293      	cmp	r3, r2
 8028068:	d12a      	bne.n	80280c0 <_strtod_l+0x8d0>
 802806a:	9b04      	ldr	r3, [sp, #16]
 802806c:	4641      	mov	r1, r8
 802806e:	b1fb      	cbz	r3, 80280b0 <_strtod_l+0x8c0>
 8028070:	4b2e      	ldr	r3, [pc, #184]	; (802812c <_strtod_l+0x93c>)
 8028072:	ea09 0303 	and.w	r3, r9, r3
 8028076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802807a:	f04f 32ff 	mov.w	r2, #4294967295
 802807e:	d81a      	bhi.n	80280b6 <_strtod_l+0x8c6>
 8028080:	0d1b      	lsrs	r3, r3, #20
 8028082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028086:	fa02 f303 	lsl.w	r3, r2, r3
 802808a:	4299      	cmp	r1, r3
 802808c:	d118      	bne.n	80280c0 <_strtod_l+0x8d0>
 802808e:	4b2a      	ldr	r3, [pc, #168]	; (8028138 <_strtod_l+0x948>)
 8028090:	459a      	cmp	sl, r3
 8028092:	d102      	bne.n	802809a <_strtod_l+0x8aa>
 8028094:	3101      	adds	r1, #1
 8028096:	f43f adef 	beq.w	8027c78 <_strtod_l+0x488>
 802809a:	4b24      	ldr	r3, [pc, #144]	; (802812c <_strtod_l+0x93c>)
 802809c:	ea0a 0303 	and.w	r3, sl, r3
 80280a0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80280a4:	f04f 0800 	mov.w	r8, #0
 80280a8:	9b04      	ldr	r3, [sp, #16]
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	d1a2      	bne.n	8027ff4 <_strtod_l+0x804>
 80280ae:	e5ed      	b.n	8027c8c <_strtod_l+0x49c>
 80280b0:	f04f 33ff 	mov.w	r3, #4294967295
 80280b4:	e7e9      	b.n	802808a <_strtod_l+0x89a>
 80280b6:	4613      	mov	r3, r2
 80280b8:	e7e7      	b.n	802808a <_strtod_l+0x89a>
 80280ba:	ea53 0308 	orrs.w	r3, r3, r8
 80280be:	d08a      	beq.n	8027fd6 <_strtod_l+0x7e6>
 80280c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80280c2:	b1e3      	cbz	r3, 80280fe <_strtod_l+0x90e>
 80280c4:	ea13 0f0a 	tst.w	r3, sl
 80280c8:	d0ee      	beq.n	80280a8 <_strtod_l+0x8b8>
 80280ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80280cc:	9a04      	ldr	r2, [sp, #16]
 80280ce:	4640      	mov	r0, r8
 80280d0:	4649      	mov	r1, r9
 80280d2:	b1c3      	cbz	r3, 8028106 <_strtod_l+0x916>
 80280d4:	f7ff fb6f 	bl	80277b6 <sulp>
 80280d8:	4602      	mov	r2, r0
 80280da:	460b      	mov	r3, r1
 80280dc:	ec51 0b18 	vmov	r0, r1, d8
 80280e0:	f7f8 f8dc 	bl	802029c <__adddf3>
 80280e4:	4680      	mov	r8, r0
 80280e6:	4689      	mov	r9, r1
 80280e8:	e7de      	b.n	80280a8 <_strtod_l+0x8b8>
 80280ea:	4013      	ands	r3, r2
 80280ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80280f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80280f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80280f8:	f04f 38ff 	mov.w	r8, #4294967295
 80280fc:	e7d4      	b.n	80280a8 <_strtod_l+0x8b8>
 80280fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028100:	ea13 0f08 	tst.w	r3, r8
 8028104:	e7e0      	b.n	80280c8 <_strtod_l+0x8d8>
 8028106:	f7ff fb56 	bl	80277b6 <sulp>
 802810a:	4602      	mov	r2, r0
 802810c:	460b      	mov	r3, r1
 802810e:	ec51 0b18 	vmov	r0, r1, d8
 8028112:	f7f8 f8c1 	bl	8020298 <__aeabi_dsub>
 8028116:	2200      	movs	r2, #0
 8028118:	2300      	movs	r3, #0
 802811a:	4680      	mov	r8, r0
 802811c:	4689      	mov	r9, r1
 802811e:	f7f8 fcdb 	bl	8020ad8 <__aeabi_dcmpeq>
 8028122:	2800      	cmp	r0, #0
 8028124:	d0c0      	beq.n	80280a8 <_strtod_l+0x8b8>
 8028126:	e618      	b.n	8027d5a <_strtod_l+0x56a>
 8028128:	fffffc02 	.word	0xfffffc02
 802812c:	7ff00000 	.word	0x7ff00000
 8028130:	39500000 	.word	0x39500000
 8028134:	000fffff 	.word	0x000fffff
 8028138:	7fefffff 	.word	0x7fefffff
 802813c:	0802a1a0 	.word	0x0802a1a0
 8028140:	4659      	mov	r1, fp
 8028142:	4628      	mov	r0, r5
 8028144:	f7ff fac0 	bl	80276c8 <__ratio>
 8028148:	ec57 6b10 	vmov	r6, r7, d0
 802814c:	ee10 0a10 	vmov	r0, s0
 8028150:	2200      	movs	r2, #0
 8028152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028156:	4639      	mov	r1, r7
 8028158:	f7f8 fcd2 	bl	8020b00 <__aeabi_dcmple>
 802815c:	2800      	cmp	r0, #0
 802815e:	d071      	beq.n	8028244 <_strtod_l+0xa54>
 8028160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028162:	2b00      	cmp	r3, #0
 8028164:	d17c      	bne.n	8028260 <_strtod_l+0xa70>
 8028166:	f1b8 0f00 	cmp.w	r8, #0
 802816a:	d15a      	bne.n	8028222 <_strtod_l+0xa32>
 802816c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028170:	2b00      	cmp	r3, #0
 8028172:	d15d      	bne.n	8028230 <_strtod_l+0xa40>
 8028174:	4b90      	ldr	r3, [pc, #576]	; (80283b8 <_strtod_l+0xbc8>)
 8028176:	2200      	movs	r2, #0
 8028178:	4630      	mov	r0, r6
 802817a:	4639      	mov	r1, r7
 802817c:	f7f8 fcb6 	bl	8020aec <__aeabi_dcmplt>
 8028180:	2800      	cmp	r0, #0
 8028182:	d15c      	bne.n	802823e <_strtod_l+0xa4e>
 8028184:	4630      	mov	r0, r6
 8028186:	4639      	mov	r1, r7
 8028188:	4b8c      	ldr	r3, [pc, #560]	; (80283bc <_strtod_l+0xbcc>)
 802818a:	2200      	movs	r2, #0
 802818c:	f7f8 fa3c 	bl	8020608 <__aeabi_dmul>
 8028190:	4606      	mov	r6, r0
 8028192:	460f      	mov	r7, r1
 8028194:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8028198:	9606      	str	r6, [sp, #24]
 802819a:	9307      	str	r3, [sp, #28]
 802819c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80281a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80281a4:	4b86      	ldr	r3, [pc, #536]	; (80283c0 <_strtod_l+0xbd0>)
 80281a6:	ea0a 0303 	and.w	r3, sl, r3
 80281aa:	930d      	str	r3, [sp, #52]	; 0x34
 80281ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80281ae:	4b85      	ldr	r3, [pc, #532]	; (80283c4 <_strtod_l+0xbd4>)
 80281b0:	429a      	cmp	r2, r3
 80281b2:	f040 8090 	bne.w	80282d6 <_strtod_l+0xae6>
 80281b6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80281ba:	ec49 8b10 	vmov	d0, r8, r9
 80281be:	f7ff f9b9 	bl	8027534 <__ulp>
 80281c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80281c6:	ec51 0b10 	vmov	r0, r1, d0
 80281ca:	f7f8 fa1d 	bl	8020608 <__aeabi_dmul>
 80281ce:	4642      	mov	r2, r8
 80281d0:	464b      	mov	r3, r9
 80281d2:	f7f8 f863 	bl	802029c <__adddf3>
 80281d6:	460b      	mov	r3, r1
 80281d8:	4979      	ldr	r1, [pc, #484]	; (80283c0 <_strtod_l+0xbd0>)
 80281da:	4a7b      	ldr	r2, [pc, #492]	; (80283c8 <_strtod_l+0xbd8>)
 80281dc:	4019      	ands	r1, r3
 80281de:	4291      	cmp	r1, r2
 80281e0:	4680      	mov	r8, r0
 80281e2:	d944      	bls.n	802826e <_strtod_l+0xa7e>
 80281e4:	ee18 2a90 	vmov	r2, s17
 80281e8:	4b78      	ldr	r3, [pc, #480]	; (80283cc <_strtod_l+0xbdc>)
 80281ea:	429a      	cmp	r2, r3
 80281ec:	d104      	bne.n	80281f8 <_strtod_l+0xa08>
 80281ee:	ee18 3a10 	vmov	r3, s16
 80281f2:	3301      	adds	r3, #1
 80281f4:	f43f ad40 	beq.w	8027c78 <_strtod_l+0x488>
 80281f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80283cc <_strtod_l+0xbdc>
 80281fc:	f04f 38ff 	mov.w	r8, #4294967295
 8028200:	9916      	ldr	r1, [sp, #88]	; 0x58
 8028202:	4620      	mov	r0, r4
 8028204:	f7fe fe6a 	bl	8026edc <_Bfree>
 8028208:	9905      	ldr	r1, [sp, #20]
 802820a:	4620      	mov	r0, r4
 802820c:	f7fe fe66 	bl	8026edc <_Bfree>
 8028210:	4659      	mov	r1, fp
 8028212:	4620      	mov	r0, r4
 8028214:	f7fe fe62 	bl	8026edc <_Bfree>
 8028218:	4629      	mov	r1, r5
 802821a:	4620      	mov	r0, r4
 802821c:	f7fe fe5e 	bl	8026edc <_Bfree>
 8028220:	e609      	b.n	8027e36 <_strtod_l+0x646>
 8028222:	f1b8 0f01 	cmp.w	r8, #1
 8028226:	d103      	bne.n	8028230 <_strtod_l+0xa40>
 8028228:	f1b9 0f00 	cmp.w	r9, #0
 802822c:	f43f ad95 	beq.w	8027d5a <_strtod_l+0x56a>
 8028230:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8028388 <_strtod_l+0xb98>
 8028234:	4f60      	ldr	r7, [pc, #384]	; (80283b8 <_strtod_l+0xbc8>)
 8028236:	ed8d 7b06 	vstr	d7, [sp, #24]
 802823a:	2600      	movs	r6, #0
 802823c:	e7ae      	b.n	802819c <_strtod_l+0x9ac>
 802823e:	4f5f      	ldr	r7, [pc, #380]	; (80283bc <_strtod_l+0xbcc>)
 8028240:	2600      	movs	r6, #0
 8028242:	e7a7      	b.n	8028194 <_strtod_l+0x9a4>
 8028244:	4b5d      	ldr	r3, [pc, #372]	; (80283bc <_strtod_l+0xbcc>)
 8028246:	4630      	mov	r0, r6
 8028248:	4639      	mov	r1, r7
 802824a:	2200      	movs	r2, #0
 802824c:	f7f8 f9dc 	bl	8020608 <__aeabi_dmul>
 8028250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028252:	4606      	mov	r6, r0
 8028254:	460f      	mov	r7, r1
 8028256:	2b00      	cmp	r3, #0
 8028258:	d09c      	beq.n	8028194 <_strtod_l+0x9a4>
 802825a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802825e:	e79d      	b.n	802819c <_strtod_l+0x9ac>
 8028260:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8028390 <_strtod_l+0xba0>
 8028264:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028268:	ec57 6b17 	vmov	r6, r7, d7
 802826c:	e796      	b.n	802819c <_strtod_l+0x9ac>
 802826e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8028272:	9b04      	ldr	r3, [sp, #16]
 8028274:	46ca      	mov	sl, r9
 8028276:	2b00      	cmp	r3, #0
 8028278:	d1c2      	bne.n	8028200 <_strtod_l+0xa10>
 802827a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802827e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028280:	0d1b      	lsrs	r3, r3, #20
 8028282:	051b      	lsls	r3, r3, #20
 8028284:	429a      	cmp	r2, r3
 8028286:	d1bb      	bne.n	8028200 <_strtod_l+0xa10>
 8028288:	4630      	mov	r0, r6
 802828a:	4639      	mov	r1, r7
 802828c:	f7f8 fd1c 	bl	8020cc8 <__aeabi_d2lz>
 8028290:	f7f8 f98c 	bl	80205ac <__aeabi_l2d>
 8028294:	4602      	mov	r2, r0
 8028296:	460b      	mov	r3, r1
 8028298:	4630      	mov	r0, r6
 802829a:	4639      	mov	r1, r7
 802829c:	f7f7 fffc 	bl	8020298 <__aeabi_dsub>
 80282a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80282a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80282a6:	ea43 0308 	orr.w	r3, r3, r8
 80282aa:	4313      	orrs	r3, r2
 80282ac:	4606      	mov	r6, r0
 80282ae:	460f      	mov	r7, r1
 80282b0:	d054      	beq.n	802835c <_strtod_l+0xb6c>
 80282b2:	a339      	add	r3, pc, #228	; (adr r3, 8028398 <_strtod_l+0xba8>)
 80282b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282b8:	f7f8 fc18 	bl	8020aec <__aeabi_dcmplt>
 80282bc:	2800      	cmp	r0, #0
 80282be:	f47f ace5 	bne.w	8027c8c <_strtod_l+0x49c>
 80282c2:	a337      	add	r3, pc, #220	; (adr r3, 80283a0 <_strtod_l+0xbb0>)
 80282c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282c8:	4630      	mov	r0, r6
 80282ca:	4639      	mov	r1, r7
 80282cc:	f7f8 fc2c 	bl	8020b28 <__aeabi_dcmpgt>
 80282d0:	2800      	cmp	r0, #0
 80282d2:	d095      	beq.n	8028200 <_strtod_l+0xa10>
 80282d4:	e4da      	b.n	8027c8c <_strtod_l+0x49c>
 80282d6:	9b04      	ldr	r3, [sp, #16]
 80282d8:	b333      	cbz	r3, 8028328 <_strtod_l+0xb38>
 80282da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80282dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80282e0:	d822      	bhi.n	8028328 <_strtod_l+0xb38>
 80282e2:	a331      	add	r3, pc, #196	; (adr r3, 80283a8 <_strtod_l+0xbb8>)
 80282e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282e8:	4630      	mov	r0, r6
 80282ea:	4639      	mov	r1, r7
 80282ec:	f7f8 fc08 	bl	8020b00 <__aeabi_dcmple>
 80282f0:	b1a0      	cbz	r0, 802831c <_strtod_l+0xb2c>
 80282f2:	4639      	mov	r1, r7
 80282f4:	4630      	mov	r0, r6
 80282f6:	f7f8 fc5f 	bl	8020bb8 <__aeabi_d2uiz>
 80282fa:	2801      	cmp	r0, #1
 80282fc:	bf38      	it	cc
 80282fe:	2001      	movcc	r0, #1
 8028300:	f7f8 f908 	bl	8020514 <__aeabi_ui2d>
 8028304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028306:	4606      	mov	r6, r0
 8028308:	460f      	mov	r7, r1
 802830a:	bb23      	cbnz	r3, 8028356 <_strtod_l+0xb66>
 802830c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028310:	9010      	str	r0, [sp, #64]	; 0x40
 8028312:	9311      	str	r3, [sp, #68]	; 0x44
 8028314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8028318:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802831c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802831e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028320:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8028324:	1a9b      	subs	r3, r3, r2
 8028326:	930f      	str	r3, [sp, #60]	; 0x3c
 8028328:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802832c:	eeb0 0a48 	vmov.f32	s0, s16
 8028330:	eef0 0a68 	vmov.f32	s1, s17
 8028334:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8028338:	f7ff f8fc 	bl	8027534 <__ulp>
 802833c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8028340:	ec53 2b10 	vmov	r2, r3, d0
 8028344:	f7f8 f960 	bl	8020608 <__aeabi_dmul>
 8028348:	ec53 2b18 	vmov	r2, r3, d8
 802834c:	f7f7 ffa6 	bl	802029c <__adddf3>
 8028350:	4680      	mov	r8, r0
 8028352:	4689      	mov	r9, r1
 8028354:	e78d      	b.n	8028272 <_strtod_l+0xa82>
 8028356:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802835a:	e7db      	b.n	8028314 <_strtod_l+0xb24>
 802835c:	a314      	add	r3, pc, #80	; (adr r3, 80283b0 <_strtod_l+0xbc0>)
 802835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028362:	f7f8 fbc3 	bl	8020aec <__aeabi_dcmplt>
 8028366:	e7b3      	b.n	80282d0 <_strtod_l+0xae0>
 8028368:	2300      	movs	r3, #0
 802836a:	930a      	str	r3, [sp, #40]	; 0x28
 802836c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802836e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028370:	6013      	str	r3, [r2, #0]
 8028372:	f7ff ba7c 	b.w	802786e <_strtod_l+0x7e>
 8028376:	2a65      	cmp	r2, #101	; 0x65
 8028378:	f43f ab75 	beq.w	8027a66 <_strtod_l+0x276>
 802837c:	2a45      	cmp	r2, #69	; 0x45
 802837e:	f43f ab72 	beq.w	8027a66 <_strtod_l+0x276>
 8028382:	2301      	movs	r3, #1
 8028384:	f7ff bbaa 	b.w	8027adc <_strtod_l+0x2ec>
 8028388:	00000000 	.word	0x00000000
 802838c:	bff00000 	.word	0xbff00000
 8028390:	00000000 	.word	0x00000000
 8028394:	3ff00000 	.word	0x3ff00000
 8028398:	94a03595 	.word	0x94a03595
 802839c:	3fdfffff 	.word	0x3fdfffff
 80283a0:	35afe535 	.word	0x35afe535
 80283a4:	3fe00000 	.word	0x3fe00000
 80283a8:	ffc00000 	.word	0xffc00000
 80283ac:	41dfffff 	.word	0x41dfffff
 80283b0:	94a03595 	.word	0x94a03595
 80283b4:	3fcfffff 	.word	0x3fcfffff
 80283b8:	3ff00000 	.word	0x3ff00000
 80283bc:	3fe00000 	.word	0x3fe00000
 80283c0:	7ff00000 	.word	0x7ff00000
 80283c4:	7fe00000 	.word	0x7fe00000
 80283c8:	7c9fffff 	.word	0x7c9fffff
 80283cc:	7fefffff 	.word	0x7fefffff

080283d0 <_strtod_r>:
 80283d0:	4b01      	ldr	r3, [pc, #4]	; (80283d8 <_strtod_r+0x8>)
 80283d2:	f7ff ba0d 	b.w	80277f0 <_strtod_l>
 80283d6:	bf00      	nop
 80283d8:	20000068 	.word	0x20000068

080283dc <_strtol_l.constprop.0>:
 80283dc:	2b01      	cmp	r3, #1
 80283de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80283e2:	d001      	beq.n	80283e8 <_strtol_l.constprop.0+0xc>
 80283e4:	2b24      	cmp	r3, #36	; 0x24
 80283e6:	d906      	bls.n	80283f6 <_strtol_l.constprop.0+0x1a>
 80283e8:	f7fd fd8a 	bl	8025f00 <__errno>
 80283ec:	2316      	movs	r3, #22
 80283ee:	6003      	str	r3, [r0, #0]
 80283f0:	2000      	movs	r0, #0
 80283f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80283f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80284dc <_strtol_l.constprop.0+0x100>
 80283fa:	460d      	mov	r5, r1
 80283fc:	462e      	mov	r6, r5
 80283fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8028406:	f017 0708 	ands.w	r7, r7, #8
 802840a:	d1f7      	bne.n	80283fc <_strtol_l.constprop.0+0x20>
 802840c:	2c2d      	cmp	r4, #45	; 0x2d
 802840e:	d132      	bne.n	8028476 <_strtol_l.constprop.0+0x9a>
 8028410:	782c      	ldrb	r4, [r5, #0]
 8028412:	2701      	movs	r7, #1
 8028414:	1cb5      	adds	r5, r6, #2
 8028416:	2b00      	cmp	r3, #0
 8028418:	d05b      	beq.n	80284d2 <_strtol_l.constprop.0+0xf6>
 802841a:	2b10      	cmp	r3, #16
 802841c:	d109      	bne.n	8028432 <_strtol_l.constprop.0+0x56>
 802841e:	2c30      	cmp	r4, #48	; 0x30
 8028420:	d107      	bne.n	8028432 <_strtol_l.constprop.0+0x56>
 8028422:	782c      	ldrb	r4, [r5, #0]
 8028424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8028428:	2c58      	cmp	r4, #88	; 0x58
 802842a:	d14d      	bne.n	80284c8 <_strtol_l.constprop.0+0xec>
 802842c:	786c      	ldrb	r4, [r5, #1]
 802842e:	2310      	movs	r3, #16
 8028430:	3502      	adds	r5, #2
 8028432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8028436:	f108 38ff 	add.w	r8, r8, #4294967295
 802843a:	f04f 0e00 	mov.w	lr, #0
 802843e:	fbb8 f9f3 	udiv	r9, r8, r3
 8028442:	4676      	mov	r6, lr
 8028444:	fb03 8a19 	mls	sl, r3, r9, r8
 8028448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802844c:	f1bc 0f09 	cmp.w	ip, #9
 8028450:	d816      	bhi.n	8028480 <_strtol_l.constprop.0+0xa4>
 8028452:	4664      	mov	r4, ip
 8028454:	42a3      	cmp	r3, r4
 8028456:	dd24      	ble.n	80284a2 <_strtol_l.constprop.0+0xc6>
 8028458:	f1be 3fff 	cmp.w	lr, #4294967295
 802845c:	d008      	beq.n	8028470 <_strtol_l.constprop.0+0x94>
 802845e:	45b1      	cmp	r9, r6
 8028460:	d31c      	bcc.n	802849c <_strtol_l.constprop.0+0xc0>
 8028462:	d101      	bne.n	8028468 <_strtol_l.constprop.0+0x8c>
 8028464:	45a2      	cmp	sl, r4
 8028466:	db19      	blt.n	802849c <_strtol_l.constprop.0+0xc0>
 8028468:	fb06 4603 	mla	r6, r6, r3, r4
 802846c:	f04f 0e01 	mov.w	lr, #1
 8028470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028474:	e7e8      	b.n	8028448 <_strtol_l.constprop.0+0x6c>
 8028476:	2c2b      	cmp	r4, #43	; 0x2b
 8028478:	bf04      	itt	eq
 802847a:	782c      	ldrbeq	r4, [r5, #0]
 802847c:	1cb5      	addeq	r5, r6, #2
 802847e:	e7ca      	b.n	8028416 <_strtol_l.constprop.0+0x3a>
 8028480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8028484:	f1bc 0f19 	cmp.w	ip, #25
 8028488:	d801      	bhi.n	802848e <_strtol_l.constprop.0+0xb2>
 802848a:	3c37      	subs	r4, #55	; 0x37
 802848c:	e7e2      	b.n	8028454 <_strtol_l.constprop.0+0x78>
 802848e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8028492:	f1bc 0f19 	cmp.w	ip, #25
 8028496:	d804      	bhi.n	80284a2 <_strtol_l.constprop.0+0xc6>
 8028498:	3c57      	subs	r4, #87	; 0x57
 802849a:	e7db      	b.n	8028454 <_strtol_l.constprop.0+0x78>
 802849c:	f04f 3eff 	mov.w	lr, #4294967295
 80284a0:	e7e6      	b.n	8028470 <_strtol_l.constprop.0+0x94>
 80284a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80284a6:	d105      	bne.n	80284b4 <_strtol_l.constprop.0+0xd8>
 80284a8:	2322      	movs	r3, #34	; 0x22
 80284aa:	6003      	str	r3, [r0, #0]
 80284ac:	4646      	mov	r6, r8
 80284ae:	b942      	cbnz	r2, 80284c2 <_strtol_l.constprop.0+0xe6>
 80284b0:	4630      	mov	r0, r6
 80284b2:	e79e      	b.n	80283f2 <_strtol_l.constprop.0+0x16>
 80284b4:	b107      	cbz	r7, 80284b8 <_strtol_l.constprop.0+0xdc>
 80284b6:	4276      	negs	r6, r6
 80284b8:	2a00      	cmp	r2, #0
 80284ba:	d0f9      	beq.n	80284b0 <_strtol_l.constprop.0+0xd4>
 80284bc:	f1be 0f00 	cmp.w	lr, #0
 80284c0:	d000      	beq.n	80284c4 <_strtol_l.constprop.0+0xe8>
 80284c2:	1e69      	subs	r1, r5, #1
 80284c4:	6011      	str	r1, [r2, #0]
 80284c6:	e7f3      	b.n	80284b0 <_strtol_l.constprop.0+0xd4>
 80284c8:	2430      	movs	r4, #48	; 0x30
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	d1b1      	bne.n	8028432 <_strtol_l.constprop.0+0x56>
 80284ce:	2308      	movs	r3, #8
 80284d0:	e7af      	b.n	8028432 <_strtol_l.constprop.0+0x56>
 80284d2:	2c30      	cmp	r4, #48	; 0x30
 80284d4:	d0a5      	beq.n	8028422 <_strtol_l.constprop.0+0x46>
 80284d6:	230a      	movs	r3, #10
 80284d8:	e7ab      	b.n	8028432 <_strtol_l.constprop.0+0x56>
 80284da:	bf00      	nop
 80284dc:	0802a1c9 	.word	0x0802a1c9

080284e0 <_strtol_r>:
 80284e0:	f7ff bf7c 	b.w	80283dc <_strtol_l.constprop.0>

080284e4 <__ssputs_r>:
 80284e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284e8:	688e      	ldr	r6, [r1, #8]
 80284ea:	461f      	mov	r7, r3
 80284ec:	42be      	cmp	r6, r7
 80284ee:	680b      	ldr	r3, [r1, #0]
 80284f0:	4682      	mov	sl, r0
 80284f2:	460c      	mov	r4, r1
 80284f4:	4690      	mov	r8, r2
 80284f6:	d82c      	bhi.n	8028552 <__ssputs_r+0x6e>
 80284f8:	898a      	ldrh	r2, [r1, #12]
 80284fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80284fe:	d026      	beq.n	802854e <__ssputs_r+0x6a>
 8028500:	6965      	ldr	r5, [r4, #20]
 8028502:	6909      	ldr	r1, [r1, #16]
 8028504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028508:	eba3 0901 	sub.w	r9, r3, r1
 802850c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028510:	1c7b      	adds	r3, r7, #1
 8028512:	444b      	add	r3, r9
 8028514:	106d      	asrs	r5, r5, #1
 8028516:	429d      	cmp	r5, r3
 8028518:	bf38      	it	cc
 802851a:	461d      	movcc	r5, r3
 802851c:	0553      	lsls	r3, r2, #21
 802851e:	d527      	bpl.n	8028570 <__ssputs_r+0x8c>
 8028520:	4629      	mov	r1, r5
 8028522:	f7fe fc0f 	bl	8026d44 <_malloc_r>
 8028526:	4606      	mov	r6, r0
 8028528:	b360      	cbz	r0, 8028584 <__ssputs_r+0xa0>
 802852a:	6921      	ldr	r1, [r4, #16]
 802852c:	464a      	mov	r2, r9
 802852e:	f000 fdaf 	bl	8029090 <memcpy>
 8028532:	89a3      	ldrh	r3, [r4, #12]
 8028534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8028538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802853c:	81a3      	strh	r3, [r4, #12]
 802853e:	6126      	str	r6, [r4, #16]
 8028540:	6165      	str	r5, [r4, #20]
 8028542:	444e      	add	r6, r9
 8028544:	eba5 0509 	sub.w	r5, r5, r9
 8028548:	6026      	str	r6, [r4, #0]
 802854a:	60a5      	str	r5, [r4, #8]
 802854c:	463e      	mov	r6, r7
 802854e:	42be      	cmp	r6, r7
 8028550:	d900      	bls.n	8028554 <__ssputs_r+0x70>
 8028552:	463e      	mov	r6, r7
 8028554:	6820      	ldr	r0, [r4, #0]
 8028556:	4632      	mov	r2, r6
 8028558:	4641      	mov	r1, r8
 802855a:	f000 fd5c 	bl	8029016 <memmove>
 802855e:	68a3      	ldr	r3, [r4, #8]
 8028560:	1b9b      	subs	r3, r3, r6
 8028562:	60a3      	str	r3, [r4, #8]
 8028564:	6823      	ldr	r3, [r4, #0]
 8028566:	4433      	add	r3, r6
 8028568:	6023      	str	r3, [r4, #0]
 802856a:	2000      	movs	r0, #0
 802856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028570:	462a      	mov	r2, r5
 8028572:	f001 f942 	bl	80297fa <_realloc_r>
 8028576:	4606      	mov	r6, r0
 8028578:	2800      	cmp	r0, #0
 802857a:	d1e0      	bne.n	802853e <__ssputs_r+0x5a>
 802857c:	6921      	ldr	r1, [r4, #16]
 802857e:	4650      	mov	r0, sl
 8028580:	f7fe fb6c 	bl	8026c5c <_free_r>
 8028584:	230c      	movs	r3, #12
 8028586:	f8ca 3000 	str.w	r3, [sl]
 802858a:	89a3      	ldrh	r3, [r4, #12]
 802858c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028590:	81a3      	strh	r3, [r4, #12]
 8028592:	f04f 30ff 	mov.w	r0, #4294967295
 8028596:	e7e9      	b.n	802856c <__ssputs_r+0x88>

08028598 <_svfiprintf_r>:
 8028598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802859c:	4698      	mov	r8, r3
 802859e:	898b      	ldrh	r3, [r1, #12]
 80285a0:	061b      	lsls	r3, r3, #24
 80285a2:	b09d      	sub	sp, #116	; 0x74
 80285a4:	4607      	mov	r7, r0
 80285a6:	460d      	mov	r5, r1
 80285a8:	4614      	mov	r4, r2
 80285aa:	d50e      	bpl.n	80285ca <_svfiprintf_r+0x32>
 80285ac:	690b      	ldr	r3, [r1, #16]
 80285ae:	b963      	cbnz	r3, 80285ca <_svfiprintf_r+0x32>
 80285b0:	2140      	movs	r1, #64	; 0x40
 80285b2:	f7fe fbc7 	bl	8026d44 <_malloc_r>
 80285b6:	6028      	str	r0, [r5, #0]
 80285b8:	6128      	str	r0, [r5, #16]
 80285ba:	b920      	cbnz	r0, 80285c6 <_svfiprintf_r+0x2e>
 80285bc:	230c      	movs	r3, #12
 80285be:	603b      	str	r3, [r7, #0]
 80285c0:	f04f 30ff 	mov.w	r0, #4294967295
 80285c4:	e0d0      	b.n	8028768 <_svfiprintf_r+0x1d0>
 80285c6:	2340      	movs	r3, #64	; 0x40
 80285c8:	616b      	str	r3, [r5, #20]
 80285ca:	2300      	movs	r3, #0
 80285cc:	9309      	str	r3, [sp, #36]	; 0x24
 80285ce:	2320      	movs	r3, #32
 80285d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80285d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80285d8:	2330      	movs	r3, #48	; 0x30
 80285da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8028780 <_svfiprintf_r+0x1e8>
 80285de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80285e2:	f04f 0901 	mov.w	r9, #1
 80285e6:	4623      	mov	r3, r4
 80285e8:	469a      	mov	sl, r3
 80285ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80285ee:	b10a      	cbz	r2, 80285f4 <_svfiprintf_r+0x5c>
 80285f0:	2a25      	cmp	r2, #37	; 0x25
 80285f2:	d1f9      	bne.n	80285e8 <_svfiprintf_r+0x50>
 80285f4:	ebba 0b04 	subs.w	fp, sl, r4
 80285f8:	d00b      	beq.n	8028612 <_svfiprintf_r+0x7a>
 80285fa:	465b      	mov	r3, fp
 80285fc:	4622      	mov	r2, r4
 80285fe:	4629      	mov	r1, r5
 8028600:	4638      	mov	r0, r7
 8028602:	f7ff ff6f 	bl	80284e4 <__ssputs_r>
 8028606:	3001      	adds	r0, #1
 8028608:	f000 80a9 	beq.w	802875e <_svfiprintf_r+0x1c6>
 802860c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802860e:	445a      	add	r2, fp
 8028610:	9209      	str	r2, [sp, #36]	; 0x24
 8028612:	f89a 3000 	ldrb.w	r3, [sl]
 8028616:	2b00      	cmp	r3, #0
 8028618:	f000 80a1 	beq.w	802875e <_svfiprintf_r+0x1c6>
 802861c:	2300      	movs	r3, #0
 802861e:	f04f 32ff 	mov.w	r2, #4294967295
 8028622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028626:	f10a 0a01 	add.w	sl, sl, #1
 802862a:	9304      	str	r3, [sp, #16]
 802862c:	9307      	str	r3, [sp, #28]
 802862e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028632:	931a      	str	r3, [sp, #104]	; 0x68
 8028634:	4654      	mov	r4, sl
 8028636:	2205      	movs	r2, #5
 8028638:	f814 1b01 	ldrb.w	r1, [r4], #1
 802863c:	4850      	ldr	r0, [pc, #320]	; (8028780 <_svfiprintf_r+0x1e8>)
 802863e:	f7f7 fdcf 	bl	80201e0 <memchr>
 8028642:	9a04      	ldr	r2, [sp, #16]
 8028644:	b9d8      	cbnz	r0, 802867e <_svfiprintf_r+0xe6>
 8028646:	06d0      	lsls	r0, r2, #27
 8028648:	bf44      	itt	mi
 802864a:	2320      	movmi	r3, #32
 802864c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028650:	0711      	lsls	r1, r2, #28
 8028652:	bf44      	itt	mi
 8028654:	232b      	movmi	r3, #43	; 0x2b
 8028656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802865a:	f89a 3000 	ldrb.w	r3, [sl]
 802865e:	2b2a      	cmp	r3, #42	; 0x2a
 8028660:	d015      	beq.n	802868e <_svfiprintf_r+0xf6>
 8028662:	9a07      	ldr	r2, [sp, #28]
 8028664:	4654      	mov	r4, sl
 8028666:	2000      	movs	r0, #0
 8028668:	f04f 0c0a 	mov.w	ip, #10
 802866c:	4621      	mov	r1, r4
 802866e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028672:	3b30      	subs	r3, #48	; 0x30
 8028674:	2b09      	cmp	r3, #9
 8028676:	d94d      	bls.n	8028714 <_svfiprintf_r+0x17c>
 8028678:	b1b0      	cbz	r0, 80286a8 <_svfiprintf_r+0x110>
 802867a:	9207      	str	r2, [sp, #28]
 802867c:	e014      	b.n	80286a8 <_svfiprintf_r+0x110>
 802867e:	eba0 0308 	sub.w	r3, r0, r8
 8028682:	fa09 f303 	lsl.w	r3, r9, r3
 8028686:	4313      	orrs	r3, r2
 8028688:	9304      	str	r3, [sp, #16]
 802868a:	46a2      	mov	sl, r4
 802868c:	e7d2      	b.n	8028634 <_svfiprintf_r+0x9c>
 802868e:	9b03      	ldr	r3, [sp, #12]
 8028690:	1d19      	adds	r1, r3, #4
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	9103      	str	r1, [sp, #12]
 8028696:	2b00      	cmp	r3, #0
 8028698:	bfbb      	ittet	lt
 802869a:	425b      	neglt	r3, r3
 802869c:	f042 0202 	orrlt.w	r2, r2, #2
 80286a0:	9307      	strge	r3, [sp, #28]
 80286a2:	9307      	strlt	r3, [sp, #28]
 80286a4:	bfb8      	it	lt
 80286a6:	9204      	strlt	r2, [sp, #16]
 80286a8:	7823      	ldrb	r3, [r4, #0]
 80286aa:	2b2e      	cmp	r3, #46	; 0x2e
 80286ac:	d10c      	bne.n	80286c8 <_svfiprintf_r+0x130>
 80286ae:	7863      	ldrb	r3, [r4, #1]
 80286b0:	2b2a      	cmp	r3, #42	; 0x2a
 80286b2:	d134      	bne.n	802871e <_svfiprintf_r+0x186>
 80286b4:	9b03      	ldr	r3, [sp, #12]
 80286b6:	1d1a      	adds	r2, r3, #4
 80286b8:	681b      	ldr	r3, [r3, #0]
 80286ba:	9203      	str	r2, [sp, #12]
 80286bc:	2b00      	cmp	r3, #0
 80286be:	bfb8      	it	lt
 80286c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80286c4:	3402      	adds	r4, #2
 80286c6:	9305      	str	r3, [sp, #20]
 80286c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8028790 <_svfiprintf_r+0x1f8>
 80286cc:	7821      	ldrb	r1, [r4, #0]
 80286ce:	2203      	movs	r2, #3
 80286d0:	4650      	mov	r0, sl
 80286d2:	f7f7 fd85 	bl	80201e0 <memchr>
 80286d6:	b138      	cbz	r0, 80286e8 <_svfiprintf_r+0x150>
 80286d8:	9b04      	ldr	r3, [sp, #16]
 80286da:	eba0 000a 	sub.w	r0, r0, sl
 80286de:	2240      	movs	r2, #64	; 0x40
 80286e0:	4082      	lsls	r2, r0
 80286e2:	4313      	orrs	r3, r2
 80286e4:	3401      	adds	r4, #1
 80286e6:	9304      	str	r3, [sp, #16]
 80286e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80286ec:	4825      	ldr	r0, [pc, #148]	; (8028784 <_svfiprintf_r+0x1ec>)
 80286ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80286f2:	2206      	movs	r2, #6
 80286f4:	f7f7 fd74 	bl	80201e0 <memchr>
 80286f8:	2800      	cmp	r0, #0
 80286fa:	d038      	beq.n	802876e <_svfiprintf_r+0x1d6>
 80286fc:	4b22      	ldr	r3, [pc, #136]	; (8028788 <_svfiprintf_r+0x1f0>)
 80286fe:	bb1b      	cbnz	r3, 8028748 <_svfiprintf_r+0x1b0>
 8028700:	9b03      	ldr	r3, [sp, #12]
 8028702:	3307      	adds	r3, #7
 8028704:	f023 0307 	bic.w	r3, r3, #7
 8028708:	3308      	adds	r3, #8
 802870a:	9303      	str	r3, [sp, #12]
 802870c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802870e:	4433      	add	r3, r6
 8028710:	9309      	str	r3, [sp, #36]	; 0x24
 8028712:	e768      	b.n	80285e6 <_svfiprintf_r+0x4e>
 8028714:	fb0c 3202 	mla	r2, ip, r2, r3
 8028718:	460c      	mov	r4, r1
 802871a:	2001      	movs	r0, #1
 802871c:	e7a6      	b.n	802866c <_svfiprintf_r+0xd4>
 802871e:	2300      	movs	r3, #0
 8028720:	3401      	adds	r4, #1
 8028722:	9305      	str	r3, [sp, #20]
 8028724:	4619      	mov	r1, r3
 8028726:	f04f 0c0a 	mov.w	ip, #10
 802872a:	4620      	mov	r0, r4
 802872c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028730:	3a30      	subs	r2, #48	; 0x30
 8028732:	2a09      	cmp	r2, #9
 8028734:	d903      	bls.n	802873e <_svfiprintf_r+0x1a6>
 8028736:	2b00      	cmp	r3, #0
 8028738:	d0c6      	beq.n	80286c8 <_svfiprintf_r+0x130>
 802873a:	9105      	str	r1, [sp, #20]
 802873c:	e7c4      	b.n	80286c8 <_svfiprintf_r+0x130>
 802873e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028742:	4604      	mov	r4, r0
 8028744:	2301      	movs	r3, #1
 8028746:	e7f0      	b.n	802872a <_svfiprintf_r+0x192>
 8028748:	ab03      	add	r3, sp, #12
 802874a:	9300      	str	r3, [sp, #0]
 802874c:	462a      	mov	r2, r5
 802874e:	4b0f      	ldr	r3, [pc, #60]	; (802878c <_svfiprintf_r+0x1f4>)
 8028750:	a904      	add	r1, sp, #16
 8028752:	4638      	mov	r0, r7
 8028754:	f7fc fc58 	bl	8025008 <_printf_float>
 8028758:	1c42      	adds	r2, r0, #1
 802875a:	4606      	mov	r6, r0
 802875c:	d1d6      	bne.n	802870c <_svfiprintf_r+0x174>
 802875e:	89ab      	ldrh	r3, [r5, #12]
 8028760:	065b      	lsls	r3, r3, #25
 8028762:	f53f af2d 	bmi.w	80285c0 <_svfiprintf_r+0x28>
 8028766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028768:	b01d      	add	sp, #116	; 0x74
 802876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802876e:	ab03      	add	r3, sp, #12
 8028770:	9300      	str	r3, [sp, #0]
 8028772:	462a      	mov	r2, r5
 8028774:	4b05      	ldr	r3, [pc, #20]	; (802878c <_svfiprintf_r+0x1f4>)
 8028776:	a904      	add	r1, sp, #16
 8028778:	4638      	mov	r0, r7
 802877a:	f7fc fee9 	bl	8025550 <_printf_i>
 802877e:	e7eb      	b.n	8028758 <_svfiprintf_r+0x1c0>
 8028780:	0802a2c9 	.word	0x0802a2c9
 8028784:	0802a2d3 	.word	0x0802a2d3
 8028788:	08025009 	.word	0x08025009
 802878c:	080284e5 	.word	0x080284e5
 8028790:	0802a2cf 	.word	0x0802a2cf

08028794 <_sungetc_r>:
 8028794:	b538      	push	{r3, r4, r5, lr}
 8028796:	1c4b      	adds	r3, r1, #1
 8028798:	4614      	mov	r4, r2
 802879a:	d103      	bne.n	80287a4 <_sungetc_r+0x10>
 802879c:	f04f 35ff 	mov.w	r5, #4294967295
 80287a0:	4628      	mov	r0, r5
 80287a2:	bd38      	pop	{r3, r4, r5, pc}
 80287a4:	8993      	ldrh	r3, [r2, #12]
 80287a6:	f023 0320 	bic.w	r3, r3, #32
 80287aa:	8193      	strh	r3, [r2, #12]
 80287ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80287ae:	6852      	ldr	r2, [r2, #4]
 80287b0:	b2cd      	uxtb	r5, r1
 80287b2:	b18b      	cbz	r3, 80287d8 <_sungetc_r+0x44>
 80287b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80287b6:	4293      	cmp	r3, r2
 80287b8:	dd08      	ble.n	80287cc <_sungetc_r+0x38>
 80287ba:	6823      	ldr	r3, [r4, #0]
 80287bc:	1e5a      	subs	r2, r3, #1
 80287be:	6022      	str	r2, [r4, #0]
 80287c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80287c4:	6863      	ldr	r3, [r4, #4]
 80287c6:	3301      	adds	r3, #1
 80287c8:	6063      	str	r3, [r4, #4]
 80287ca:	e7e9      	b.n	80287a0 <_sungetc_r+0xc>
 80287cc:	4621      	mov	r1, r4
 80287ce:	f000 fbe8 	bl	8028fa2 <__submore>
 80287d2:	2800      	cmp	r0, #0
 80287d4:	d0f1      	beq.n	80287ba <_sungetc_r+0x26>
 80287d6:	e7e1      	b.n	802879c <_sungetc_r+0x8>
 80287d8:	6921      	ldr	r1, [r4, #16]
 80287da:	6823      	ldr	r3, [r4, #0]
 80287dc:	b151      	cbz	r1, 80287f4 <_sungetc_r+0x60>
 80287de:	4299      	cmp	r1, r3
 80287e0:	d208      	bcs.n	80287f4 <_sungetc_r+0x60>
 80287e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80287e6:	42a9      	cmp	r1, r5
 80287e8:	d104      	bne.n	80287f4 <_sungetc_r+0x60>
 80287ea:	3b01      	subs	r3, #1
 80287ec:	3201      	adds	r2, #1
 80287ee:	6023      	str	r3, [r4, #0]
 80287f0:	6062      	str	r2, [r4, #4]
 80287f2:	e7d5      	b.n	80287a0 <_sungetc_r+0xc>
 80287f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80287f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80287fc:	6363      	str	r3, [r4, #52]	; 0x34
 80287fe:	2303      	movs	r3, #3
 8028800:	63a3      	str	r3, [r4, #56]	; 0x38
 8028802:	4623      	mov	r3, r4
 8028804:	f803 5f46 	strb.w	r5, [r3, #70]!
 8028808:	6023      	str	r3, [r4, #0]
 802880a:	2301      	movs	r3, #1
 802880c:	e7dc      	b.n	80287c8 <_sungetc_r+0x34>

0802880e <__ssrefill_r>:
 802880e:	b510      	push	{r4, lr}
 8028810:	460c      	mov	r4, r1
 8028812:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028814:	b169      	cbz	r1, 8028832 <__ssrefill_r+0x24>
 8028816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802881a:	4299      	cmp	r1, r3
 802881c:	d001      	beq.n	8028822 <__ssrefill_r+0x14>
 802881e:	f7fe fa1d 	bl	8026c5c <_free_r>
 8028822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028824:	6063      	str	r3, [r4, #4]
 8028826:	2000      	movs	r0, #0
 8028828:	6360      	str	r0, [r4, #52]	; 0x34
 802882a:	b113      	cbz	r3, 8028832 <__ssrefill_r+0x24>
 802882c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802882e:	6023      	str	r3, [r4, #0]
 8028830:	bd10      	pop	{r4, pc}
 8028832:	6923      	ldr	r3, [r4, #16]
 8028834:	6023      	str	r3, [r4, #0]
 8028836:	2300      	movs	r3, #0
 8028838:	6063      	str	r3, [r4, #4]
 802883a:	89a3      	ldrh	r3, [r4, #12]
 802883c:	f043 0320 	orr.w	r3, r3, #32
 8028840:	81a3      	strh	r3, [r4, #12]
 8028842:	f04f 30ff 	mov.w	r0, #4294967295
 8028846:	e7f3      	b.n	8028830 <__ssrefill_r+0x22>

08028848 <__ssvfiscanf_r>:
 8028848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802884c:	460c      	mov	r4, r1
 802884e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8028852:	2100      	movs	r1, #0
 8028854:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028858:	49a6      	ldr	r1, [pc, #664]	; (8028af4 <__ssvfiscanf_r+0x2ac>)
 802885a:	91a0      	str	r1, [sp, #640]	; 0x280
 802885c:	f10d 0804 	add.w	r8, sp, #4
 8028860:	49a5      	ldr	r1, [pc, #660]	; (8028af8 <__ssvfiscanf_r+0x2b0>)
 8028862:	4fa6      	ldr	r7, [pc, #664]	; (8028afc <__ssvfiscanf_r+0x2b4>)
 8028864:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8028b00 <__ssvfiscanf_r+0x2b8>
 8028868:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802886c:	4606      	mov	r6, r0
 802886e:	91a1      	str	r1, [sp, #644]	; 0x284
 8028870:	9300      	str	r3, [sp, #0]
 8028872:	7813      	ldrb	r3, [r2, #0]
 8028874:	2b00      	cmp	r3, #0
 8028876:	f000 815a 	beq.w	8028b2e <__ssvfiscanf_r+0x2e6>
 802887a:	5cf9      	ldrb	r1, [r7, r3]
 802887c:	f011 0108 	ands.w	r1, r1, #8
 8028880:	f102 0501 	add.w	r5, r2, #1
 8028884:	d019      	beq.n	80288ba <__ssvfiscanf_r+0x72>
 8028886:	6863      	ldr	r3, [r4, #4]
 8028888:	2b00      	cmp	r3, #0
 802888a:	dd0f      	ble.n	80288ac <__ssvfiscanf_r+0x64>
 802888c:	6823      	ldr	r3, [r4, #0]
 802888e:	781a      	ldrb	r2, [r3, #0]
 8028890:	5cba      	ldrb	r2, [r7, r2]
 8028892:	0712      	lsls	r2, r2, #28
 8028894:	d401      	bmi.n	802889a <__ssvfiscanf_r+0x52>
 8028896:	462a      	mov	r2, r5
 8028898:	e7eb      	b.n	8028872 <__ssvfiscanf_r+0x2a>
 802889a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802889c:	3201      	adds	r2, #1
 802889e:	9245      	str	r2, [sp, #276]	; 0x114
 80288a0:	6862      	ldr	r2, [r4, #4]
 80288a2:	3301      	adds	r3, #1
 80288a4:	3a01      	subs	r2, #1
 80288a6:	6062      	str	r2, [r4, #4]
 80288a8:	6023      	str	r3, [r4, #0]
 80288aa:	e7ec      	b.n	8028886 <__ssvfiscanf_r+0x3e>
 80288ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80288ae:	4621      	mov	r1, r4
 80288b0:	4630      	mov	r0, r6
 80288b2:	4798      	blx	r3
 80288b4:	2800      	cmp	r0, #0
 80288b6:	d0e9      	beq.n	802888c <__ssvfiscanf_r+0x44>
 80288b8:	e7ed      	b.n	8028896 <__ssvfiscanf_r+0x4e>
 80288ba:	2b25      	cmp	r3, #37	; 0x25
 80288bc:	d012      	beq.n	80288e4 <__ssvfiscanf_r+0x9c>
 80288be:	469a      	mov	sl, r3
 80288c0:	6863      	ldr	r3, [r4, #4]
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	f340 8091 	ble.w	80289ea <__ssvfiscanf_r+0x1a2>
 80288c8:	6822      	ldr	r2, [r4, #0]
 80288ca:	7813      	ldrb	r3, [r2, #0]
 80288cc:	4553      	cmp	r3, sl
 80288ce:	f040 812e 	bne.w	8028b2e <__ssvfiscanf_r+0x2e6>
 80288d2:	6863      	ldr	r3, [r4, #4]
 80288d4:	3b01      	subs	r3, #1
 80288d6:	6063      	str	r3, [r4, #4]
 80288d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80288da:	3201      	adds	r2, #1
 80288dc:	3301      	adds	r3, #1
 80288de:	6022      	str	r2, [r4, #0]
 80288e0:	9345      	str	r3, [sp, #276]	; 0x114
 80288e2:	e7d8      	b.n	8028896 <__ssvfiscanf_r+0x4e>
 80288e4:	9141      	str	r1, [sp, #260]	; 0x104
 80288e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80288e8:	7853      	ldrb	r3, [r2, #1]
 80288ea:	2b2a      	cmp	r3, #42	; 0x2a
 80288ec:	bf02      	ittt	eq
 80288ee:	2310      	moveq	r3, #16
 80288f0:	1c95      	addeq	r5, r2, #2
 80288f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80288f4:	220a      	movs	r2, #10
 80288f6:	46aa      	mov	sl, r5
 80288f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80288fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8028900:	2b09      	cmp	r3, #9
 8028902:	d91c      	bls.n	802893e <__ssvfiscanf_r+0xf6>
 8028904:	487e      	ldr	r0, [pc, #504]	; (8028b00 <__ssvfiscanf_r+0x2b8>)
 8028906:	2203      	movs	r2, #3
 8028908:	f7f7 fc6a 	bl	80201e0 <memchr>
 802890c:	b138      	cbz	r0, 802891e <__ssvfiscanf_r+0xd6>
 802890e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028910:	eba0 0009 	sub.w	r0, r0, r9
 8028914:	2301      	movs	r3, #1
 8028916:	4083      	lsls	r3, r0
 8028918:	4313      	orrs	r3, r2
 802891a:	9341      	str	r3, [sp, #260]	; 0x104
 802891c:	4655      	mov	r5, sl
 802891e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028922:	2b78      	cmp	r3, #120	; 0x78
 8028924:	d806      	bhi.n	8028934 <__ssvfiscanf_r+0xec>
 8028926:	2b57      	cmp	r3, #87	; 0x57
 8028928:	d810      	bhi.n	802894c <__ssvfiscanf_r+0x104>
 802892a:	2b25      	cmp	r3, #37	; 0x25
 802892c:	d0c7      	beq.n	80288be <__ssvfiscanf_r+0x76>
 802892e:	d857      	bhi.n	80289e0 <__ssvfiscanf_r+0x198>
 8028930:	2b00      	cmp	r3, #0
 8028932:	d065      	beq.n	8028a00 <__ssvfiscanf_r+0x1b8>
 8028934:	2303      	movs	r3, #3
 8028936:	9347      	str	r3, [sp, #284]	; 0x11c
 8028938:	230a      	movs	r3, #10
 802893a:	9342      	str	r3, [sp, #264]	; 0x108
 802893c:	e076      	b.n	8028a2c <__ssvfiscanf_r+0x1e4>
 802893e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8028940:	fb02 1103 	mla	r1, r2, r3, r1
 8028944:	3930      	subs	r1, #48	; 0x30
 8028946:	9143      	str	r1, [sp, #268]	; 0x10c
 8028948:	4655      	mov	r5, sl
 802894a:	e7d4      	b.n	80288f6 <__ssvfiscanf_r+0xae>
 802894c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8028950:	2a20      	cmp	r2, #32
 8028952:	d8ef      	bhi.n	8028934 <__ssvfiscanf_r+0xec>
 8028954:	a101      	add	r1, pc, #4	; (adr r1, 802895c <__ssvfiscanf_r+0x114>)
 8028956:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802895a:	bf00      	nop
 802895c:	08028a0f 	.word	0x08028a0f
 8028960:	08028935 	.word	0x08028935
 8028964:	08028935 	.word	0x08028935
 8028968:	08028a6d 	.word	0x08028a6d
 802896c:	08028935 	.word	0x08028935
 8028970:	08028935 	.word	0x08028935
 8028974:	08028935 	.word	0x08028935
 8028978:	08028935 	.word	0x08028935
 802897c:	08028935 	.word	0x08028935
 8028980:	08028935 	.word	0x08028935
 8028984:	08028935 	.word	0x08028935
 8028988:	08028a83 	.word	0x08028a83
 802898c:	08028a69 	.word	0x08028a69
 8028990:	080289e7 	.word	0x080289e7
 8028994:	080289e7 	.word	0x080289e7
 8028998:	080289e7 	.word	0x080289e7
 802899c:	08028935 	.word	0x08028935
 80289a0:	08028a25 	.word	0x08028a25
 80289a4:	08028935 	.word	0x08028935
 80289a8:	08028935 	.word	0x08028935
 80289ac:	08028935 	.word	0x08028935
 80289b0:	08028935 	.word	0x08028935
 80289b4:	08028a93 	.word	0x08028a93
 80289b8:	08028a61 	.word	0x08028a61
 80289bc:	08028a07 	.word	0x08028a07
 80289c0:	08028935 	.word	0x08028935
 80289c4:	08028935 	.word	0x08028935
 80289c8:	08028a8f 	.word	0x08028a8f
 80289cc:	08028935 	.word	0x08028935
 80289d0:	08028a69 	.word	0x08028a69
 80289d4:	08028935 	.word	0x08028935
 80289d8:	08028935 	.word	0x08028935
 80289dc:	08028a0f 	.word	0x08028a0f
 80289e0:	3b45      	subs	r3, #69	; 0x45
 80289e2:	2b02      	cmp	r3, #2
 80289e4:	d8a6      	bhi.n	8028934 <__ssvfiscanf_r+0xec>
 80289e6:	2305      	movs	r3, #5
 80289e8:	e01f      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 80289ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80289ec:	4621      	mov	r1, r4
 80289ee:	4630      	mov	r0, r6
 80289f0:	4798      	blx	r3
 80289f2:	2800      	cmp	r0, #0
 80289f4:	f43f af68 	beq.w	80288c8 <__ssvfiscanf_r+0x80>
 80289f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80289fa:	2800      	cmp	r0, #0
 80289fc:	f040 808d 	bne.w	8028b1a <__ssvfiscanf_r+0x2d2>
 8028a00:	f04f 30ff 	mov.w	r0, #4294967295
 8028a04:	e08f      	b.n	8028b26 <__ssvfiscanf_r+0x2de>
 8028a06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028a08:	f042 0220 	orr.w	r2, r2, #32
 8028a0c:	9241      	str	r2, [sp, #260]	; 0x104
 8028a0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028a14:	9241      	str	r2, [sp, #260]	; 0x104
 8028a16:	2210      	movs	r2, #16
 8028a18:	2b6f      	cmp	r3, #111	; 0x6f
 8028a1a:	9242      	str	r2, [sp, #264]	; 0x108
 8028a1c:	bf34      	ite	cc
 8028a1e:	2303      	movcc	r3, #3
 8028a20:	2304      	movcs	r3, #4
 8028a22:	e002      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 8028a24:	2300      	movs	r3, #0
 8028a26:	9342      	str	r3, [sp, #264]	; 0x108
 8028a28:	2303      	movs	r3, #3
 8028a2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8028a2c:	6863      	ldr	r3, [r4, #4]
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	dd3d      	ble.n	8028aae <__ssvfiscanf_r+0x266>
 8028a32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a34:	0659      	lsls	r1, r3, #25
 8028a36:	d404      	bmi.n	8028a42 <__ssvfiscanf_r+0x1fa>
 8028a38:	6823      	ldr	r3, [r4, #0]
 8028a3a:	781a      	ldrb	r2, [r3, #0]
 8028a3c:	5cba      	ldrb	r2, [r7, r2]
 8028a3e:	0712      	lsls	r2, r2, #28
 8028a40:	d43c      	bmi.n	8028abc <__ssvfiscanf_r+0x274>
 8028a42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028a44:	2b02      	cmp	r3, #2
 8028a46:	dc4b      	bgt.n	8028ae0 <__ssvfiscanf_r+0x298>
 8028a48:	466b      	mov	r3, sp
 8028a4a:	4622      	mov	r2, r4
 8028a4c:	a941      	add	r1, sp, #260	; 0x104
 8028a4e:	4630      	mov	r0, r6
 8028a50:	f000 f872 	bl	8028b38 <_scanf_chars>
 8028a54:	2801      	cmp	r0, #1
 8028a56:	d06a      	beq.n	8028b2e <__ssvfiscanf_r+0x2e6>
 8028a58:	2802      	cmp	r0, #2
 8028a5a:	f47f af1c 	bne.w	8028896 <__ssvfiscanf_r+0x4e>
 8028a5e:	e7cb      	b.n	80289f8 <__ssvfiscanf_r+0x1b0>
 8028a60:	2308      	movs	r3, #8
 8028a62:	9342      	str	r3, [sp, #264]	; 0x108
 8028a64:	2304      	movs	r3, #4
 8028a66:	e7e0      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 8028a68:	220a      	movs	r2, #10
 8028a6a:	e7d5      	b.n	8028a18 <__ssvfiscanf_r+0x1d0>
 8028a6c:	4629      	mov	r1, r5
 8028a6e:	4640      	mov	r0, r8
 8028a70:	f000 fa5e 	bl	8028f30 <__sccl>
 8028a74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a7a:	9341      	str	r3, [sp, #260]	; 0x104
 8028a7c:	4605      	mov	r5, r0
 8028a7e:	2301      	movs	r3, #1
 8028a80:	e7d3      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 8028a82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a88:	9341      	str	r3, [sp, #260]	; 0x104
 8028a8a:	2300      	movs	r3, #0
 8028a8c:	e7cd      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 8028a8e:	2302      	movs	r3, #2
 8028a90:	e7cb      	b.n	8028a2a <__ssvfiscanf_r+0x1e2>
 8028a92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028a94:	06c3      	lsls	r3, r0, #27
 8028a96:	f53f aefe 	bmi.w	8028896 <__ssvfiscanf_r+0x4e>
 8028a9a:	9b00      	ldr	r3, [sp, #0]
 8028a9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a9e:	1d19      	adds	r1, r3, #4
 8028aa0:	9100      	str	r1, [sp, #0]
 8028aa2:	681b      	ldr	r3, [r3, #0]
 8028aa4:	07c0      	lsls	r0, r0, #31
 8028aa6:	bf4c      	ite	mi
 8028aa8:	801a      	strhmi	r2, [r3, #0]
 8028aaa:	601a      	strpl	r2, [r3, #0]
 8028aac:	e6f3      	b.n	8028896 <__ssvfiscanf_r+0x4e>
 8028aae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028ab0:	4621      	mov	r1, r4
 8028ab2:	4630      	mov	r0, r6
 8028ab4:	4798      	blx	r3
 8028ab6:	2800      	cmp	r0, #0
 8028ab8:	d0bb      	beq.n	8028a32 <__ssvfiscanf_r+0x1ea>
 8028aba:	e79d      	b.n	80289f8 <__ssvfiscanf_r+0x1b0>
 8028abc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028abe:	3201      	adds	r2, #1
 8028ac0:	9245      	str	r2, [sp, #276]	; 0x114
 8028ac2:	6862      	ldr	r2, [r4, #4]
 8028ac4:	3a01      	subs	r2, #1
 8028ac6:	2a00      	cmp	r2, #0
 8028ac8:	6062      	str	r2, [r4, #4]
 8028aca:	dd02      	ble.n	8028ad2 <__ssvfiscanf_r+0x28a>
 8028acc:	3301      	adds	r3, #1
 8028ace:	6023      	str	r3, [r4, #0]
 8028ad0:	e7b2      	b.n	8028a38 <__ssvfiscanf_r+0x1f0>
 8028ad2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028ad4:	4621      	mov	r1, r4
 8028ad6:	4630      	mov	r0, r6
 8028ad8:	4798      	blx	r3
 8028ada:	2800      	cmp	r0, #0
 8028adc:	d0ac      	beq.n	8028a38 <__ssvfiscanf_r+0x1f0>
 8028ade:	e78b      	b.n	80289f8 <__ssvfiscanf_r+0x1b0>
 8028ae0:	2b04      	cmp	r3, #4
 8028ae2:	dc0f      	bgt.n	8028b04 <__ssvfiscanf_r+0x2bc>
 8028ae4:	466b      	mov	r3, sp
 8028ae6:	4622      	mov	r2, r4
 8028ae8:	a941      	add	r1, sp, #260	; 0x104
 8028aea:	4630      	mov	r0, r6
 8028aec:	f000 f87e 	bl	8028bec <_scanf_i>
 8028af0:	e7b0      	b.n	8028a54 <__ssvfiscanf_r+0x20c>
 8028af2:	bf00      	nop
 8028af4:	08028795 	.word	0x08028795
 8028af8:	0802880f 	.word	0x0802880f
 8028afc:	0802a1c9 	.word	0x0802a1c9
 8028b00:	0802a2cf 	.word	0x0802a2cf
 8028b04:	4b0b      	ldr	r3, [pc, #44]	; (8028b34 <__ssvfiscanf_r+0x2ec>)
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	f43f aec5 	beq.w	8028896 <__ssvfiscanf_r+0x4e>
 8028b0c:	466b      	mov	r3, sp
 8028b0e:	4622      	mov	r2, r4
 8028b10:	a941      	add	r1, sp, #260	; 0x104
 8028b12:	4630      	mov	r0, r6
 8028b14:	f7fc fe3e 	bl	8025794 <_scanf_float>
 8028b18:	e79c      	b.n	8028a54 <__ssvfiscanf_r+0x20c>
 8028b1a:	89a3      	ldrh	r3, [r4, #12]
 8028b1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028b20:	bf18      	it	ne
 8028b22:	f04f 30ff 	movne.w	r0, #4294967295
 8028b26:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8028b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b2e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028b30:	e7f9      	b.n	8028b26 <__ssvfiscanf_r+0x2de>
 8028b32:	bf00      	nop
 8028b34:	08025795 	.word	0x08025795

08028b38 <_scanf_chars>:
 8028b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028b3c:	4615      	mov	r5, r2
 8028b3e:	688a      	ldr	r2, [r1, #8]
 8028b40:	4680      	mov	r8, r0
 8028b42:	460c      	mov	r4, r1
 8028b44:	b932      	cbnz	r2, 8028b54 <_scanf_chars+0x1c>
 8028b46:	698a      	ldr	r2, [r1, #24]
 8028b48:	2a00      	cmp	r2, #0
 8028b4a:	bf0c      	ite	eq
 8028b4c:	2201      	moveq	r2, #1
 8028b4e:	f04f 32ff 	movne.w	r2, #4294967295
 8028b52:	608a      	str	r2, [r1, #8]
 8028b54:	6822      	ldr	r2, [r4, #0]
 8028b56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028be8 <_scanf_chars+0xb0>
 8028b5a:	06d1      	lsls	r1, r2, #27
 8028b5c:	bf5f      	itttt	pl
 8028b5e:	681a      	ldrpl	r2, [r3, #0]
 8028b60:	1d11      	addpl	r1, r2, #4
 8028b62:	6019      	strpl	r1, [r3, #0]
 8028b64:	6816      	ldrpl	r6, [r2, #0]
 8028b66:	2700      	movs	r7, #0
 8028b68:	69a0      	ldr	r0, [r4, #24]
 8028b6a:	b188      	cbz	r0, 8028b90 <_scanf_chars+0x58>
 8028b6c:	2801      	cmp	r0, #1
 8028b6e:	d107      	bne.n	8028b80 <_scanf_chars+0x48>
 8028b70:	682a      	ldr	r2, [r5, #0]
 8028b72:	7811      	ldrb	r1, [r2, #0]
 8028b74:	6962      	ldr	r2, [r4, #20]
 8028b76:	5c52      	ldrb	r2, [r2, r1]
 8028b78:	b952      	cbnz	r2, 8028b90 <_scanf_chars+0x58>
 8028b7a:	2f00      	cmp	r7, #0
 8028b7c:	d031      	beq.n	8028be2 <_scanf_chars+0xaa>
 8028b7e:	e022      	b.n	8028bc6 <_scanf_chars+0x8e>
 8028b80:	2802      	cmp	r0, #2
 8028b82:	d120      	bne.n	8028bc6 <_scanf_chars+0x8e>
 8028b84:	682b      	ldr	r3, [r5, #0]
 8028b86:	781b      	ldrb	r3, [r3, #0]
 8028b88:	f819 3003 	ldrb.w	r3, [r9, r3]
 8028b8c:	071b      	lsls	r3, r3, #28
 8028b8e:	d41a      	bmi.n	8028bc6 <_scanf_chars+0x8e>
 8028b90:	6823      	ldr	r3, [r4, #0]
 8028b92:	06da      	lsls	r2, r3, #27
 8028b94:	bf5e      	ittt	pl
 8028b96:	682b      	ldrpl	r3, [r5, #0]
 8028b98:	781b      	ldrbpl	r3, [r3, #0]
 8028b9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028b9e:	682a      	ldr	r2, [r5, #0]
 8028ba0:	686b      	ldr	r3, [r5, #4]
 8028ba2:	3201      	adds	r2, #1
 8028ba4:	602a      	str	r2, [r5, #0]
 8028ba6:	68a2      	ldr	r2, [r4, #8]
 8028ba8:	3b01      	subs	r3, #1
 8028baa:	3a01      	subs	r2, #1
 8028bac:	606b      	str	r3, [r5, #4]
 8028bae:	3701      	adds	r7, #1
 8028bb0:	60a2      	str	r2, [r4, #8]
 8028bb2:	b142      	cbz	r2, 8028bc6 <_scanf_chars+0x8e>
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	dcd7      	bgt.n	8028b68 <_scanf_chars+0x30>
 8028bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028bbc:	4629      	mov	r1, r5
 8028bbe:	4640      	mov	r0, r8
 8028bc0:	4798      	blx	r3
 8028bc2:	2800      	cmp	r0, #0
 8028bc4:	d0d0      	beq.n	8028b68 <_scanf_chars+0x30>
 8028bc6:	6823      	ldr	r3, [r4, #0]
 8028bc8:	f013 0310 	ands.w	r3, r3, #16
 8028bcc:	d105      	bne.n	8028bda <_scanf_chars+0xa2>
 8028bce:	68e2      	ldr	r2, [r4, #12]
 8028bd0:	3201      	adds	r2, #1
 8028bd2:	60e2      	str	r2, [r4, #12]
 8028bd4:	69a2      	ldr	r2, [r4, #24]
 8028bd6:	b102      	cbz	r2, 8028bda <_scanf_chars+0xa2>
 8028bd8:	7033      	strb	r3, [r6, #0]
 8028bda:	6923      	ldr	r3, [r4, #16]
 8028bdc:	443b      	add	r3, r7
 8028bde:	6123      	str	r3, [r4, #16]
 8028be0:	2000      	movs	r0, #0
 8028be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028be6:	bf00      	nop
 8028be8:	0802a1c9 	.word	0x0802a1c9

08028bec <_scanf_i>:
 8028bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bf0:	4698      	mov	r8, r3
 8028bf2:	4b74      	ldr	r3, [pc, #464]	; (8028dc4 <_scanf_i+0x1d8>)
 8028bf4:	460c      	mov	r4, r1
 8028bf6:	4682      	mov	sl, r0
 8028bf8:	4616      	mov	r6, r2
 8028bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028bfe:	b087      	sub	sp, #28
 8028c00:	ab03      	add	r3, sp, #12
 8028c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028c06:	4b70      	ldr	r3, [pc, #448]	; (8028dc8 <_scanf_i+0x1dc>)
 8028c08:	69a1      	ldr	r1, [r4, #24]
 8028c0a:	4a70      	ldr	r2, [pc, #448]	; (8028dcc <_scanf_i+0x1e0>)
 8028c0c:	2903      	cmp	r1, #3
 8028c0e:	bf18      	it	ne
 8028c10:	461a      	movne	r2, r3
 8028c12:	68a3      	ldr	r3, [r4, #8]
 8028c14:	9201      	str	r2, [sp, #4]
 8028c16:	1e5a      	subs	r2, r3, #1
 8028c18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028c1c:	bf88      	it	hi
 8028c1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028c22:	4627      	mov	r7, r4
 8028c24:	bf82      	ittt	hi
 8028c26:	eb03 0905 	addhi.w	r9, r3, r5
 8028c2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028c2e:	60a3      	strhi	r3, [r4, #8]
 8028c30:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028c34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028c38:	bf98      	it	ls
 8028c3a:	f04f 0900 	movls.w	r9, #0
 8028c3e:	6023      	str	r3, [r4, #0]
 8028c40:	463d      	mov	r5, r7
 8028c42:	f04f 0b00 	mov.w	fp, #0
 8028c46:	6831      	ldr	r1, [r6, #0]
 8028c48:	ab03      	add	r3, sp, #12
 8028c4a:	7809      	ldrb	r1, [r1, #0]
 8028c4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028c50:	2202      	movs	r2, #2
 8028c52:	f7f7 fac5 	bl	80201e0 <memchr>
 8028c56:	b328      	cbz	r0, 8028ca4 <_scanf_i+0xb8>
 8028c58:	f1bb 0f01 	cmp.w	fp, #1
 8028c5c:	d159      	bne.n	8028d12 <_scanf_i+0x126>
 8028c5e:	6862      	ldr	r2, [r4, #4]
 8028c60:	b92a      	cbnz	r2, 8028c6e <_scanf_i+0x82>
 8028c62:	6822      	ldr	r2, [r4, #0]
 8028c64:	2308      	movs	r3, #8
 8028c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028c6a:	6063      	str	r3, [r4, #4]
 8028c6c:	6022      	str	r2, [r4, #0]
 8028c6e:	6822      	ldr	r2, [r4, #0]
 8028c70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028c74:	6022      	str	r2, [r4, #0]
 8028c76:	68a2      	ldr	r2, [r4, #8]
 8028c78:	1e51      	subs	r1, r2, #1
 8028c7a:	60a1      	str	r1, [r4, #8]
 8028c7c:	b192      	cbz	r2, 8028ca4 <_scanf_i+0xb8>
 8028c7e:	6832      	ldr	r2, [r6, #0]
 8028c80:	1c51      	adds	r1, r2, #1
 8028c82:	6031      	str	r1, [r6, #0]
 8028c84:	7812      	ldrb	r2, [r2, #0]
 8028c86:	f805 2b01 	strb.w	r2, [r5], #1
 8028c8a:	6872      	ldr	r2, [r6, #4]
 8028c8c:	3a01      	subs	r2, #1
 8028c8e:	2a00      	cmp	r2, #0
 8028c90:	6072      	str	r2, [r6, #4]
 8028c92:	dc07      	bgt.n	8028ca4 <_scanf_i+0xb8>
 8028c94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028c98:	4631      	mov	r1, r6
 8028c9a:	4650      	mov	r0, sl
 8028c9c:	4790      	blx	r2
 8028c9e:	2800      	cmp	r0, #0
 8028ca0:	f040 8085 	bne.w	8028dae <_scanf_i+0x1c2>
 8028ca4:	f10b 0b01 	add.w	fp, fp, #1
 8028ca8:	f1bb 0f03 	cmp.w	fp, #3
 8028cac:	d1cb      	bne.n	8028c46 <_scanf_i+0x5a>
 8028cae:	6863      	ldr	r3, [r4, #4]
 8028cb0:	b90b      	cbnz	r3, 8028cb6 <_scanf_i+0xca>
 8028cb2:	230a      	movs	r3, #10
 8028cb4:	6063      	str	r3, [r4, #4]
 8028cb6:	6863      	ldr	r3, [r4, #4]
 8028cb8:	4945      	ldr	r1, [pc, #276]	; (8028dd0 <_scanf_i+0x1e4>)
 8028cba:	6960      	ldr	r0, [r4, #20]
 8028cbc:	1ac9      	subs	r1, r1, r3
 8028cbe:	f000 f937 	bl	8028f30 <__sccl>
 8028cc2:	f04f 0b00 	mov.w	fp, #0
 8028cc6:	68a3      	ldr	r3, [r4, #8]
 8028cc8:	6822      	ldr	r2, [r4, #0]
 8028cca:	2b00      	cmp	r3, #0
 8028ccc:	d03d      	beq.n	8028d4a <_scanf_i+0x15e>
 8028cce:	6831      	ldr	r1, [r6, #0]
 8028cd0:	6960      	ldr	r0, [r4, #20]
 8028cd2:	f891 c000 	ldrb.w	ip, [r1]
 8028cd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028cda:	2800      	cmp	r0, #0
 8028cdc:	d035      	beq.n	8028d4a <_scanf_i+0x15e>
 8028cde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8028ce2:	d124      	bne.n	8028d2e <_scanf_i+0x142>
 8028ce4:	0510      	lsls	r0, r2, #20
 8028ce6:	d522      	bpl.n	8028d2e <_scanf_i+0x142>
 8028ce8:	f10b 0b01 	add.w	fp, fp, #1
 8028cec:	f1b9 0f00 	cmp.w	r9, #0
 8028cf0:	d003      	beq.n	8028cfa <_scanf_i+0x10e>
 8028cf2:	3301      	adds	r3, #1
 8028cf4:	f109 39ff 	add.w	r9, r9, #4294967295
 8028cf8:	60a3      	str	r3, [r4, #8]
 8028cfa:	6873      	ldr	r3, [r6, #4]
 8028cfc:	3b01      	subs	r3, #1
 8028cfe:	2b00      	cmp	r3, #0
 8028d00:	6073      	str	r3, [r6, #4]
 8028d02:	dd1b      	ble.n	8028d3c <_scanf_i+0x150>
 8028d04:	6833      	ldr	r3, [r6, #0]
 8028d06:	3301      	adds	r3, #1
 8028d08:	6033      	str	r3, [r6, #0]
 8028d0a:	68a3      	ldr	r3, [r4, #8]
 8028d0c:	3b01      	subs	r3, #1
 8028d0e:	60a3      	str	r3, [r4, #8]
 8028d10:	e7d9      	b.n	8028cc6 <_scanf_i+0xda>
 8028d12:	f1bb 0f02 	cmp.w	fp, #2
 8028d16:	d1ae      	bne.n	8028c76 <_scanf_i+0x8a>
 8028d18:	6822      	ldr	r2, [r4, #0]
 8028d1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028d1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028d22:	d1bf      	bne.n	8028ca4 <_scanf_i+0xb8>
 8028d24:	2310      	movs	r3, #16
 8028d26:	6063      	str	r3, [r4, #4]
 8028d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028d2c:	e7a2      	b.n	8028c74 <_scanf_i+0x88>
 8028d2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028d32:	6022      	str	r2, [r4, #0]
 8028d34:	780b      	ldrb	r3, [r1, #0]
 8028d36:	f805 3b01 	strb.w	r3, [r5], #1
 8028d3a:	e7de      	b.n	8028cfa <_scanf_i+0x10e>
 8028d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028d40:	4631      	mov	r1, r6
 8028d42:	4650      	mov	r0, sl
 8028d44:	4798      	blx	r3
 8028d46:	2800      	cmp	r0, #0
 8028d48:	d0df      	beq.n	8028d0a <_scanf_i+0x11e>
 8028d4a:	6823      	ldr	r3, [r4, #0]
 8028d4c:	05d9      	lsls	r1, r3, #23
 8028d4e:	d50d      	bpl.n	8028d6c <_scanf_i+0x180>
 8028d50:	42bd      	cmp	r5, r7
 8028d52:	d909      	bls.n	8028d68 <_scanf_i+0x17c>
 8028d54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028d5c:	4632      	mov	r2, r6
 8028d5e:	4650      	mov	r0, sl
 8028d60:	4798      	blx	r3
 8028d62:	f105 39ff 	add.w	r9, r5, #4294967295
 8028d66:	464d      	mov	r5, r9
 8028d68:	42bd      	cmp	r5, r7
 8028d6a:	d028      	beq.n	8028dbe <_scanf_i+0x1d2>
 8028d6c:	6822      	ldr	r2, [r4, #0]
 8028d6e:	f012 0210 	ands.w	r2, r2, #16
 8028d72:	d113      	bne.n	8028d9c <_scanf_i+0x1b0>
 8028d74:	702a      	strb	r2, [r5, #0]
 8028d76:	6863      	ldr	r3, [r4, #4]
 8028d78:	9e01      	ldr	r6, [sp, #4]
 8028d7a:	4639      	mov	r1, r7
 8028d7c:	4650      	mov	r0, sl
 8028d7e:	47b0      	blx	r6
 8028d80:	f8d8 3000 	ldr.w	r3, [r8]
 8028d84:	6821      	ldr	r1, [r4, #0]
 8028d86:	1d1a      	adds	r2, r3, #4
 8028d88:	f8c8 2000 	str.w	r2, [r8]
 8028d8c:	f011 0f20 	tst.w	r1, #32
 8028d90:	681b      	ldr	r3, [r3, #0]
 8028d92:	d00f      	beq.n	8028db4 <_scanf_i+0x1c8>
 8028d94:	6018      	str	r0, [r3, #0]
 8028d96:	68e3      	ldr	r3, [r4, #12]
 8028d98:	3301      	adds	r3, #1
 8028d9a:	60e3      	str	r3, [r4, #12]
 8028d9c:	6923      	ldr	r3, [r4, #16]
 8028d9e:	1bed      	subs	r5, r5, r7
 8028da0:	445d      	add	r5, fp
 8028da2:	442b      	add	r3, r5
 8028da4:	6123      	str	r3, [r4, #16]
 8028da6:	2000      	movs	r0, #0
 8028da8:	b007      	add	sp, #28
 8028daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028dae:	f04f 0b00 	mov.w	fp, #0
 8028db2:	e7ca      	b.n	8028d4a <_scanf_i+0x15e>
 8028db4:	07ca      	lsls	r2, r1, #31
 8028db6:	bf4c      	ite	mi
 8028db8:	8018      	strhmi	r0, [r3, #0]
 8028dba:	6018      	strpl	r0, [r3, #0]
 8028dbc:	e7eb      	b.n	8028d96 <_scanf_i+0x1aa>
 8028dbe:	2001      	movs	r0, #1
 8028dc0:	e7f2      	b.n	8028da8 <_scanf_i+0x1bc>
 8028dc2:	bf00      	nop
 8028dc4:	08029f30 	.word	0x08029f30
 8028dc8:	0802993d 	.word	0x0802993d
 8028dcc:	080284e1 	.word	0x080284e1
 8028dd0:	0802a2ea 	.word	0x0802a2ea

08028dd4 <__sflush_r>:
 8028dd4:	898a      	ldrh	r2, [r1, #12]
 8028dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028dda:	4605      	mov	r5, r0
 8028ddc:	0710      	lsls	r0, r2, #28
 8028dde:	460c      	mov	r4, r1
 8028de0:	d458      	bmi.n	8028e94 <__sflush_r+0xc0>
 8028de2:	684b      	ldr	r3, [r1, #4]
 8028de4:	2b00      	cmp	r3, #0
 8028de6:	dc05      	bgt.n	8028df4 <__sflush_r+0x20>
 8028de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	dc02      	bgt.n	8028df4 <__sflush_r+0x20>
 8028dee:	2000      	movs	r0, #0
 8028df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028df6:	2e00      	cmp	r6, #0
 8028df8:	d0f9      	beq.n	8028dee <__sflush_r+0x1a>
 8028dfa:	2300      	movs	r3, #0
 8028dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028e00:	682f      	ldr	r7, [r5, #0]
 8028e02:	6a21      	ldr	r1, [r4, #32]
 8028e04:	602b      	str	r3, [r5, #0]
 8028e06:	d032      	beq.n	8028e6e <__sflush_r+0x9a>
 8028e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028e0a:	89a3      	ldrh	r3, [r4, #12]
 8028e0c:	075a      	lsls	r2, r3, #29
 8028e0e:	d505      	bpl.n	8028e1c <__sflush_r+0x48>
 8028e10:	6863      	ldr	r3, [r4, #4]
 8028e12:	1ac0      	subs	r0, r0, r3
 8028e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028e16:	b10b      	cbz	r3, 8028e1c <__sflush_r+0x48>
 8028e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028e1a:	1ac0      	subs	r0, r0, r3
 8028e1c:	2300      	movs	r3, #0
 8028e1e:	4602      	mov	r2, r0
 8028e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028e22:	6a21      	ldr	r1, [r4, #32]
 8028e24:	4628      	mov	r0, r5
 8028e26:	47b0      	blx	r6
 8028e28:	1c43      	adds	r3, r0, #1
 8028e2a:	89a3      	ldrh	r3, [r4, #12]
 8028e2c:	d106      	bne.n	8028e3c <__sflush_r+0x68>
 8028e2e:	6829      	ldr	r1, [r5, #0]
 8028e30:	291d      	cmp	r1, #29
 8028e32:	d82b      	bhi.n	8028e8c <__sflush_r+0xb8>
 8028e34:	4a29      	ldr	r2, [pc, #164]	; (8028edc <__sflush_r+0x108>)
 8028e36:	410a      	asrs	r2, r1
 8028e38:	07d6      	lsls	r6, r2, #31
 8028e3a:	d427      	bmi.n	8028e8c <__sflush_r+0xb8>
 8028e3c:	2200      	movs	r2, #0
 8028e3e:	6062      	str	r2, [r4, #4]
 8028e40:	04d9      	lsls	r1, r3, #19
 8028e42:	6922      	ldr	r2, [r4, #16]
 8028e44:	6022      	str	r2, [r4, #0]
 8028e46:	d504      	bpl.n	8028e52 <__sflush_r+0x7e>
 8028e48:	1c42      	adds	r2, r0, #1
 8028e4a:	d101      	bne.n	8028e50 <__sflush_r+0x7c>
 8028e4c:	682b      	ldr	r3, [r5, #0]
 8028e4e:	b903      	cbnz	r3, 8028e52 <__sflush_r+0x7e>
 8028e50:	6560      	str	r0, [r4, #84]	; 0x54
 8028e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028e54:	602f      	str	r7, [r5, #0]
 8028e56:	2900      	cmp	r1, #0
 8028e58:	d0c9      	beq.n	8028dee <__sflush_r+0x1a>
 8028e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e5e:	4299      	cmp	r1, r3
 8028e60:	d002      	beq.n	8028e68 <__sflush_r+0x94>
 8028e62:	4628      	mov	r0, r5
 8028e64:	f7fd fefa 	bl	8026c5c <_free_r>
 8028e68:	2000      	movs	r0, #0
 8028e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8028e6c:	e7c0      	b.n	8028df0 <__sflush_r+0x1c>
 8028e6e:	2301      	movs	r3, #1
 8028e70:	4628      	mov	r0, r5
 8028e72:	47b0      	blx	r6
 8028e74:	1c41      	adds	r1, r0, #1
 8028e76:	d1c8      	bne.n	8028e0a <__sflush_r+0x36>
 8028e78:	682b      	ldr	r3, [r5, #0]
 8028e7a:	2b00      	cmp	r3, #0
 8028e7c:	d0c5      	beq.n	8028e0a <__sflush_r+0x36>
 8028e7e:	2b1d      	cmp	r3, #29
 8028e80:	d001      	beq.n	8028e86 <__sflush_r+0xb2>
 8028e82:	2b16      	cmp	r3, #22
 8028e84:	d101      	bne.n	8028e8a <__sflush_r+0xb6>
 8028e86:	602f      	str	r7, [r5, #0]
 8028e88:	e7b1      	b.n	8028dee <__sflush_r+0x1a>
 8028e8a:	89a3      	ldrh	r3, [r4, #12]
 8028e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e90:	81a3      	strh	r3, [r4, #12]
 8028e92:	e7ad      	b.n	8028df0 <__sflush_r+0x1c>
 8028e94:	690f      	ldr	r7, [r1, #16]
 8028e96:	2f00      	cmp	r7, #0
 8028e98:	d0a9      	beq.n	8028dee <__sflush_r+0x1a>
 8028e9a:	0793      	lsls	r3, r2, #30
 8028e9c:	680e      	ldr	r6, [r1, #0]
 8028e9e:	bf08      	it	eq
 8028ea0:	694b      	ldreq	r3, [r1, #20]
 8028ea2:	600f      	str	r7, [r1, #0]
 8028ea4:	bf18      	it	ne
 8028ea6:	2300      	movne	r3, #0
 8028ea8:	eba6 0807 	sub.w	r8, r6, r7
 8028eac:	608b      	str	r3, [r1, #8]
 8028eae:	f1b8 0f00 	cmp.w	r8, #0
 8028eb2:	dd9c      	ble.n	8028dee <__sflush_r+0x1a>
 8028eb4:	6a21      	ldr	r1, [r4, #32]
 8028eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028eb8:	4643      	mov	r3, r8
 8028eba:	463a      	mov	r2, r7
 8028ebc:	4628      	mov	r0, r5
 8028ebe:	47b0      	blx	r6
 8028ec0:	2800      	cmp	r0, #0
 8028ec2:	dc06      	bgt.n	8028ed2 <__sflush_r+0xfe>
 8028ec4:	89a3      	ldrh	r3, [r4, #12]
 8028ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028eca:	81a3      	strh	r3, [r4, #12]
 8028ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8028ed0:	e78e      	b.n	8028df0 <__sflush_r+0x1c>
 8028ed2:	4407      	add	r7, r0
 8028ed4:	eba8 0800 	sub.w	r8, r8, r0
 8028ed8:	e7e9      	b.n	8028eae <__sflush_r+0xda>
 8028eda:	bf00      	nop
 8028edc:	dfbffffe 	.word	0xdfbffffe

08028ee0 <_fflush_r>:
 8028ee0:	b538      	push	{r3, r4, r5, lr}
 8028ee2:	690b      	ldr	r3, [r1, #16]
 8028ee4:	4605      	mov	r5, r0
 8028ee6:	460c      	mov	r4, r1
 8028ee8:	b913      	cbnz	r3, 8028ef0 <_fflush_r+0x10>
 8028eea:	2500      	movs	r5, #0
 8028eec:	4628      	mov	r0, r5
 8028eee:	bd38      	pop	{r3, r4, r5, pc}
 8028ef0:	b118      	cbz	r0, 8028efa <_fflush_r+0x1a>
 8028ef2:	6a03      	ldr	r3, [r0, #32]
 8028ef4:	b90b      	cbnz	r3, 8028efa <_fflush_r+0x1a>
 8028ef6:	f7fc fee9 	bl	8025ccc <__sinit>
 8028efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028efe:	2b00      	cmp	r3, #0
 8028f00:	d0f3      	beq.n	8028eea <_fflush_r+0xa>
 8028f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028f04:	07d0      	lsls	r0, r2, #31
 8028f06:	d404      	bmi.n	8028f12 <_fflush_r+0x32>
 8028f08:	0599      	lsls	r1, r3, #22
 8028f0a:	d402      	bmi.n	8028f12 <_fflush_r+0x32>
 8028f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f0e:	f7fd f822 	bl	8025f56 <__retarget_lock_acquire_recursive>
 8028f12:	4628      	mov	r0, r5
 8028f14:	4621      	mov	r1, r4
 8028f16:	f7ff ff5d 	bl	8028dd4 <__sflush_r>
 8028f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028f1c:	07da      	lsls	r2, r3, #31
 8028f1e:	4605      	mov	r5, r0
 8028f20:	d4e4      	bmi.n	8028eec <_fflush_r+0xc>
 8028f22:	89a3      	ldrh	r3, [r4, #12]
 8028f24:	059b      	lsls	r3, r3, #22
 8028f26:	d4e1      	bmi.n	8028eec <_fflush_r+0xc>
 8028f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028f2a:	f7fd f815 	bl	8025f58 <__retarget_lock_release_recursive>
 8028f2e:	e7dd      	b.n	8028eec <_fflush_r+0xc>

08028f30 <__sccl>:
 8028f30:	b570      	push	{r4, r5, r6, lr}
 8028f32:	780b      	ldrb	r3, [r1, #0]
 8028f34:	4604      	mov	r4, r0
 8028f36:	2b5e      	cmp	r3, #94	; 0x5e
 8028f38:	bf0b      	itete	eq
 8028f3a:	784b      	ldrbeq	r3, [r1, #1]
 8028f3c:	1c4a      	addne	r2, r1, #1
 8028f3e:	1c8a      	addeq	r2, r1, #2
 8028f40:	2100      	movne	r1, #0
 8028f42:	bf08      	it	eq
 8028f44:	2101      	moveq	r1, #1
 8028f46:	3801      	subs	r0, #1
 8028f48:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028f4c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8028f50:	42a8      	cmp	r0, r5
 8028f52:	d1fb      	bne.n	8028f4c <__sccl+0x1c>
 8028f54:	b90b      	cbnz	r3, 8028f5a <__sccl+0x2a>
 8028f56:	1e50      	subs	r0, r2, #1
 8028f58:	bd70      	pop	{r4, r5, r6, pc}
 8028f5a:	f081 0101 	eor.w	r1, r1, #1
 8028f5e:	54e1      	strb	r1, [r4, r3]
 8028f60:	4610      	mov	r0, r2
 8028f62:	4602      	mov	r2, r0
 8028f64:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028f68:	2d2d      	cmp	r5, #45	; 0x2d
 8028f6a:	d005      	beq.n	8028f78 <__sccl+0x48>
 8028f6c:	2d5d      	cmp	r5, #93	; 0x5d
 8028f6e:	d016      	beq.n	8028f9e <__sccl+0x6e>
 8028f70:	2d00      	cmp	r5, #0
 8028f72:	d0f1      	beq.n	8028f58 <__sccl+0x28>
 8028f74:	462b      	mov	r3, r5
 8028f76:	e7f2      	b.n	8028f5e <__sccl+0x2e>
 8028f78:	7846      	ldrb	r6, [r0, #1]
 8028f7a:	2e5d      	cmp	r6, #93	; 0x5d
 8028f7c:	d0fa      	beq.n	8028f74 <__sccl+0x44>
 8028f7e:	42b3      	cmp	r3, r6
 8028f80:	dcf8      	bgt.n	8028f74 <__sccl+0x44>
 8028f82:	3002      	adds	r0, #2
 8028f84:	461a      	mov	r2, r3
 8028f86:	3201      	adds	r2, #1
 8028f88:	4296      	cmp	r6, r2
 8028f8a:	54a1      	strb	r1, [r4, r2]
 8028f8c:	dcfb      	bgt.n	8028f86 <__sccl+0x56>
 8028f8e:	1af2      	subs	r2, r6, r3
 8028f90:	3a01      	subs	r2, #1
 8028f92:	1c5d      	adds	r5, r3, #1
 8028f94:	42b3      	cmp	r3, r6
 8028f96:	bfa8      	it	ge
 8028f98:	2200      	movge	r2, #0
 8028f9a:	18ab      	adds	r3, r5, r2
 8028f9c:	e7e1      	b.n	8028f62 <__sccl+0x32>
 8028f9e:	4610      	mov	r0, r2
 8028fa0:	e7da      	b.n	8028f58 <__sccl+0x28>

08028fa2 <__submore>:
 8028fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fa6:	460c      	mov	r4, r1
 8028fa8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028fae:	4299      	cmp	r1, r3
 8028fb0:	d11d      	bne.n	8028fee <__submore+0x4c>
 8028fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028fb6:	f7fd fec5 	bl	8026d44 <_malloc_r>
 8028fba:	b918      	cbnz	r0, 8028fc4 <__submore+0x22>
 8028fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8028fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028fc8:	63a3      	str	r3, [r4, #56]	; 0x38
 8028fca:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028fce:	6360      	str	r0, [r4, #52]	; 0x34
 8028fd0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028fd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028fd8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028fdc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028fe0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028fe4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028fe8:	6020      	str	r0, [r4, #0]
 8028fea:	2000      	movs	r0, #0
 8028fec:	e7e8      	b.n	8028fc0 <__submore+0x1e>
 8028fee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028ff0:	0077      	lsls	r7, r6, #1
 8028ff2:	463a      	mov	r2, r7
 8028ff4:	f000 fc01 	bl	80297fa <_realloc_r>
 8028ff8:	4605      	mov	r5, r0
 8028ffa:	2800      	cmp	r0, #0
 8028ffc:	d0de      	beq.n	8028fbc <__submore+0x1a>
 8028ffe:	eb00 0806 	add.w	r8, r0, r6
 8029002:	4601      	mov	r1, r0
 8029004:	4632      	mov	r2, r6
 8029006:	4640      	mov	r0, r8
 8029008:	f000 f842 	bl	8029090 <memcpy>
 802900c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8029010:	f8c4 8000 	str.w	r8, [r4]
 8029014:	e7e9      	b.n	8028fea <__submore+0x48>

08029016 <memmove>:
 8029016:	4288      	cmp	r0, r1
 8029018:	b510      	push	{r4, lr}
 802901a:	eb01 0402 	add.w	r4, r1, r2
 802901e:	d902      	bls.n	8029026 <memmove+0x10>
 8029020:	4284      	cmp	r4, r0
 8029022:	4623      	mov	r3, r4
 8029024:	d807      	bhi.n	8029036 <memmove+0x20>
 8029026:	1e43      	subs	r3, r0, #1
 8029028:	42a1      	cmp	r1, r4
 802902a:	d008      	beq.n	802903e <memmove+0x28>
 802902c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029030:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029034:	e7f8      	b.n	8029028 <memmove+0x12>
 8029036:	4402      	add	r2, r0
 8029038:	4601      	mov	r1, r0
 802903a:	428a      	cmp	r2, r1
 802903c:	d100      	bne.n	8029040 <memmove+0x2a>
 802903e:	bd10      	pop	{r4, pc}
 8029040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029044:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029048:	e7f7      	b.n	802903a <memmove+0x24>

0802904a <strncmp>:
 802904a:	b510      	push	{r4, lr}
 802904c:	b16a      	cbz	r2, 802906a <strncmp+0x20>
 802904e:	3901      	subs	r1, #1
 8029050:	1884      	adds	r4, r0, r2
 8029052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029056:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802905a:	429a      	cmp	r2, r3
 802905c:	d103      	bne.n	8029066 <strncmp+0x1c>
 802905e:	42a0      	cmp	r0, r4
 8029060:	d001      	beq.n	8029066 <strncmp+0x1c>
 8029062:	2a00      	cmp	r2, #0
 8029064:	d1f5      	bne.n	8029052 <strncmp+0x8>
 8029066:	1ad0      	subs	r0, r2, r3
 8029068:	bd10      	pop	{r4, pc}
 802906a:	4610      	mov	r0, r2
 802906c:	e7fc      	b.n	8029068 <strncmp+0x1e>
	...

08029070 <_sbrk_r>:
 8029070:	b538      	push	{r3, r4, r5, lr}
 8029072:	4d06      	ldr	r5, [pc, #24]	; (802908c <_sbrk_r+0x1c>)
 8029074:	2300      	movs	r3, #0
 8029076:	4604      	mov	r4, r0
 8029078:	4608      	mov	r0, r1
 802907a:	602b      	str	r3, [r5, #0]
 802907c:	f7f8 fb64 	bl	8021748 <_sbrk>
 8029080:	1c43      	adds	r3, r0, #1
 8029082:	d102      	bne.n	802908a <_sbrk_r+0x1a>
 8029084:	682b      	ldr	r3, [r5, #0]
 8029086:	b103      	cbz	r3, 802908a <_sbrk_r+0x1a>
 8029088:	6023      	str	r3, [r4, #0]
 802908a:	bd38      	pop	{r3, r4, r5, pc}
 802908c:	20000454 	.word	0x20000454

08029090 <memcpy>:
 8029090:	440a      	add	r2, r1
 8029092:	4291      	cmp	r1, r2
 8029094:	f100 33ff 	add.w	r3, r0, #4294967295
 8029098:	d100      	bne.n	802909c <memcpy+0xc>
 802909a:	4770      	bx	lr
 802909c:	b510      	push	{r4, lr}
 802909e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80290a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80290a6:	4291      	cmp	r1, r2
 80290a8:	d1f9      	bne.n	802909e <memcpy+0xe>
 80290aa:	bd10      	pop	{r4, pc}
 80290ac:	0000      	movs	r0, r0
	...

080290b0 <nan>:
 80290b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80290b8 <nan+0x8>
 80290b4:	4770      	bx	lr
 80290b6:	bf00      	nop
 80290b8:	00000000 	.word	0x00000000
 80290bc:	7ff80000 	.word	0x7ff80000

080290c0 <__assert_func>:
 80290c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80290c2:	4614      	mov	r4, r2
 80290c4:	461a      	mov	r2, r3
 80290c6:	4b09      	ldr	r3, [pc, #36]	; (80290ec <__assert_func+0x2c>)
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	4605      	mov	r5, r0
 80290cc:	68d8      	ldr	r0, [r3, #12]
 80290ce:	b14c      	cbz	r4, 80290e4 <__assert_func+0x24>
 80290d0:	4b07      	ldr	r3, [pc, #28]	; (80290f0 <__assert_func+0x30>)
 80290d2:	9100      	str	r1, [sp, #0]
 80290d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80290d8:	4906      	ldr	r1, [pc, #24]	; (80290f4 <__assert_func+0x34>)
 80290da:	462b      	mov	r3, r5
 80290dc:	f000 fc3e 	bl	802995c <fiprintf>
 80290e0:	f000 fc4e 	bl	8029980 <abort>
 80290e4:	4b04      	ldr	r3, [pc, #16]	; (80290f8 <__assert_func+0x38>)
 80290e6:	461c      	mov	r4, r3
 80290e8:	e7f3      	b.n	80290d2 <__assert_func+0x12>
 80290ea:	bf00      	nop
 80290ec:	20000064 	.word	0x20000064
 80290f0:	0802a2fd 	.word	0x0802a2fd
 80290f4:	0802a30a 	.word	0x0802a30a
 80290f8:	0802a338 	.word	0x0802a338

080290fc <_calloc_r>:
 80290fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80290fe:	fba1 2402 	umull	r2, r4, r1, r2
 8029102:	b94c      	cbnz	r4, 8029118 <_calloc_r+0x1c>
 8029104:	4611      	mov	r1, r2
 8029106:	9201      	str	r2, [sp, #4]
 8029108:	f7fd fe1c 	bl	8026d44 <_malloc_r>
 802910c:	9a01      	ldr	r2, [sp, #4]
 802910e:	4605      	mov	r5, r0
 8029110:	b930      	cbnz	r0, 8029120 <_calloc_r+0x24>
 8029112:	4628      	mov	r0, r5
 8029114:	b003      	add	sp, #12
 8029116:	bd30      	pop	{r4, r5, pc}
 8029118:	220c      	movs	r2, #12
 802911a:	6002      	str	r2, [r0, #0]
 802911c:	2500      	movs	r5, #0
 802911e:	e7f8      	b.n	8029112 <_calloc_r+0x16>
 8029120:	4621      	mov	r1, r4
 8029122:	f7fc fe9a 	bl	8025e5a <memset>
 8029126:	e7f4      	b.n	8029112 <_calloc_r+0x16>

08029128 <rshift>:
 8029128:	6903      	ldr	r3, [r0, #16]
 802912a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802912e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029132:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029136:	f100 0414 	add.w	r4, r0, #20
 802913a:	dd45      	ble.n	80291c8 <rshift+0xa0>
 802913c:	f011 011f 	ands.w	r1, r1, #31
 8029140:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029144:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8029148:	d10c      	bne.n	8029164 <rshift+0x3c>
 802914a:	f100 0710 	add.w	r7, r0, #16
 802914e:	4629      	mov	r1, r5
 8029150:	42b1      	cmp	r1, r6
 8029152:	d334      	bcc.n	80291be <rshift+0x96>
 8029154:	1a9b      	subs	r3, r3, r2
 8029156:	009b      	lsls	r3, r3, #2
 8029158:	1eea      	subs	r2, r5, #3
 802915a:	4296      	cmp	r6, r2
 802915c:	bf38      	it	cc
 802915e:	2300      	movcc	r3, #0
 8029160:	4423      	add	r3, r4
 8029162:	e015      	b.n	8029190 <rshift+0x68>
 8029164:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8029168:	f1c1 0820 	rsb	r8, r1, #32
 802916c:	40cf      	lsrs	r7, r1
 802916e:	f105 0e04 	add.w	lr, r5, #4
 8029172:	46a1      	mov	r9, r4
 8029174:	4576      	cmp	r6, lr
 8029176:	46f4      	mov	ip, lr
 8029178:	d815      	bhi.n	80291a6 <rshift+0x7e>
 802917a:	1a9a      	subs	r2, r3, r2
 802917c:	0092      	lsls	r2, r2, #2
 802917e:	3a04      	subs	r2, #4
 8029180:	3501      	adds	r5, #1
 8029182:	42ae      	cmp	r6, r5
 8029184:	bf38      	it	cc
 8029186:	2200      	movcc	r2, #0
 8029188:	18a3      	adds	r3, r4, r2
 802918a:	50a7      	str	r7, [r4, r2]
 802918c:	b107      	cbz	r7, 8029190 <rshift+0x68>
 802918e:	3304      	adds	r3, #4
 8029190:	1b1a      	subs	r2, r3, r4
 8029192:	42a3      	cmp	r3, r4
 8029194:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8029198:	bf08      	it	eq
 802919a:	2300      	moveq	r3, #0
 802919c:	6102      	str	r2, [r0, #16]
 802919e:	bf08      	it	eq
 80291a0:	6143      	streq	r3, [r0, #20]
 80291a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80291a6:	f8dc c000 	ldr.w	ip, [ip]
 80291aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80291ae:	ea4c 0707 	orr.w	r7, ip, r7
 80291b2:	f849 7b04 	str.w	r7, [r9], #4
 80291b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80291ba:	40cf      	lsrs	r7, r1
 80291bc:	e7da      	b.n	8029174 <rshift+0x4c>
 80291be:	f851 cb04 	ldr.w	ip, [r1], #4
 80291c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80291c6:	e7c3      	b.n	8029150 <rshift+0x28>
 80291c8:	4623      	mov	r3, r4
 80291ca:	e7e1      	b.n	8029190 <rshift+0x68>

080291cc <__hexdig_fun>:
 80291cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80291d0:	2b09      	cmp	r3, #9
 80291d2:	d802      	bhi.n	80291da <__hexdig_fun+0xe>
 80291d4:	3820      	subs	r0, #32
 80291d6:	b2c0      	uxtb	r0, r0
 80291d8:	4770      	bx	lr
 80291da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80291de:	2b05      	cmp	r3, #5
 80291e0:	d801      	bhi.n	80291e6 <__hexdig_fun+0x1a>
 80291e2:	3847      	subs	r0, #71	; 0x47
 80291e4:	e7f7      	b.n	80291d6 <__hexdig_fun+0xa>
 80291e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80291ea:	2b05      	cmp	r3, #5
 80291ec:	d801      	bhi.n	80291f2 <__hexdig_fun+0x26>
 80291ee:	3827      	subs	r0, #39	; 0x27
 80291f0:	e7f1      	b.n	80291d6 <__hexdig_fun+0xa>
 80291f2:	2000      	movs	r0, #0
 80291f4:	4770      	bx	lr
	...

080291f8 <__gethex>:
 80291f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291fc:	4617      	mov	r7, r2
 80291fe:	680a      	ldr	r2, [r1, #0]
 8029200:	b085      	sub	sp, #20
 8029202:	f102 0b02 	add.w	fp, r2, #2
 8029206:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802920a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802920e:	4681      	mov	r9, r0
 8029210:	468a      	mov	sl, r1
 8029212:	9302      	str	r3, [sp, #8]
 8029214:	32fe      	adds	r2, #254	; 0xfe
 8029216:	eb02 030b 	add.w	r3, r2, fp
 802921a:	46d8      	mov	r8, fp
 802921c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8029220:	9301      	str	r3, [sp, #4]
 8029222:	2830      	cmp	r0, #48	; 0x30
 8029224:	d0f7      	beq.n	8029216 <__gethex+0x1e>
 8029226:	f7ff ffd1 	bl	80291cc <__hexdig_fun>
 802922a:	4604      	mov	r4, r0
 802922c:	2800      	cmp	r0, #0
 802922e:	d138      	bne.n	80292a2 <__gethex+0xaa>
 8029230:	49a7      	ldr	r1, [pc, #668]	; (80294d0 <__gethex+0x2d8>)
 8029232:	2201      	movs	r2, #1
 8029234:	4640      	mov	r0, r8
 8029236:	f7ff ff08 	bl	802904a <strncmp>
 802923a:	4606      	mov	r6, r0
 802923c:	2800      	cmp	r0, #0
 802923e:	d169      	bne.n	8029314 <__gethex+0x11c>
 8029240:	f898 0001 	ldrb.w	r0, [r8, #1]
 8029244:	465d      	mov	r5, fp
 8029246:	f7ff ffc1 	bl	80291cc <__hexdig_fun>
 802924a:	2800      	cmp	r0, #0
 802924c:	d064      	beq.n	8029318 <__gethex+0x120>
 802924e:	465a      	mov	r2, fp
 8029250:	7810      	ldrb	r0, [r2, #0]
 8029252:	2830      	cmp	r0, #48	; 0x30
 8029254:	4690      	mov	r8, r2
 8029256:	f102 0201 	add.w	r2, r2, #1
 802925a:	d0f9      	beq.n	8029250 <__gethex+0x58>
 802925c:	f7ff ffb6 	bl	80291cc <__hexdig_fun>
 8029260:	2301      	movs	r3, #1
 8029262:	fab0 f480 	clz	r4, r0
 8029266:	0964      	lsrs	r4, r4, #5
 8029268:	465e      	mov	r6, fp
 802926a:	9301      	str	r3, [sp, #4]
 802926c:	4642      	mov	r2, r8
 802926e:	4615      	mov	r5, r2
 8029270:	3201      	adds	r2, #1
 8029272:	7828      	ldrb	r0, [r5, #0]
 8029274:	f7ff ffaa 	bl	80291cc <__hexdig_fun>
 8029278:	2800      	cmp	r0, #0
 802927a:	d1f8      	bne.n	802926e <__gethex+0x76>
 802927c:	4994      	ldr	r1, [pc, #592]	; (80294d0 <__gethex+0x2d8>)
 802927e:	2201      	movs	r2, #1
 8029280:	4628      	mov	r0, r5
 8029282:	f7ff fee2 	bl	802904a <strncmp>
 8029286:	b978      	cbnz	r0, 80292a8 <__gethex+0xb0>
 8029288:	b946      	cbnz	r6, 802929c <__gethex+0xa4>
 802928a:	1c6e      	adds	r6, r5, #1
 802928c:	4632      	mov	r2, r6
 802928e:	4615      	mov	r5, r2
 8029290:	3201      	adds	r2, #1
 8029292:	7828      	ldrb	r0, [r5, #0]
 8029294:	f7ff ff9a 	bl	80291cc <__hexdig_fun>
 8029298:	2800      	cmp	r0, #0
 802929a:	d1f8      	bne.n	802928e <__gethex+0x96>
 802929c:	1b73      	subs	r3, r6, r5
 802929e:	009e      	lsls	r6, r3, #2
 80292a0:	e004      	b.n	80292ac <__gethex+0xb4>
 80292a2:	2400      	movs	r4, #0
 80292a4:	4626      	mov	r6, r4
 80292a6:	e7e1      	b.n	802926c <__gethex+0x74>
 80292a8:	2e00      	cmp	r6, #0
 80292aa:	d1f7      	bne.n	802929c <__gethex+0xa4>
 80292ac:	782b      	ldrb	r3, [r5, #0]
 80292ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80292b2:	2b50      	cmp	r3, #80	; 0x50
 80292b4:	d13d      	bne.n	8029332 <__gethex+0x13a>
 80292b6:	786b      	ldrb	r3, [r5, #1]
 80292b8:	2b2b      	cmp	r3, #43	; 0x2b
 80292ba:	d02f      	beq.n	802931c <__gethex+0x124>
 80292bc:	2b2d      	cmp	r3, #45	; 0x2d
 80292be:	d031      	beq.n	8029324 <__gethex+0x12c>
 80292c0:	1c69      	adds	r1, r5, #1
 80292c2:	f04f 0b00 	mov.w	fp, #0
 80292c6:	7808      	ldrb	r0, [r1, #0]
 80292c8:	f7ff ff80 	bl	80291cc <__hexdig_fun>
 80292cc:	1e42      	subs	r2, r0, #1
 80292ce:	b2d2      	uxtb	r2, r2
 80292d0:	2a18      	cmp	r2, #24
 80292d2:	d82e      	bhi.n	8029332 <__gethex+0x13a>
 80292d4:	f1a0 0210 	sub.w	r2, r0, #16
 80292d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80292dc:	f7ff ff76 	bl	80291cc <__hexdig_fun>
 80292e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80292e4:	fa5f fc8c 	uxtb.w	ip, ip
 80292e8:	f1bc 0f18 	cmp.w	ip, #24
 80292ec:	d91d      	bls.n	802932a <__gethex+0x132>
 80292ee:	f1bb 0f00 	cmp.w	fp, #0
 80292f2:	d000      	beq.n	80292f6 <__gethex+0xfe>
 80292f4:	4252      	negs	r2, r2
 80292f6:	4416      	add	r6, r2
 80292f8:	f8ca 1000 	str.w	r1, [sl]
 80292fc:	b1dc      	cbz	r4, 8029336 <__gethex+0x13e>
 80292fe:	9b01      	ldr	r3, [sp, #4]
 8029300:	2b00      	cmp	r3, #0
 8029302:	bf14      	ite	ne
 8029304:	f04f 0800 	movne.w	r8, #0
 8029308:	f04f 0806 	moveq.w	r8, #6
 802930c:	4640      	mov	r0, r8
 802930e:	b005      	add	sp, #20
 8029310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029314:	4645      	mov	r5, r8
 8029316:	4626      	mov	r6, r4
 8029318:	2401      	movs	r4, #1
 802931a:	e7c7      	b.n	80292ac <__gethex+0xb4>
 802931c:	f04f 0b00 	mov.w	fp, #0
 8029320:	1ca9      	adds	r1, r5, #2
 8029322:	e7d0      	b.n	80292c6 <__gethex+0xce>
 8029324:	f04f 0b01 	mov.w	fp, #1
 8029328:	e7fa      	b.n	8029320 <__gethex+0x128>
 802932a:	230a      	movs	r3, #10
 802932c:	fb03 0002 	mla	r0, r3, r2, r0
 8029330:	e7d0      	b.n	80292d4 <__gethex+0xdc>
 8029332:	4629      	mov	r1, r5
 8029334:	e7e0      	b.n	80292f8 <__gethex+0x100>
 8029336:	eba5 0308 	sub.w	r3, r5, r8
 802933a:	3b01      	subs	r3, #1
 802933c:	4621      	mov	r1, r4
 802933e:	2b07      	cmp	r3, #7
 8029340:	dc0a      	bgt.n	8029358 <__gethex+0x160>
 8029342:	4648      	mov	r0, r9
 8029344:	f7fd fd8a 	bl	8026e5c <_Balloc>
 8029348:	4604      	mov	r4, r0
 802934a:	b940      	cbnz	r0, 802935e <__gethex+0x166>
 802934c:	4b61      	ldr	r3, [pc, #388]	; (80294d4 <__gethex+0x2dc>)
 802934e:	4602      	mov	r2, r0
 8029350:	21e4      	movs	r1, #228	; 0xe4
 8029352:	4861      	ldr	r0, [pc, #388]	; (80294d8 <__gethex+0x2e0>)
 8029354:	f7ff feb4 	bl	80290c0 <__assert_func>
 8029358:	3101      	adds	r1, #1
 802935a:	105b      	asrs	r3, r3, #1
 802935c:	e7ef      	b.n	802933e <__gethex+0x146>
 802935e:	f100 0a14 	add.w	sl, r0, #20
 8029362:	2300      	movs	r3, #0
 8029364:	495a      	ldr	r1, [pc, #360]	; (80294d0 <__gethex+0x2d8>)
 8029366:	f8cd a004 	str.w	sl, [sp, #4]
 802936a:	469b      	mov	fp, r3
 802936c:	45a8      	cmp	r8, r5
 802936e:	d342      	bcc.n	80293f6 <__gethex+0x1fe>
 8029370:	9801      	ldr	r0, [sp, #4]
 8029372:	f840 bb04 	str.w	fp, [r0], #4
 8029376:	eba0 000a 	sub.w	r0, r0, sl
 802937a:	1080      	asrs	r0, r0, #2
 802937c:	6120      	str	r0, [r4, #16]
 802937e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8029382:	4658      	mov	r0, fp
 8029384:	f7fd fe5c 	bl	8027040 <__hi0bits>
 8029388:	683d      	ldr	r5, [r7, #0]
 802938a:	eba8 0000 	sub.w	r0, r8, r0
 802938e:	42a8      	cmp	r0, r5
 8029390:	dd59      	ble.n	8029446 <__gethex+0x24e>
 8029392:	eba0 0805 	sub.w	r8, r0, r5
 8029396:	4641      	mov	r1, r8
 8029398:	4620      	mov	r0, r4
 802939a:	f7fe f9eb 	bl	8027774 <__any_on>
 802939e:	4683      	mov	fp, r0
 80293a0:	b1b8      	cbz	r0, 80293d2 <__gethex+0x1da>
 80293a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80293a6:	1159      	asrs	r1, r3, #5
 80293a8:	f003 021f 	and.w	r2, r3, #31
 80293ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80293b0:	f04f 0b01 	mov.w	fp, #1
 80293b4:	fa0b f202 	lsl.w	r2, fp, r2
 80293b8:	420a      	tst	r2, r1
 80293ba:	d00a      	beq.n	80293d2 <__gethex+0x1da>
 80293bc:	455b      	cmp	r3, fp
 80293be:	dd06      	ble.n	80293ce <__gethex+0x1d6>
 80293c0:	f1a8 0102 	sub.w	r1, r8, #2
 80293c4:	4620      	mov	r0, r4
 80293c6:	f7fe f9d5 	bl	8027774 <__any_on>
 80293ca:	2800      	cmp	r0, #0
 80293cc:	d138      	bne.n	8029440 <__gethex+0x248>
 80293ce:	f04f 0b02 	mov.w	fp, #2
 80293d2:	4641      	mov	r1, r8
 80293d4:	4620      	mov	r0, r4
 80293d6:	f7ff fea7 	bl	8029128 <rshift>
 80293da:	4446      	add	r6, r8
 80293dc:	68bb      	ldr	r3, [r7, #8]
 80293de:	42b3      	cmp	r3, r6
 80293e0:	da41      	bge.n	8029466 <__gethex+0x26e>
 80293e2:	4621      	mov	r1, r4
 80293e4:	4648      	mov	r0, r9
 80293e6:	f7fd fd79 	bl	8026edc <_Bfree>
 80293ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80293ec:	2300      	movs	r3, #0
 80293ee:	6013      	str	r3, [r2, #0]
 80293f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80293f4:	e78a      	b.n	802930c <__gethex+0x114>
 80293f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80293fa:	2a2e      	cmp	r2, #46	; 0x2e
 80293fc:	d014      	beq.n	8029428 <__gethex+0x230>
 80293fe:	2b20      	cmp	r3, #32
 8029400:	d106      	bne.n	8029410 <__gethex+0x218>
 8029402:	9b01      	ldr	r3, [sp, #4]
 8029404:	f843 bb04 	str.w	fp, [r3], #4
 8029408:	f04f 0b00 	mov.w	fp, #0
 802940c:	9301      	str	r3, [sp, #4]
 802940e:	465b      	mov	r3, fp
 8029410:	7828      	ldrb	r0, [r5, #0]
 8029412:	9303      	str	r3, [sp, #12]
 8029414:	f7ff feda 	bl	80291cc <__hexdig_fun>
 8029418:	9b03      	ldr	r3, [sp, #12]
 802941a:	f000 000f 	and.w	r0, r0, #15
 802941e:	4098      	lsls	r0, r3
 8029420:	ea4b 0b00 	orr.w	fp, fp, r0
 8029424:	3304      	adds	r3, #4
 8029426:	e7a1      	b.n	802936c <__gethex+0x174>
 8029428:	45a8      	cmp	r8, r5
 802942a:	d8e8      	bhi.n	80293fe <__gethex+0x206>
 802942c:	2201      	movs	r2, #1
 802942e:	4628      	mov	r0, r5
 8029430:	9303      	str	r3, [sp, #12]
 8029432:	f7ff fe0a 	bl	802904a <strncmp>
 8029436:	4926      	ldr	r1, [pc, #152]	; (80294d0 <__gethex+0x2d8>)
 8029438:	9b03      	ldr	r3, [sp, #12]
 802943a:	2800      	cmp	r0, #0
 802943c:	d1df      	bne.n	80293fe <__gethex+0x206>
 802943e:	e795      	b.n	802936c <__gethex+0x174>
 8029440:	f04f 0b03 	mov.w	fp, #3
 8029444:	e7c5      	b.n	80293d2 <__gethex+0x1da>
 8029446:	da0b      	bge.n	8029460 <__gethex+0x268>
 8029448:	eba5 0800 	sub.w	r8, r5, r0
 802944c:	4621      	mov	r1, r4
 802944e:	4642      	mov	r2, r8
 8029450:	4648      	mov	r0, r9
 8029452:	f7fd ff5d 	bl	8027310 <__lshift>
 8029456:	eba6 0608 	sub.w	r6, r6, r8
 802945a:	4604      	mov	r4, r0
 802945c:	f100 0a14 	add.w	sl, r0, #20
 8029460:	f04f 0b00 	mov.w	fp, #0
 8029464:	e7ba      	b.n	80293dc <__gethex+0x1e4>
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	42b3      	cmp	r3, r6
 802946a:	dd73      	ble.n	8029554 <__gethex+0x35c>
 802946c:	1b9e      	subs	r6, r3, r6
 802946e:	42b5      	cmp	r5, r6
 8029470:	dc34      	bgt.n	80294dc <__gethex+0x2e4>
 8029472:	68fb      	ldr	r3, [r7, #12]
 8029474:	2b02      	cmp	r3, #2
 8029476:	d023      	beq.n	80294c0 <__gethex+0x2c8>
 8029478:	2b03      	cmp	r3, #3
 802947a:	d025      	beq.n	80294c8 <__gethex+0x2d0>
 802947c:	2b01      	cmp	r3, #1
 802947e:	d115      	bne.n	80294ac <__gethex+0x2b4>
 8029480:	42b5      	cmp	r5, r6
 8029482:	d113      	bne.n	80294ac <__gethex+0x2b4>
 8029484:	2d01      	cmp	r5, #1
 8029486:	d10b      	bne.n	80294a0 <__gethex+0x2a8>
 8029488:	9a02      	ldr	r2, [sp, #8]
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	6013      	str	r3, [r2, #0]
 802948e:	2301      	movs	r3, #1
 8029490:	6123      	str	r3, [r4, #16]
 8029492:	f8ca 3000 	str.w	r3, [sl]
 8029496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029498:	f04f 0862 	mov.w	r8, #98	; 0x62
 802949c:	601c      	str	r4, [r3, #0]
 802949e:	e735      	b.n	802930c <__gethex+0x114>
 80294a0:	1e69      	subs	r1, r5, #1
 80294a2:	4620      	mov	r0, r4
 80294a4:	f7fe f966 	bl	8027774 <__any_on>
 80294a8:	2800      	cmp	r0, #0
 80294aa:	d1ed      	bne.n	8029488 <__gethex+0x290>
 80294ac:	4621      	mov	r1, r4
 80294ae:	4648      	mov	r0, r9
 80294b0:	f7fd fd14 	bl	8026edc <_Bfree>
 80294b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80294b6:	2300      	movs	r3, #0
 80294b8:	6013      	str	r3, [r2, #0]
 80294ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 80294be:	e725      	b.n	802930c <__gethex+0x114>
 80294c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80294c2:	2b00      	cmp	r3, #0
 80294c4:	d1f2      	bne.n	80294ac <__gethex+0x2b4>
 80294c6:	e7df      	b.n	8029488 <__gethex+0x290>
 80294c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80294ca:	2b00      	cmp	r3, #0
 80294cc:	d1dc      	bne.n	8029488 <__gethex+0x290>
 80294ce:	e7ed      	b.n	80294ac <__gethex+0x2b4>
 80294d0:	0802a174 	.word	0x0802a174
 80294d4:	0802a007 	.word	0x0802a007
 80294d8:	0802a339 	.word	0x0802a339
 80294dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80294e0:	f1bb 0f00 	cmp.w	fp, #0
 80294e4:	d133      	bne.n	802954e <__gethex+0x356>
 80294e6:	f1b8 0f00 	cmp.w	r8, #0
 80294ea:	d004      	beq.n	80294f6 <__gethex+0x2fe>
 80294ec:	4641      	mov	r1, r8
 80294ee:	4620      	mov	r0, r4
 80294f0:	f7fe f940 	bl	8027774 <__any_on>
 80294f4:	4683      	mov	fp, r0
 80294f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80294fa:	2301      	movs	r3, #1
 80294fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8029500:	f008 081f 	and.w	r8, r8, #31
 8029504:	fa03 f308 	lsl.w	r3, r3, r8
 8029508:	4213      	tst	r3, r2
 802950a:	4631      	mov	r1, r6
 802950c:	4620      	mov	r0, r4
 802950e:	bf18      	it	ne
 8029510:	f04b 0b02 	orrne.w	fp, fp, #2
 8029514:	1bad      	subs	r5, r5, r6
 8029516:	f7ff fe07 	bl	8029128 <rshift>
 802951a:	687e      	ldr	r6, [r7, #4]
 802951c:	f04f 0802 	mov.w	r8, #2
 8029520:	f1bb 0f00 	cmp.w	fp, #0
 8029524:	d04a      	beq.n	80295bc <__gethex+0x3c4>
 8029526:	68fb      	ldr	r3, [r7, #12]
 8029528:	2b02      	cmp	r3, #2
 802952a:	d016      	beq.n	802955a <__gethex+0x362>
 802952c:	2b03      	cmp	r3, #3
 802952e:	d018      	beq.n	8029562 <__gethex+0x36a>
 8029530:	2b01      	cmp	r3, #1
 8029532:	d109      	bne.n	8029548 <__gethex+0x350>
 8029534:	f01b 0f02 	tst.w	fp, #2
 8029538:	d006      	beq.n	8029548 <__gethex+0x350>
 802953a:	f8da 3000 	ldr.w	r3, [sl]
 802953e:	ea4b 0b03 	orr.w	fp, fp, r3
 8029542:	f01b 0f01 	tst.w	fp, #1
 8029546:	d10f      	bne.n	8029568 <__gethex+0x370>
 8029548:	f048 0810 	orr.w	r8, r8, #16
 802954c:	e036      	b.n	80295bc <__gethex+0x3c4>
 802954e:	f04f 0b01 	mov.w	fp, #1
 8029552:	e7d0      	b.n	80294f6 <__gethex+0x2fe>
 8029554:	f04f 0801 	mov.w	r8, #1
 8029558:	e7e2      	b.n	8029520 <__gethex+0x328>
 802955a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802955c:	f1c3 0301 	rsb	r3, r3, #1
 8029560:	930f      	str	r3, [sp, #60]	; 0x3c
 8029562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029564:	2b00      	cmp	r3, #0
 8029566:	d0ef      	beq.n	8029548 <__gethex+0x350>
 8029568:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802956c:	f104 0214 	add.w	r2, r4, #20
 8029570:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8029574:	9301      	str	r3, [sp, #4]
 8029576:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 802957a:	2300      	movs	r3, #0
 802957c:	4694      	mov	ip, r2
 802957e:	f852 1b04 	ldr.w	r1, [r2], #4
 8029582:	f1b1 3fff 	cmp.w	r1, #4294967295
 8029586:	d01e      	beq.n	80295c6 <__gethex+0x3ce>
 8029588:	3101      	adds	r1, #1
 802958a:	f8cc 1000 	str.w	r1, [ip]
 802958e:	f1b8 0f02 	cmp.w	r8, #2
 8029592:	f104 0214 	add.w	r2, r4, #20
 8029596:	d13d      	bne.n	8029614 <__gethex+0x41c>
 8029598:	683b      	ldr	r3, [r7, #0]
 802959a:	3b01      	subs	r3, #1
 802959c:	42ab      	cmp	r3, r5
 802959e:	d10b      	bne.n	80295b8 <__gethex+0x3c0>
 80295a0:	1169      	asrs	r1, r5, #5
 80295a2:	2301      	movs	r3, #1
 80295a4:	f005 051f 	and.w	r5, r5, #31
 80295a8:	fa03 f505 	lsl.w	r5, r3, r5
 80295ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80295b0:	421d      	tst	r5, r3
 80295b2:	bf18      	it	ne
 80295b4:	f04f 0801 	movne.w	r8, #1
 80295b8:	f048 0820 	orr.w	r8, r8, #32
 80295bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80295be:	601c      	str	r4, [r3, #0]
 80295c0:	9b02      	ldr	r3, [sp, #8]
 80295c2:	601e      	str	r6, [r3, #0]
 80295c4:	e6a2      	b.n	802930c <__gethex+0x114>
 80295c6:	4290      	cmp	r0, r2
 80295c8:	f842 3c04 	str.w	r3, [r2, #-4]
 80295cc:	d8d6      	bhi.n	802957c <__gethex+0x384>
 80295ce:	68a2      	ldr	r2, [r4, #8]
 80295d0:	4593      	cmp	fp, r2
 80295d2:	db17      	blt.n	8029604 <__gethex+0x40c>
 80295d4:	6861      	ldr	r1, [r4, #4]
 80295d6:	4648      	mov	r0, r9
 80295d8:	3101      	adds	r1, #1
 80295da:	f7fd fc3f 	bl	8026e5c <_Balloc>
 80295de:	4682      	mov	sl, r0
 80295e0:	b918      	cbnz	r0, 80295ea <__gethex+0x3f2>
 80295e2:	4b1b      	ldr	r3, [pc, #108]	; (8029650 <__gethex+0x458>)
 80295e4:	4602      	mov	r2, r0
 80295e6:	2184      	movs	r1, #132	; 0x84
 80295e8:	e6b3      	b.n	8029352 <__gethex+0x15a>
 80295ea:	6922      	ldr	r2, [r4, #16]
 80295ec:	3202      	adds	r2, #2
 80295ee:	f104 010c 	add.w	r1, r4, #12
 80295f2:	0092      	lsls	r2, r2, #2
 80295f4:	300c      	adds	r0, #12
 80295f6:	f7ff fd4b 	bl	8029090 <memcpy>
 80295fa:	4621      	mov	r1, r4
 80295fc:	4648      	mov	r0, r9
 80295fe:	f7fd fc6d 	bl	8026edc <_Bfree>
 8029602:	4654      	mov	r4, sl
 8029604:	6922      	ldr	r2, [r4, #16]
 8029606:	1c51      	adds	r1, r2, #1
 8029608:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802960c:	6121      	str	r1, [r4, #16]
 802960e:	2101      	movs	r1, #1
 8029610:	6151      	str	r1, [r2, #20]
 8029612:	e7bc      	b.n	802958e <__gethex+0x396>
 8029614:	6921      	ldr	r1, [r4, #16]
 8029616:	4559      	cmp	r1, fp
 8029618:	dd0b      	ble.n	8029632 <__gethex+0x43a>
 802961a:	2101      	movs	r1, #1
 802961c:	4620      	mov	r0, r4
 802961e:	f7ff fd83 	bl	8029128 <rshift>
 8029622:	68bb      	ldr	r3, [r7, #8]
 8029624:	3601      	adds	r6, #1
 8029626:	42b3      	cmp	r3, r6
 8029628:	f6ff aedb 	blt.w	80293e2 <__gethex+0x1ea>
 802962c:	f04f 0801 	mov.w	r8, #1
 8029630:	e7c2      	b.n	80295b8 <__gethex+0x3c0>
 8029632:	f015 051f 	ands.w	r5, r5, #31
 8029636:	d0f9      	beq.n	802962c <__gethex+0x434>
 8029638:	9b01      	ldr	r3, [sp, #4]
 802963a:	441a      	add	r2, r3
 802963c:	f1c5 0520 	rsb	r5, r5, #32
 8029640:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8029644:	f7fd fcfc 	bl	8027040 <__hi0bits>
 8029648:	42a8      	cmp	r0, r5
 802964a:	dbe6      	blt.n	802961a <__gethex+0x422>
 802964c:	e7ee      	b.n	802962c <__gethex+0x434>
 802964e:	bf00      	nop
 8029650:	0802a007 	.word	0x0802a007

08029654 <L_shift>:
 8029654:	f1c2 0208 	rsb	r2, r2, #8
 8029658:	0092      	lsls	r2, r2, #2
 802965a:	b570      	push	{r4, r5, r6, lr}
 802965c:	f1c2 0620 	rsb	r6, r2, #32
 8029660:	6843      	ldr	r3, [r0, #4]
 8029662:	6804      	ldr	r4, [r0, #0]
 8029664:	fa03 f506 	lsl.w	r5, r3, r6
 8029668:	432c      	orrs	r4, r5
 802966a:	40d3      	lsrs	r3, r2
 802966c:	6004      	str	r4, [r0, #0]
 802966e:	f840 3f04 	str.w	r3, [r0, #4]!
 8029672:	4288      	cmp	r0, r1
 8029674:	d3f4      	bcc.n	8029660 <L_shift+0xc>
 8029676:	bd70      	pop	{r4, r5, r6, pc}

08029678 <__match>:
 8029678:	b530      	push	{r4, r5, lr}
 802967a:	6803      	ldr	r3, [r0, #0]
 802967c:	3301      	adds	r3, #1
 802967e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029682:	b914      	cbnz	r4, 802968a <__match+0x12>
 8029684:	6003      	str	r3, [r0, #0]
 8029686:	2001      	movs	r0, #1
 8029688:	bd30      	pop	{r4, r5, pc}
 802968a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802968e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8029692:	2d19      	cmp	r5, #25
 8029694:	bf98      	it	ls
 8029696:	3220      	addls	r2, #32
 8029698:	42a2      	cmp	r2, r4
 802969a:	d0f0      	beq.n	802967e <__match+0x6>
 802969c:	2000      	movs	r0, #0
 802969e:	e7f3      	b.n	8029688 <__match+0x10>

080296a0 <__hexnan>:
 80296a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296a4:	680b      	ldr	r3, [r1, #0]
 80296a6:	6801      	ldr	r1, [r0, #0]
 80296a8:	115e      	asrs	r6, r3, #5
 80296aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80296ae:	f013 031f 	ands.w	r3, r3, #31
 80296b2:	b087      	sub	sp, #28
 80296b4:	bf18      	it	ne
 80296b6:	3604      	addne	r6, #4
 80296b8:	2500      	movs	r5, #0
 80296ba:	1f37      	subs	r7, r6, #4
 80296bc:	4682      	mov	sl, r0
 80296be:	4690      	mov	r8, r2
 80296c0:	9301      	str	r3, [sp, #4]
 80296c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80296c6:	46b9      	mov	r9, r7
 80296c8:	463c      	mov	r4, r7
 80296ca:	9502      	str	r5, [sp, #8]
 80296cc:	46ab      	mov	fp, r5
 80296ce:	784a      	ldrb	r2, [r1, #1]
 80296d0:	1c4b      	adds	r3, r1, #1
 80296d2:	9303      	str	r3, [sp, #12]
 80296d4:	b342      	cbz	r2, 8029728 <__hexnan+0x88>
 80296d6:	4610      	mov	r0, r2
 80296d8:	9105      	str	r1, [sp, #20]
 80296da:	9204      	str	r2, [sp, #16]
 80296dc:	f7ff fd76 	bl	80291cc <__hexdig_fun>
 80296e0:	2800      	cmp	r0, #0
 80296e2:	d14f      	bne.n	8029784 <__hexnan+0xe4>
 80296e4:	9a04      	ldr	r2, [sp, #16]
 80296e6:	9905      	ldr	r1, [sp, #20]
 80296e8:	2a20      	cmp	r2, #32
 80296ea:	d818      	bhi.n	802971e <__hexnan+0x7e>
 80296ec:	9b02      	ldr	r3, [sp, #8]
 80296ee:	459b      	cmp	fp, r3
 80296f0:	dd13      	ble.n	802971a <__hexnan+0x7a>
 80296f2:	454c      	cmp	r4, r9
 80296f4:	d206      	bcs.n	8029704 <__hexnan+0x64>
 80296f6:	2d07      	cmp	r5, #7
 80296f8:	dc04      	bgt.n	8029704 <__hexnan+0x64>
 80296fa:	462a      	mov	r2, r5
 80296fc:	4649      	mov	r1, r9
 80296fe:	4620      	mov	r0, r4
 8029700:	f7ff ffa8 	bl	8029654 <L_shift>
 8029704:	4544      	cmp	r4, r8
 8029706:	d950      	bls.n	80297aa <__hexnan+0x10a>
 8029708:	2300      	movs	r3, #0
 802970a:	f1a4 0904 	sub.w	r9, r4, #4
 802970e:	f844 3c04 	str.w	r3, [r4, #-4]
 8029712:	f8cd b008 	str.w	fp, [sp, #8]
 8029716:	464c      	mov	r4, r9
 8029718:	461d      	mov	r5, r3
 802971a:	9903      	ldr	r1, [sp, #12]
 802971c:	e7d7      	b.n	80296ce <__hexnan+0x2e>
 802971e:	2a29      	cmp	r2, #41	; 0x29
 8029720:	d155      	bne.n	80297ce <__hexnan+0x12e>
 8029722:	3102      	adds	r1, #2
 8029724:	f8ca 1000 	str.w	r1, [sl]
 8029728:	f1bb 0f00 	cmp.w	fp, #0
 802972c:	d04f      	beq.n	80297ce <__hexnan+0x12e>
 802972e:	454c      	cmp	r4, r9
 8029730:	d206      	bcs.n	8029740 <__hexnan+0xa0>
 8029732:	2d07      	cmp	r5, #7
 8029734:	dc04      	bgt.n	8029740 <__hexnan+0xa0>
 8029736:	462a      	mov	r2, r5
 8029738:	4649      	mov	r1, r9
 802973a:	4620      	mov	r0, r4
 802973c:	f7ff ff8a 	bl	8029654 <L_shift>
 8029740:	4544      	cmp	r4, r8
 8029742:	d934      	bls.n	80297ae <__hexnan+0x10e>
 8029744:	f1a8 0204 	sub.w	r2, r8, #4
 8029748:	4623      	mov	r3, r4
 802974a:	f853 1b04 	ldr.w	r1, [r3], #4
 802974e:	f842 1f04 	str.w	r1, [r2, #4]!
 8029752:	429f      	cmp	r7, r3
 8029754:	d2f9      	bcs.n	802974a <__hexnan+0xaa>
 8029756:	1b3b      	subs	r3, r7, r4
 8029758:	f023 0303 	bic.w	r3, r3, #3
 802975c:	3304      	adds	r3, #4
 802975e:	3e03      	subs	r6, #3
 8029760:	3401      	adds	r4, #1
 8029762:	42a6      	cmp	r6, r4
 8029764:	bf38      	it	cc
 8029766:	2304      	movcc	r3, #4
 8029768:	4443      	add	r3, r8
 802976a:	2200      	movs	r2, #0
 802976c:	f843 2b04 	str.w	r2, [r3], #4
 8029770:	429f      	cmp	r7, r3
 8029772:	d2fb      	bcs.n	802976c <__hexnan+0xcc>
 8029774:	683b      	ldr	r3, [r7, #0]
 8029776:	b91b      	cbnz	r3, 8029780 <__hexnan+0xe0>
 8029778:	4547      	cmp	r7, r8
 802977a:	d126      	bne.n	80297ca <__hexnan+0x12a>
 802977c:	2301      	movs	r3, #1
 802977e:	603b      	str	r3, [r7, #0]
 8029780:	2005      	movs	r0, #5
 8029782:	e025      	b.n	80297d0 <__hexnan+0x130>
 8029784:	3501      	adds	r5, #1
 8029786:	2d08      	cmp	r5, #8
 8029788:	f10b 0b01 	add.w	fp, fp, #1
 802978c:	dd06      	ble.n	802979c <__hexnan+0xfc>
 802978e:	4544      	cmp	r4, r8
 8029790:	d9c3      	bls.n	802971a <__hexnan+0x7a>
 8029792:	2300      	movs	r3, #0
 8029794:	f844 3c04 	str.w	r3, [r4, #-4]
 8029798:	2501      	movs	r5, #1
 802979a:	3c04      	subs	r4, #4
 802979c:	6822      	ldr	r2, [r4, #0]
 802979e:	f000 000f 	and.w	r0, r0, #15
 80297a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80297a6:	6020      	str	r0, [r4, #0]
 80297a8:	e7b7      	b.n	802971a <__hexnan+0x7a>
 80297aa:	2508      	movs	r5, #8
 80297ac:	e7b5      	b.n	802971a <__hexnan+0x7a>
 80297ae:	9b01      	ldr	r3, [sp, #4]
 80297b0:	2b00      	cmp	r3, #0
 80297b2:	d0df      	beq.n	8029774 <__hexnan+0xd4>
 80297b4:	f1c3 0320 	rsb	r3, r3, #32
 80297b8:	f04f 32ff 	mov.w	r2, #4294967295
 80297bc:	40da      	lsrs	r2, r3
 80297be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80297c2:	4013      	ands	r3, r2
 80297c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80297c8:	e7d4      	b.n	8029774 <__hexnan+0xd4>
 80297ca:	3f04      	subs	r7, #4
 80297cc:	e7d2      	b.n	8029774 <__hexnan+0xd4>
 80297ce:	2004      	movs	r0, #4
 80297d0:	b007      	add	sp, #28
 80297d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080297d6 <__ascii_mbtowc>:
 80297d6:	b082      	sub	sp, #8
 80297d8:	b901      	cbnz	r1, 80297dc <__ascii_mbtowc+0x6>
 80297da:	a901      	add	r1, sp, #4
 80297dc:	b142      	cbz	r2, 80297f0 <__ascii_mbtowc+0x1a>
 80297de:	b14b      	cbz	r3, 80297f4 <__ascii_mbtowc+0x1e>
 80297e0:	7813      	ldrb	r3, [r2, #0]
 80297e2:	600b      	str	r3, [r1, #0]
 80297e4:	7812      	ldrb	r2, [r2, #0]
 80297e6:	1e10      	subs	r0, r2, #0
 80297e8:	bf18      	it	ne
 80297ea:	2001      	movne	r0, #1
 80297ec:	b002      	add	sp, #8
 80297ee:	4770      	bx	lr
 80297f0:	4610      	mov	r0, r2
 80297f2:	e7fb      	b.n	80297ec <__ascii_mbtowc+0x16>
 80297f4:	f06f 0001 	mvn.w	r0, #1
 80297f8:	e7f8      	b.n	80297ec <__ascii_mbtowc+0x16>

080297fa <_realloc_r>:
 80297fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80297fe:	4680      	mov	r8, r0
 8029800:	4614      	mov	r4, r2
 8029802:	460e      	mov	r6, r1
 8029804:	b921      	cbnz	r1, 8029810 <_realloc_r+0x16>
 8029806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802980a:	4611      	mov	r1, r2
 802980c:	f7fd ba9a 	b.w	8026d44 <_malloc_r>
 8029810:	b92a      	cbnz	r2, 802981e <_realloc_r+0x24>
 8029812:	f7fd fa23 	bl	8026c5c <_free_r>
 8029816:	4625      	mov	r5, r4
 8029818:	4628      	mov	r0, r5
 802981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802981e:	f000 f8b6 	bl	802998e <_malloc_usable_size_r>
 8029822:	4284      	cmp	r4, r0
 8029824:	4607      	mov	r7, r0
 8029826:	d802      	bhi.n	802982e <_realloc_r+0x34>
 8029828:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802982c:	d812      	bhi.n	8029854 <_realloc_r+0x5a>
 802982e:	4621      	mov	r1, r4
 8029830:	4640      	mov	r0, r8
 8029832:	f7fd fa87 	bl	8026d44 <_malloc_r>
 8029836:	4605      	mov	r5, r0
 8029838:	2800      	cmp	r0, #0
 802983a:	d0ed      	beq.n	8029818 <_realloc_r+0x1e>
 802983c:	42bc      	cmp	r4, r7
 802983e:	4622      	mov	r2, r4
 8029840:	4631      	mov	r1, r6
 8029842:	bf28      	it	cs
 8029844:	463a      	movcs	r2, r7
 8029846:	f7ff fc23 	bl	8029090 <memcpy>
 802984a:	4631      	mov	r1, r6
 802984c:	4640      	mov	r0, r8
 802984e:	f7fd fa05 	bl	8026c5c <_free_r>
 8029852:	e7e1      	b.n	8029818 <_realloc_r+0x1e>
 8029854:	4635      	mov	r5, r6
 8029856:	e7df      	b.n	8029818 <_realloc_r+0x1e>

08029858 <_strtoul_l.constprop.0>:
 8029858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802985c:	4f36      	ldr	r7, [pc, #216]	; (8029938 <_strtoul_l.constprop.0+0xe0>)
 802985e:	4686      	mov	lr, r0
 8029860:	460d      	mov	r5, r1
 8029862:	4628      	mov	r0, r5
 8029864:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029868:	5d3e      	ldrb	r6, [r7, r4]
 802986a:	f016 0608 	ands.w	r6, r6, #8
 802986e:	d1f8      	bne.n	8029862 <_strtoul_l.constprop.0+0xa>
 8029870:	2c2d      	cmp	r4, #45	; 0x2d
 8029872:	d130      	bne.n	80298d6 <_strtoul_l.constprop.0+0x7e>
 8029874:	782c      	ldrb	r4, [r5, #0]
 8029876:	2601      	movs	r6, #1
 8029878:	1c85      	adds	r5, r0, #2
 802987a:	2b00      	cmp	r3, #0
 802987c:	d057      	beq.n	802992e <_strtoul_l.constprop.0+0xd6>
 802987e:	2b10      	cmp	r3, #16
 8029880:	d109      	bne.n	8029896 <_strtoul_l.constprop.0+0x3e>
 8029882:	2c30      	cmp	r4, #48	; 0x30
 8029884:	d107      	bne.n	8029896 <_strtoul_l.constprop.0+0x3e>
 8029886:	7828      	ldrb	r0, [r5, #0]
 8029888:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802988c:	2858      	cmp	r0, #88	; 0x58
 802988e:	d149      	bne.n	8029924 <_strtoul_l.constprop.0+0xcc>
 8029890:	786c      	ldrb	r4, [r5, #1]
 8029892:	2310      	movs	r3, #16
 8029894:	3502      	adds	r5, #2
 8029896:	f04f 38ff 	mov.w	r8, #4294967295
 802989a:	2700      	movs	r7, #0
 802989c:	fbb8 f8f3 	udiv	r8, r8, r3
 80298a0:	fb03 f908 	mul.w	r9, r3, r8
 80298a4:	ea6f 0909 	mvn.w	r9, r9
 80298a8:	4638      	mov	r0, r7
 80298aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80298ae:	f1bc 0f09 	cmp.w	ip, #9
 80298b2:	d815      	bhi.n	80298e0 <_strtoul_l.constprop.0+0x88>
 80298b4:	4664      	mov	r4, ip
 80298b6:	42a3      	cmp	r3, r4
 80298b8:	dd23      	ble.n	8029902 <_strtoul_l.constprop.0+0xaa>
 80298ba:	f1b7 3fff 	cmp.w	r7, #4294967295
 80298be:	d007      	beq.n	80298d0 <_strtoul_l.constprop.0+0x78>
 80298c0:	4580      	cmp	r8, r0
 80298c2:	d31b      	bcc.n	80298fc <_strtoul_l.constprop.0+0xa4>
 80298c4:	d101      	bne.n	80298ca <_strtoul_l.constprop.0+0x72>
 80298c6:	45a1      	cmp	r9, r4
 80298c8:	db18      	blt.n	80298fc <_strtoul_l.constprop.0+0xa4>
 80298ca:	fb00 4003 	mla	r0, r0, r3, r4
 80298ce:	2701      	movs	r7, #1
 80298d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80298d4:	e7e9      	b.n	80298aa <_strtoul_l.constprop.0+0x52>
 80298d6:	2c2b      	cmp	r4, #43	; 0x2b
 80298d8:	bf04      	itt	eq
 80298da:	782c      	ldrbeq	r4, [r5, #0]
 80298dc:	1c85      	addeq	r5, r0, #2
 80298de:	e7cc      	b.n	802987a <_strtoul_l.constprop.0+0x22>
 80298e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80298e4:	f1bc 0f19 	cmp.w	ip, #25
 80298e8:	d801      	bhi.n	80298ee <_strtoul_l.constprop.0+0x96>
 80298ea:	3c37      	subs	r4, #55	; 0x37
 80298ec:	e7e3      	b.n	80298b6 <_strtoul_l.constprop.0+0x5e>
 80298ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80298f2:	f1bc 0f19 	cmp.w	ip, #25
 80298f6:	d804      	bhi.n	8029902 <_strtoul_l.constprop.0+0xaa>
 80298f8:	3c57      	subs	r4, #87	; 0x57
 80298fa:	e7dc      	b.n	80298b6 <_strtoul_l.constprop.0+0x5e>
 80298fc:	f04f 37ff 	mov.w	r7, #4294967295
 8029900:	e7e6      	b.n	80298d0 <_strtoul_l.constprop.0+0x78>
 8029902:	1c7b      	adds	r3, r7, #1
 8029904:	d106      	bne.n	8029914 <_strtoul_l.constprop.0+0xbc>
 8029906:	2322      	movs	r3, #34	; 0x22
 8029908:	f8ce 3000 	str.w	r3, [lr]
 802990c:	4638      	mov	r0, r7
 802990e:	b932      	cbnz	r2, 802991e <_strtoul_l.constprop.0+0xc6>
 8029910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029914:	b106      	cbz	r6, 8029918 <_strtoul_l.constprop.0+0xc0>
 8029916:	4240      	negs	r0, r0
 8029918:	2a00      	cmp	r2, #0
 802991a:	d0f9      	beq.n	8029910 <_strtoul_l.constprop.0+0xb8>
 802991c:	b107      	cbz	r7, 8029920 <_strtoul_l.constprop.0+0xc8>
 802991e:	1e69      	subs	r1, r5, #1
 8029920:	6011      	str	r1, [r2, #0]
 8029922:	e7f5      	b.n	8029910 <_strtoul_l.constprop.0+0xb8>
 8029924:	2430      	movs	r4, #48	; 0x30
 8029926:	2b00      	cmp	r3, #0
 8029928:	d1b5      	bne.n	8029896 <_strtoul_l.constprop.0+0x3e>
 802992a:	2308      	movs	r3, #8
 802992c:	e7b3      	b.n	8029896 <_strtoul_l.constprop.0+0x3e>
 802992e:	2c30      	cmp	r4, #48	; 0x30
 8029930:	d0a9      	beq.n	8029886 <_strtoul_l.constprop.0+0x2e>
 8029932:	230a      	movs	r3, #10
 8029934:	e7af      	b.n	8029896 <_strtoul_l.constprop.0+0x3e>
 8029936:	bf00      	nop
 8029938:	0802a1c9 	.word	0x0802a1c9

0802993c <_strtoul_r>:
 802993c:	f7ff bf8c 	b.w	8029858 <_strtoul_l.constprop.0>

08029940 <__ascii_wctomb>:
 8029940:	b149      	cbz	r1, 8029956 <__ascii_wctomb+0x16>
 8029942:	2aff      	cmp	r2, #255	; 0xff
 8029944:	bf85      	ittet	hi
 8029946:	238a      	movhi	r3, #138	; 0x8a
 8029948:	6003      	strhi	r3, [r0, #0]
 802994a:	700a      	strbls	r2, [r1, #0]
 802994c:	f04f 30ff 	movhi.w	r0, #4294967295
 8029950:	bf98      	it	ls
 8029952:	2001      	movls	r0, #1
 8029954:	4770      	bx	lr
 8029956:	4608      	mov	r0, r1
 8029958:	4770      	bx	lr
	...

0802995c <fiprintf>:
 802995c:	b40e      	push	{r1, r2, r3}
 802995e:	b503      	push	{r0, r1, lr}
 8029960:	4601      	mov	r1, r0
 8029962:	ab03      	add	r3, sp, #12
 8029964:	4805      	ldr	r0, [pc, #20]	; (802997c <fiprintf+0x20>)
 8029966:	f853 2b04 	ldr.w	r2, [r3], #4
 802996a:	6800      	ldr	r0, [r0, #0]
 802996c:	9301      	str	r3, [sp, #4]
 802996e:	f000 f83f 	bl	80299f0 <_vfiprintf_r>
 8029972:	b002      	add	sp, #8
 8029974:	f85d eb04 	ldr.w	lr, [sp], #4
 8029978:	b003      	add	sp, #12
 802997a:	4770      	bx	lr
 802997c:	20000064 	.word	0x20000064

08029980 <abort>:
 8029980:	b508      	push	{r3, lr}
 8029982:	2006      	movs	r0, #6
 8029984:	f000 fa0c 	bl	8029da0 <raise>
 8029988:	2001      	movs	r0, #1
 802998a:	f7f7 fe65 	bl	8021658 <_exit>

0802998e <_malloc_usable_size_r>:
 802998e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029992:	1f18      	subs	r0, r3, #4
 8029994:	2b00      	cmp	r3, #0
 8029996:	bfbc      	itt	lt
 8029998:	580b      	ldrlt	r3, [r1, r0]
 802999a:	18c0      	addlt	r0, r0, r3
 802999c:	4770      	bx	lr

0802999e <__sfputc_r>:
 802999e:	6893      	ldr	r3, [r2, #8]
 80299a0:	3b01      	subs	r3, #1
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	b410      	push	{r4}
 80299a6:	6093      	str	r3, [r2, #8]
 80299a8:	da08      	bge.n	80299bc <__sfputc_r+0x1e>
 80299aa:	6994      	ldr	r4, [r2, #24]
 80299ac:	42a3      	cmp	r3, r4
 80299ae:	db01      	blt.n	80299b4 <__sfputc_r+0x16>
 80299b0:	290a      	cmp	r1, #10
 80299b2:	d103      	bne.n	80299bc <__sfputc_r+0x1e>
 80299b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80299b8:	f000 b934 	b.w	8029c24 <__swbuf_r>
 80299bc:	6813      	ldr	r3, [r2, #0]
 80299be:	1c58      	adds	r0, r3, #1
 80299c0:	6010      	str	r0, [r2, #0]
 80299c2:	7019      	strb	r1, [r3, #0]
 80299c4:	4608      	mov	r0, r1
 80299c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80299ca:	4770      	bx	lr

080299cc <__sfputs_r>:
 80299cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299ce:	4606      	mov	r6, r0
 80299d0:	460f      	mov	r7, r1
 80299d2:	4614      	mov	r4, r2
 80299d4:	18d5      	adds	r5, r2, r3
 80299d6:	42ac      	cmp	r4, r5
 80299d8:	d101      	bne.n	80299de <__sfputs_r+0x12>
 80299da:	2000      	movs	r0, #0
 80299dc:	e007      	b.n	80299ee <__sfputs_r+0x22>
 80299de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299e2:	463a      	mov	r2, r7
 80299e4:	4630      	mov	r0, r6
 80299e6:	f7ff ffda 	bl	802999e <__sfputc_r>
 80299ea:	1c43      	adds	r3, r0, #1
 80299ec:	d1f3      	bne.n	80299d6 <__sfputs_r+0xa>
 80299ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080299f0 <_vfiprintf_r>:
 80299f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299f4:	460d      	mov	r5, r1
 80299f6:	b09d      	sub	sp, #116	; 0x74
 80299f8:	4614      	mov	r4, r2
 80299fa:	4698      	mov	r8, r3
 80299fc:	4606      	mov	r6, r0
 80299fe:	b118      	cbz	r0, 8029a08 <_vfiprintf_r+0x18>
 8029a00:	6a03      	ldr	r3, [r0, #32]
 8029a02:	b90b      	cbnz	r3, 8029a08 <_vfiprintf_r+0x18>
 8029a04:	f7fc f962 	bl	8025ccc <__sinit>
 8029a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029a0a:	07d9      	lsls	r1, r3, #31
 8029a0c:	d405      	bmi.n	8029a1a <_vfiprintf_r+0x2a>
 8029a0e:	89ab      	ldrh	r3, [r5, #12]
 8029a10:	059a      	lsls	r2, r3, #22
 8029a12:	d402      	bmi.n	8029a1a <_vfiprintf_r+0x2a>
 8029a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029a16:	f7fc fa9e 	bl	8025f56 <__retarget_lock_acquire_recursive>
 8029a1a:	89ab      	ldrh	r3, [r5, #12]
 8029a1c:	071b      	lsls	r3, r3, #28
 8029a1e:	d501      	bpl.n	8029a24 <_vfiprintf_r+0x34>
 8029a20:	692b      	ldr	r3, [r5, #16]
 8029a22:	b99b      	cbnz	r3, 8029a4c <_vfiprintf_r+0x5c>
 8029a24:	4629      	mov	r1, r5
 8029a26:	4630      	mov	r0, r6
 8029a28:	f000 f93a 	bl	8029ca0 <__swsetup_r>
 8029a2c:	b170      	cbz	r0, 8029a4c <_vfiprintf_r+0x5c>
 8029a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029a30:	07dc      	lsls	r4, r3, #31
 8029a32:	d504      	bpl.n	8029a3e <_vfiprintf_r+0x4e>
 8029a34:	f04f 30ff 	mov.w	r0, #4294967295
 8029a38:	b01d      	add	sp, #116	; 0x74
 8029a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a3e:	89ab      	ldrh	r3, [r5, #12]
 8029a40:	0598      	lsls	r0, r3, #22
 8029a42:	d4f7      	bmi.n	8029a34 <_vfiprintf_r+0x44>
 8029a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029a46:	f7fc fa87 	bl	8025f58 <__retarget_lock_release_recursive>
 8029a4a:	e7f3      	b.n	8029a34 <_vfiprintf_r+0x44>
 8029a4c:	2300      	movs	r3, #0
 8029a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8029a50:	2320      	movs	r3, #32
 8029a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8029a5a:	2330      	movs	r3, #48	; 0x30
 8029a5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8029c10 <_vfiprintf_r+0x220>
 8029a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029a64:	f04f 0901 	mov.w	r9, #1
 8029a68:	4623      	mov	r3, r4
 8029a6a:	469a      	mov	sl, r3
 8029a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029a70:	b10a      	cbz	r2, 8029a76 <_vfiprintf_r+0x86>
 8029a72:	2a25      	cmp	r2, #37	; 0x25
 8029a74:	d1f9      	bne.n	8029a6a <_vfiprintf_r+0x7a>
 8029a76:	ebba 0b04 	subs.w	fp, sl, r4
 8029a7a:	d00b      	beq.n	8029a94 <_vfiprintf_r+0xa4>
 8029a7c:	465b      	mov	r3, fp
 8029a7e:	4622      	mov	r2, r4
 8029a80:	4629      	mov	r1, r5
 8029a82:	4630      	mov	r0, r6
 8029a84:	f7ff ffa2 	bl	80299cc <__sfputs_r>
 8029a88:	3001      	adds	r0, #1
 8029a8a:	f000 80a9 	beq.w	8029be0 <_vfiprintf_r+0x1f0>
 8029a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029a90:	445a      	add	r2, fp
 8029a92:	9209      	str	r2, [sp, #36]	; 0x24
 8029a94:	f89a 3000 	ldrb.w	r3, [sl]
 8029a98:	2b00      	cmp	r3, #0
 8029a9a:	f000 80a1 	beq.w	8029be0 <_vfiprintf_r+0x1f0>
 8029a9e:	2300      	movs	r3, #0
 8029aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8029aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029aa8:	f10a 0a01 	add.w	sl, sl, #1
 8029aac:	9304      	str	r3, [sp, #16]
 8029aae:	9307      	str	r3, [sp, #28]
 8029ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8029ab6:	4654      	mov	r4, sl
 8029ab8:	2205      	movs	r2, #5
 8029aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029abe:	4854      	ldr	r0, [pc, #336]	; (8029c10 <_vfiprintf_r+0x220>)
 8029ac0:	f7f6 fb8e 	bl	80201e0 <memchr>
 8029ac4:	9a04      	ldr	r2, [sp, #16]
 8029ac6:	b9d8      	cbnz	r0, 8029b00 <_vfiprintf_r+0x110>
 8029ac8:	06d1      	lsls	r1, r2, #27
 8029aca:	bf44      	itt	mi
 8029acc:	2320      	movmi	r3, #32
 8029ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029ad2:	0713      	lsls	r3, r2, #28
 8029ad4:	bf44      	itt	mi
 8029ad6:	232b      	movmi	r3, #43	; 0x2b
 8029ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029adc:	f89a 3000 	ldrb.w	r3, [sl]
 8029ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8029ae2:	d015      	beq.n	8029b10 <_vfiprintf_r+0x120>
 8029ae4:	9a07      	ldr	r2, [sp, #28]
 8029ae6:	4654      	mov	r4, sl
 8029ae8:	2000      	movs	r0, #0
 8029aea:	f04f 0c0a 	mov.w	ip, #10
 8029aee:	4621      	mov	r1, r4
 8029af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029af4:	3b30      	subs	r3, #48	; 0x30
 8029af6:	2b09      	cmp	r3, #9
 8029af8:	d94d      	bls.n	8029b96 <_vfiprintf_r+0x1a6>
 8029afa:	b1b0      	cbz	r0, 8029b2a <_vfiprintf_r+0x13a>
 8029afc:	9207      	str	r2, [sp, #28]
 8029afe:	e014      	b.n	8029b2a <_vfiprintf_r+0x13a>
 8029b00:	eba0 0308 	sub.w	r3, r0, r8
 8029b04:	fa09 f303 	lsl.w	r3, r9, r3
 8029b08:	4313      	orrs	r3, r2
 8029b0a:	9304      	str	r3, [sp, #16]
 8029b0c:	46a2      	mov	sl, r4
 8029b0e:	e7d2      	b.n	8029ab6 <_vfiprintf_r+0xc6>
 8029b10:	9b03      	ldr	r3, [sp, #12]
 8029b12:	1d19      	adds	r1, r3, #4
 8029b14:	681b      	ldr	r3, [r3, #0]
 8029b16:	9103      	str	r1, [sp, #12]
 8029b18:	2b00      	cmp	r3, #0
 8029b1a:	bfbb      	ittet	lt
 8029b1c:	425b      	neglt	r3, r3
 8029b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8029b22:	9307      	strge	r3, [sp, #28]
 8029b24:	9307      	strlt	r3, [sp, #28]
 8029b26:	bfb8      	it	lt
 8029b28:	9204      	strlt	r2, [sp, #16]
 8029b2a:	7823      	ldrb	r3, [r4, #0]
 8029b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8029b2e:	d10c      	bne.n	8029b4a <_vfiprintf_r+0x15a>
 8029b30:	7863      	ldrb	r3, [r4, #1]
 8029b32:	2b2a      	cmp	r3, #42	; 0x2a
 8029b34:	d134      	bne.n	8029ba0 <_vfiprintf_r+0x1b0>
 8029b36:	9b03      	ldr	r3, [sp, #12]
 8029b38:	1d1a      	adds	r2, r3, #4
 8029b3a:	681b      	ldr	r3, [r3, #0]
 8029b3c:	9203      	str	r2, [sp, #12]
 8029b3e:	2b00      	cmp	r3, #0
 8029b40:	bfb8      	it	lt
 8029b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8029b46:	3402      	adds	r4, #2
 8029b48:	9305      	str	r3, [sp, #20]
 8029b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8029c20 <_vfiprintf_r+0x230>
 8029b4e:	7821      	ldrb	r1, [r4, #0]
 8029b50:	2203      	movs	r2, #3
 8029b52:	4650      	mov	r0, sl
 8029b54:	f7f6 fb44 	bl	80201e0 <memchr>
 8029b58:	b138      	cbz	r0, 8029b6a <_vfiprintf_r+0x17a>
 8029b5a:	9b04      	ldr	r3, [sp, #16]
 8029b5c:	eba0 000a 	sub.w	r0, r0, sl
 8029b60:	2240      	movs	r2, #64	; 0x40
 8029b62:	4082      	lsls	r2, r0
 8029b64:	4313      	orrs	r3, r2
 8029b66:	3401      	adds	r4, #1
 8029b68:	9304      	str	r3, [sp, #16]
 8029b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029b6e:	4829      	ldr	r0, [pc, #164]	; (8029c14 <_vfiprintf_r+0x224>)
 8029b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029b74:	2206      	movs	r2, #6
 8029b76:	f7f6 fb33 	bl	80201e0 <memchr>
 8029b7a:	2800      	cmp	r0, #0
 8029b7c:	d03f      	beq.n	8029bfe <_vfiprintf_r+0x20e>
 8029b7e:	4b26      	ldr	r3, [pc, #152]	; (8029c18 <_vfiprintf_r+0x228>)
 8029b80:	bb1b      	cbnz	r3, 8029bca <_vfiprintf_r+0x1da>
 8029b82:	9b03      	ldr	r3, [sp, #12]
 8029b84:	3307      	adds	r3, #7
 8029b86:	f023 0307 	bic.w	r3, r3, #7
 8029b8a:	3308      	adds	r3, #8
 8029b8c:	9303      	str	r3, [sp, #12]
 8029b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b90:	443b      	add	r3, r7
 8029b92:	9309      	str	r3, [sp, #36]	; 0x24
 8029b94:	e768      	b.n	8029a68 <_vfiprintf_r+0x78>
 8029b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8029b9a:	460c      	mov	r4, r1
 8029b9c:	2001      	movs	r0, #1
 8029b9e:	e7a6      	b.n	8029aee <_vfiprintf_r+0xfe>
 8029ba0:	2300      	movs	r3, #0
 8029ba2:	3401      	adds	r4, #1
 8029ba4:	9305      	str	r3, [sp, #20]
 8029ba6:	4619      	mov	r1, r3
 8029ba8:	f04f 0c0a 	mov.w	ip, #10
 8029bac:	4620      	mov	r0, r4
 8029bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029bb2:	3a30      	subs	r2, #48	; 0x30
 8029bb4:	2a09      	cmp	r2, #9
 8029bb6:	d903      	bls.n	8029bc0 <_vfiprintf_r+0x1d0>
 8029bb8:	2b00      	cmp	r3, #0
 8029bba:	d0c6      	beq.n	8029b4a <_vfiprintf_r+0x15a>
 8029bbc:	9105      	str	r1, [sp, #20]
 8029bbe:	e7c4      	b.n	8029b4a <_vfiprintf_r+0x15a>
 8029bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8029bc4:	4604      	mov	r4, r0
 8029bc6:	2301      	movs	r3, #1
 8029bc8:	e7f0      	b.n	8029bac <_vfiprintf_r+0x1bc>
 8029bca:	ab03      	add	r3, sp, #12
 8029bcc:	9300      	str	r3, [sp, #0]
 8029bce:	462a      	mov	r2, r5
 8029bd0:	4b12      	ldr	r3, [pc, #72]	; (8029c1c <_vfiprintf_r+0x22c>)
 8029bd2:	a904      	add	r1, sp, #16
 8029bd4:	4630      	mov	r0, r6
 8029bd6:	f7fb fa17 	bl	8025008 <_printf_float>
 8029bda:	4607      	mov	r7, r0
 8029bdc:	1c78      	adds	r0, r7, #1
 8029bde:	d1d6      	bne.n	8029b8e <_vfiprintf_r+0x19e>
 8029be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029be2:	07d9      	lsls	r1, r3, #31
 8029be4:	d405      	bmi.n	8029bf2 <_vfiprintf_r+0x202>
 8029be6:	89ab      	ldrh	r3, [r5, #12]
 8029be8:	059a      	lsls	r2, r3, #22
 8029bea:	d402      	bmi.n	8029bf2 <_vfiprintf_r+0x202>
 8029bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029bee:	f7fc f9b3 	bl	8025f58 <__retarget_lock_release_recursive>
 8029bf2:	89ab      	ldrh	r3, [r5, #12]
 8029bf4:	065b      	lsls	r3, r3, #25
 8029bf6:	f53f af1d 	bmi.w	8029a34 <_vfiprintf_r+0x44>
 8029bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029bfc:	e71c      	b.n	8029a38 <_vfiprintf_r+0x48>
 8029bfe:	ab03      	add	r3, sp, #12
 8029c00:	9300      	str	r3, [sp, #0]
 8029c02:	462a      	mov	r2, r5
 8029c04:	4b05      	ldr	r3, [pc, #20]	; (8029c1c <_vfiprintf_r+0x22c>)
 8029c06:	a904      	add	r1, sp, #16
 8029c08:	4630      	mov	r0, r6
 8029c0a:	f7fb fca1 	bl	8025550 <_printf_i>
 8029c0e:	e7e4      	b.n	8029bda <_vfiprintf_r+0x1ea>
 8029c10:	0802a2c9 	.word	0x0802a2c9
 8029c14:	0802a2d3 	.word	0x0802a2d3
 8029c18:	08025009 	.word	0x08025009
 8029c1c:	080299cd 	.word	0x080299cd
 8029c20:	0802a2cf 	.word	0x0802a2cf

08029c24 <__swbuf_r>:
 8029c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c26:	460e      	mov	r6, r1
 8029c28:	4614      	mov	r4, r2
 8029c2a:	4605      	mov	r5, r0
 8029c2c:	b118      	cbz	r0, 8029c36 <__swbuf_r+0x12>
 8029c2e:	6a03      	ldr	r3, [r0, #32]
 8029c30:	b90b      	cbnz	r3, 8029c36 <__swbuf_r+0x12>
 8029c32:	f7fc f84b 	bl	8025ccc <__sinit>
 8029c36:	69a3      	ldr	r3, [r4, #24]
 8029c38:	60a3      	str	r3, [r4, #8]
 8029c3a:	89a3      	ldrh	r3, [r4, #12]
 8029c3c:	071a      	lsls	r2, r3, #28
 8029c3e:	d525      	bpl.n	8029c8c <__swbuf_r+0x68>
 8029c40:	6923      	ldr	r3, [r4, #16]
 8029c42:	b31b      	cbz	r3, 8029c8c <__swbuf_r+0x68>
 8029c44:	6823      	ldr	r3, [r4, #0]
 8029c46:	6922      	ldr	r2, [r4, #16]
 8029c48:	1a98      	subs	r0, r3, r2
 8029c4a:	6963      	ldr	r3, [r4, #20]
 8029c4c:	b2f6      	uxtb	r6, r6
 8029c4e:	4283      	cmp	r3, r0
 8029c50:	4637      	mov	r7, r6
 8029c52:	dc04      	bgt.n	8029c5e <__swbuf_r+0x3a>
 8029c54:	4621      	mov	r1, r4
 8029c56:	4628      	mov	r0, r5
 8029c58:	f7ff f942 	bl	8028ee0 <_fflush_r>
 8029c5c:	b9e0      	cbnz	r0, 8029c98 <__swbuf_r+0x74>
 8029c5e:	68a3      	ldr	r3, [r4, #8]
 8029c60:	3b01      	subs	r3, #1
 8029c62:	60a3      	str	r3, [r4, #8]
 8029c64:	6823      	ldr	r3, [r4, #0]
 8029c66:	1c5a      	adds	r2, r3, #1
 8029c68:	6022      	str	r2, [r4, #0]
 8029c6a:	701e      	strb	r6, [r3, #0]
 8029c6c:	6962      	ldr	r2, [r4, #20]
 8029c6e:	1c43      	adds	r3, r0, #1
 8029c70:	429a      	cmp	r2, r3
 8029c72:	d004      	beq.n	8029c7e <__swbuf_r+0x5a>
 8029c74:	89a3      	ldrh	r3, [r4, #12]
 8029c76:	07db      	lsls	r3, r3, #31
 8029c78:	d506      	bpl.n	8029c88 <__swbuf_r+0x64>
 8029c7a:	2e0a      	cmp	r6, #10
 8029c7c:	d104      	bne.n	8029c88 <__swbuf_r+0x64>
 8029c7e:	4621      	mov	r1, r4
 8029c80:	4628      	mov	r0, r5
 8029c82:	f7ff f92d 	bl	8028ee0 <_fflush_r>
 8029c86:	b938      	cbnz	r0, 8029c98 <__swbuf_r+0x74>
 8029c88:	4638      	mov	r0, r7
 8029c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029c8c:	4621      	mov	r1, r4
 8029c8e:	4628      	mov	r0, r5
 8029c90:	f000 f806 	bl	8029ca0 <__swsetup_r>
 8029c94:	2800      	cmp	r0, #0
 8029c96:	d0d5      	beq.n	8029c44 <__swbuf_r+0x20>
 8029c98:	f04f 37ff 	mov.w	r7, #4294967295
 8029c9c:	e7f4      	b.n	8029c88 <__swbuf_r+0x64>
	...

08029ca0 <__swsetup_r>:
 8029ca0:	b538      	push	{r3, r4, r5, lr}
 8029ca2:	4b2a      	ldr	r3, [pc, #168]	; (8029d4c <__swsetup_r+0xac>)
 8029ca4:	4605      	mov	r5, r0
 8029ca6:	6818      	ldr	r0, [r3, #0]
 8029ca8:	460c      	mov	r4, r1
 8029caa:	b118      	cbz	r0, 8029cb4 <__swsetup_r+0x14>
 8029cac:	6a03      	ldr	r3, [r0, #32]
 8029cae:	b90b      	cbnz	r3, 8029cb4 <__swsetup_r+0x14>
 8029cb0:	f7fc f80c 	bl	8025ccc <__sinit>
 8029cb4:	89a3      	ldrh	r3, [r4, #12]
 8029cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029cba:	0718      	lsls	r0, r3, #28
 8029cbc:	d422      	bmi.n	8029d04 <__swsetup_r+0x64>
 8029cbe:	06d9      	lsls	r1, r3, #27
 8029cc0:	d407      	bmi.n	8029cd2 <__swsetup_r+0x32>
 8029cc2:	2309      	movs	r3, #9
 8029cc4:	602b      	str	r3, [r5, #0]
 8029cc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029cca:	81a3      	strh	r3, [r4, #12]
 8029ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8029cd0:	e034      	b.n	8029d3c <__swsetup_r+0x9c>
 8029cd2:	0758      	lsls	r0, r3, #29
 8029cd4:	d512      	bpl.n	8029cfc <__swsetup_r+0x5c>
 8029cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029cd8:	b141      	cbz	r1, 8029cec <__swsetup_r+0x4c>
 8029cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029cde:	4299      	cmp	r1, r3
 8029ce0:	d002      	beq.n	8029ce8 <__swsetup_r+0x48>
 8029ce2:	4628      	mov	r0, r5
 8029ce4:	f7fc ffba 	bl	8026c5c <_free_r>
 8029ce8:	2300      	movs	r3, #0
 8029cea:	6363      	str	r3, [r4, #52]	; 0x34
 8029cec:	89a3      	ldrh	r3, [r4, #12]
 8029cee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029cf2:	81a3      	strh	r3, [r4, #12]
 8029cf4:	2300      	movs	r3, #0
 8029cf6:	6063      	str	r3, [r4, #4]
 8029cf8:	6923      	ldr	r3, [r4, #16]
 8029cfa:	6023      	str	r3, [r4, #0]
 8029cfc:	89a3      	ldrh	r3, [r4, #12]
 8029cfe:	f043 0308 	orr.w	r3, r3, #8
 8029d02:	81a3      	strh	r3, [r4, #12]
 8029d04:	6923      	ldr	r3, [r4, #16]
 8029d06:	b94b      	cbnz	r3, 8029d1c <__swsetup_r+0x7c>
 8029d08:	89a3      	ldrh	r3, [r4, #12]
 8029d0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029d12:	d003      	beq.n	8029d1c <__swsetup_r+0x7c>
 8029d14:	4621      	mov	r1, r4
 8029d16:	4628      	mov	r0, r5
 8029d18:	f000 f884 	bl	8029e24 <__smakebuf_r>
 8029d1c:	89a0      	ldrh	r0, [r4, #12]
 8029d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029d22:	f010 0301 	ands.w	r3, r0, #1
 8029d26:	d00a      	beq.n	8029d3e <__swsetup_r+0x9e>
 8029d28:	2300      	movs	r3, #0
 8029d2a:	60a3      	str	r3, [r4, #8]
 8029d2c:	6963      	ldr	r3, [r4, #20]
 8029d2e:	425b      	negs	r3, r3
 8029d30:	61a3      	str	r3, [r4, #24]
 8029d32:	6923      	ldr	r3, [r4, #16]
 8029d34:	b943      	cbnz	r3, 8029d48 <__swsetup_r+0xa8>
 8029d36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029d3a:	d1c4      	bne.n	8029cc6 <__swsetup_r+0x26>
 8029d3c:	bd38      	pop	{r3, r4, r5, pc}
 8029d3e:	0781      	lsls	r1, r0, #30
 8029d40:	bf58      	it	pl
 8029d42:	6963      	ldrpl	r3, [r4, #20]
 8029d44:	60a3      	str	r3, [r4, #8]
 8029d46:	e7f4      	b.n	8029d32 <__swsetup_r+0x92>
 8029d48:	2000      	movs	r0, #0
 8029d4a:	e7f7      	b.n	8029d3c <__swsetup_r+0x9c>
 8029d4c:	20000064 	.word	0x20000064

08029d50 <_raise_r>:
 8029d50:	291f      	cmp	r1, #31
 8029d52:	b538      	push	{r3, r4, r5, lr}
 8029d54:	4604      	mov	r4, r0
 8029d56:	460d      	mov	r5, r1
 8029d58:	d904      	bls.n	8029d64 <_raise_r+0x14>
 8029d5a:	2316      	movs	r3, #22
 8029d5c:	6003      	str	r3, [r0, #0]
 8029d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8029d62:	bd38      	pop	{r3, r4, r5, pc}
 8029d64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8029d66:	b112      	cbz	r2, 8029d6e <_raise_r+0x1e>
 8029d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029d6c:	b94b      	cbnz	r3, 8029d82 <_raise_r+0x32>
 8029d6e:	4620      	mov	r0, r4
 8029d70:	f000 f830 	bl	8029dd4 <_getpid_r>
 8029d74:	462a      	mov	r2, r5
 8029d76:	4601      	mov	r1, r0
 8029d78:	4620      	mov	r0, r4
 8029d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029d7e:	f000 b817 	b.w	8029db0 <_kill_r>
 8029d82:	2b01      	cmp	r3, #1
 8029d84:	d00a      	beq.n	8029d9c <_raise_r+0x4c>
 8029d86:	1c59      	adds	r1, r3, #1
 8029d88:	d103      	bne.n	8029d92 <_raise_r+0x42>
 8029d8a:	2316      	movs	r3, #22
 8029d8c:	6003      	str	r3, [r0, #0]
 8029d8e:	2001      	movs	r0, #1
 8029d90:	e7e7      	b.n	8029d62 <_raise_r+0x12>
 8029d92:	2400      	movs	r4, #0
 8029d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029d98:	4628      	mov	r0, r5
 8029d9a:	4798      	blx	r3
 8029d9c:	2000      	movs	r0, #0
 8029d9e:	e7e0      	b.n	8029d62 <_raise_r+0x12>

08029da0 <raise>:
 8029da0:	4b02      	ldr	r3, [pc, #8]	; (8029dac <raise+0xc>)
 8029da2:	4601      	mov	r1, r0
 8029da4:	6818      	ldr	r0, [r3, #0]
 8029da6:	f7ff bfd3 	b.w	8029d50 <_raise_r>
 8029daa:	bf00      	nop
 8029dac:	20000064 	.word	0x20000064

08029db0 <_kill_r>:
 8029db0:	b538      	push	{r3, r4, r5, lr}
 8029db2:	4d07      	ldr	r5, [pc, #28]	; (8029dd0 <_kill_r+0x20>)
 8029db4:	2300      	movs	r3, #0
 8029db6:	4604      	mov	r4, r0
 8029db8:	4608      	mov	r0, r1
 8029dba:	4611      	mov	r1, r2
 8029dbc:	602b      	str	r3, [r5, #0]
 8029dbe:	f7f7 fc3b 	bl	8021638 <_kill>
 8029dc2:	1c43      	adds	r3, r0, #1
 8029dc4:	d102      	bne.n	8029dcc <_kill_r+0x1c>
 8029dc6:	682b      	ldr	r3, [r5, #0]
 8029dc8:	b103      	cbz	r3, 8029dcc <_kill_r+0x1c>
 8029dca:	6023      	str	r3, [r4, #0]
 8029dcc:	bd38      	pop	{r3, r4, r5, pc}
 8029dce:	bf00      	nop
 8029dd0:	20000454 	.word	0x20000454

08029dd4 <_getpid_r>:
 8029dd4:	f7f7 bc28 	b.w	8021628 <_getpid>

08029dd8 <__swhatbuf_r>:
 8029dd8:	b570      	push	{r4, r5, r6, lr}
 8029dda:	460c      	mov	r4, r1
 8029ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029de0:	2900      	cmp	r1, #0
 8029de2:	b096      	sub	sp, #88	; 0x58
 8029de4:	4615      	mov	r5, r2
 8029de6:	461e      	mov	r6, r3
 8029de8:	da0d      	bge.n	8029e06 <__swhatbuf_r+0x2e>
 8029dea:	89a3      	ldrh	r3, [r4, #12]
 8029dec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8029df0:	f04f 0100 	mov.w	r1, #0
 8029df4:	bf0c      	ite	eq
 8029df6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8029dfa:	2340      	movne	r3, #64	; 0x40
 8029dfc:	2000      	movs	r0, #0
 8029dfe:	6031      	str	r1, [r6, #0]
 8029e00:	602b      	str	r3, [r5, #0]
 8029e02:	b016      	add	sp, #88	; 0x58
 8029e04:	bd70      	pop	{r4, r5, r6, pc}
 8029e06:	466a      	mov	r2, sp
 8029e08:	f000 f848 	bl	8029e9c <_fstat_r>
 8029e0c:	2800      	cmp	r0, #0
 8029e0e:	dbec      	blt.n	8029dea <__swhatbuf_r+0x12>
 8029e10:	9901      	ldr	r1, [sp, #4]
 8029e12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8029e16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8029e1a:	4259      	negs	r1, r3
 8029e1c:	4159      	adcs	r1, r3
 8029e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029e22:	e7eb      	b.n	8029dfc <__swhatbuf_r+0x24>

08029e24 <__smakebuf_r>:
 8029e24:	898b      	ldrh	r3, [r1, #12]
 8029e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029e28:	079d      	lsls	r5, r3, #30
 8029e2a:	4606      	mov	r6, r0
 8029e2c:	460c      	mov	r4, r1
 8029e2e:	d507      	bpl.n	8029e40 <__smakebuf_r+0x1c>
 8029e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029e34:	6023      	str	r3, [r4, #0]
 8029e36:	6123      	str	r3, [r4, #16]
 8029e38:	2301      	movs	r3, #1
 8029e3a:	6163      	str	r3, [r4, #20]
 8029e3c:	b002      	add	sp, #8
 8029e3e:	bd70      	pop	{r4, r5, r6, pc}
 8029e40:	ab01      	add	r3, sp, #4
 8029e42:	466a      	mov	r2, sp
 8029e44:	f7ff ffc8 	bl	8029dd8 <__swhatbuf_r>
 8029e48:	9900      	ldr	r1, [sp, #0]
 8029e4a:	4605      	mov	r5, r0
 8029e4c:	4630      	mov	r0, r6
 8029e4e:	f7fc ff79 	bl	8026d44 <_malloc_r>
 8029e52:	b948      	cbnz	r0, 8029e68 <__smakebuf_r+0x44>
 8029e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029e58:	059a      	lsls	r2, r3, #22
 8029e5a:	d4ef      	bmi.n	8029e3c <__smakebuf_r+0x18>
 8029e5c:	f023 0303 	bic.w	r3, r3, #3
 8029e60:	f043 0302 	orr.w	r3, r3, #2
 8029e64:	81a3      	strh	r3, [r4, #12]
 8029e66:	e7e3      	b.n	8029e30 <__smakebuf_r+0xc>
 8029e68:	89a3      	ldrh	r3, [r4, #12]
 8029e6a:	6020      	str	r0, [r4, #0]
 8029e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029e70:	81a3      	strh	r3, [r4, #12]
 8029e72:	9b00      	ldr	r3, [sp, #0]
 8029e74:	6163      	str	r3, [r4, #20]
 8029e76:	9b01      	ldr	r3, [sp, #4]
 8029e78:	6120      	str	r0, [r4, #16]
 8029e7a:	b15b      	cbz	r3, 8029e94 <__smakebuf_r+0x70>
 8029e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029e80:	4630      	mov	r0, r6
 8029e82:	f000 f81d 	bl	8029ec0 <_isatty_r>
 8029e86:	b128      	cbz	r0, 8029e94 <__smakebuf_r+0x70>
 8029e88:	89a3      	ldrh	r3, [r4, #12]
 8029e8a:	f023 0303 	bic.w	r3, r3, #3
 8029e8e:	f043 0301 	orr.w	r3, r3, #1
 8029e92:	81a3      	strh	r3, [r4, #12]
 8029e94:	89a3      	ldrh	r3, [r4, #12]
 8029e96:	431d      	orrs	r5, r3
 8029e98:	81a5      	strh	r5, [r4, #12]
 8029e9a:	e7cf      	b.n	8029e3c <__smakebuf_r+0x18>

08029e9c <_fstat_r>:
 8029e9c:	b538      	push	{r3, r4, r5, lr}
 8029e9e:	4d07      	ldr	r5, [pc, #28]	; (8029ebc <_fstat_r+0x20>)
 8029ea0:	2300      	movs	r3, #0
 8029ea2:	4604      	mov	r4, r0
 8029ea4:	4608      	mov	r0, r1
 8029ea6:	4611      	mov	r1, r2
 8029ea8:	602b      	str	r3, [r5, #0]
 8029eaa:	f7f7 fc24 	bl	80216f6 <_fstat>
 8029eae:	1c43      	adds	r3, r0, #1
 8029eb0:	d102      	bne.n	8029eb8 <_fstat_r+0x1c>
 8029eb2:	682b      	ldr	r3, [r5, #0]
 8029eb4:	b103      	cbz	r3, 8029eb8 <_fstat_r+0x1c>
 8029eb6:	6023      	str	r3, [r4, #0]
 8029eb8:	bd38      	pop	{r3, r4, r5, pc}
 8029eba:	bf00      	nop
 8029ebc:	20000454 	.word	0x20000454

08029ec0 <_isatty_r>:
 8029ec0:	b538      	push	{r3, r4, r5, lr}
 8029ec2:	4d06      	ldr	r5, [pc, #24]	; (8029edc <_isatty_r+0x1c>)
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	4604      	mov	r4, r0
 8029ec8:	4608      	mov	r0, r1
 8029eca:	602b      	str	r3, [r5, #0]
 8029ecc:	f7f7 fc23 	bl	8021716 <_isatty>
 8029ed0:	1c43      	adds	r3, r0, #1
 8029ed2:	d102      	bne.n	8029eda <_isatty_r+0x1a>
 8029ed4:	682b      	ldr	r3, [r5, #0]
 8029ed6:	b103      	cbz	r3, 8029eda <_isatty_r+0x1a>
 8029ed8:	6023      	str	r3, [r4, #0]
 8029eda:	bd38      	pop	{r3, r4, r5, pc}
 8029edc:	20000454 	.word	0x20000454

08029ee0 <_init>:
 8029ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ee2:	bf00      	nop
 8029ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029ee6:	bc08      	pop	{r3}
 8029ee8:	469e      	mov	lr, r3
 8029eea:	4770      	bx	lr

08029eec <_fini>:
 8029eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029eee:	bf00      	nop
 8029ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029ef2:	bc08      	pop	{r3}
 8029ef4:	469e      	mov	lr, r3
 8029ef6:	4770      	bx	lr
